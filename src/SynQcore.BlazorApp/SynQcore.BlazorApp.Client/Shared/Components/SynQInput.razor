<div class="synq-input-container">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@InputId">@Label</label>
    }

    <input id="@InputId" type="@Type" value="@Value" @oninput="OnInputChanged" placeholder="@Placeholder"
        disabled="@Disabled" readonly="@ReadOnly" maxlength="@MaxLength" />

    @if (!string.IsNullOrEmpty(HelperText))
    {
        <div class="synq-input-helper">@HelperText</div>
    }

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="synq-input-error">@ErrorMessage</div>
    }
</div>

@code {
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ReadOnly { get; set; }
    [Parameter] public int? MaxLength { get; set; }
    [Parameter] public string? HelperText { get; set; }
    [Parameter] public string? ErrorMessage { get; set; }

    // Propriedades para compatibilidade com as demos
    [Parameter] public SynQInputSize Size { get; set; } = SynQInputSize.Medium;
    [Parameter] public SynQInputVariant Variant { get; set; } = SynQInputVariant.Outlined;
    [Parameter] public SynQInputState State { get; set; } = SynQInputState.Normal;
    [Parameter] public bool Required { get; set; }
    [Parameter] public bool FloatingLabel { get; set; }
    [Parameter] public bool ShowPasswordToggle { get; set; }
    [Parameter] public bool ShowCharacterCount { get; set; }
    [Parameter] public string? Mask { get; set; }
    [Parameter] public string? PrefixIcon { get; set; }
    [Parameter] public string? SuffixIcon { get; set; }
    [Parameter] public bool SuffixIconClickable { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnFocusChanged { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnBlurChanged { get; set; }
    [Parameter] public EventCallback OnSuffixIconClicked { get; set; }

    private string InputId = Guid.NewGuid().ToString();

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        Value = e.Value?.ToString();
        await ValueChanged.InvokeAsync(Value);
    }
}

<style>
    .synq-input-container {
        margin-bottom: 1rem;
    }

    .synq-input-container label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: #374151;
    }

    .synq-input-container input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        line-height: 1.5;
        color: #1f2937;
        background: white;
        transition: border-color 0.2s, box-shadow 0.2s;
    }

    .synq-input-container input:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .synq-input-container input:disabled {
        background-color: #f9fafb;
        color: #9ca3af;
        cursor: not-allowed;
        border-color: #e5e7eb;
    }

    .synq-input-container input:read-only {
        background-color: #f9fafb;
        cursor: default;
    }

    .synq-input-helper {
        margin-top: 0.25rem;
        font-size: 0.75rem;
        color: #6b7280;
    }

    .synq-input-error {
        margin-top: 0.25rem;
        font-size: 0.75rem;
        color: #ef4444;
        font-weight: 500;
    }
</style>
