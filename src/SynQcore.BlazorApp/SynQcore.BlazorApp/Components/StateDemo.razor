@using Fluxor
@using SynQcore.BlazorApp.Store.UI
@using SynQcore.BlazorApp.Store.User
@using SynQcore.BlazorApp.Client.Shared.Components
@using SynQcore.BlazorApp.Client.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@rendermode InteractiveServer

<div class="state-demo-panel">
    <div class="synq-card">
        <div class="synq-card-header">
            <h4>üìä Estado Global (Fluxor)</h4>
            <SynQBadge Variant="@(IsLoading? SynQBadgeVariant.Warning: SynQBadgeVariant.Success)"
                Text="@(IsLoading ? "Carregando..." : "Conectado")" />
        </div>

        <div class="synq-card-content">
            <!-- Estado da UI -->
            <div class="state-section">
                <h5>üé® Estado da UI</h5>
                <div class="state-controls">
                    <SynQButton Text="@($"Tema: {UIState.Value.Theme}")" OnClick="ToggleTheme"
                        Variant="SynQButtonVariant.Secondary" Size="SynQButtonSize.Small" />

                    <SynQButton Text="@($"Sidebar: {(UIState.Value.IsSidebarExpanded ? "Expandido" : "Recolhido")}")"
                        OnClick="ToggleSidebar" Variant="SynQButtonVariant.Secondary" Size="SynQButtonSize.Small" />

                    <SynQButton Text="Mostrar Notifica√ß√£o" OnClick="ShowNotification"
                        Variant="SynQButtonVariant.Primary" Size="SynQButtonSize.Small" />
                </div>

                @if (UIState.Value.Notifications.Any())
                {
                    <div class="notifications-preview">
                        <h6>üì¢ Notifica√ß√µes Ativas:</h6>
                        @foreach (var notification in UIState.Value.Notifications.Take(3))
                        {
                            <div class="notification-item @GetNotificationClass(notification.Type)">
                                <strong>@notification.Title</strong>: @notification.Message
                                <SynQButton Text="‚ùå" OnClick="() => RemoveNotification(notification.Id)"
                                    Size="SynQButtonSize.Small" Variant="SynQButtonVariant.Ghost" />
                            </div>
                        }
                    </div>
                }
            </div>

            <!-- Estado do Usu√°rio -->
            <div class="state-section">
                <h5>üë§ Estado do Usu√°rio</h5>
                <div class="user-status">
                    <SynQBadge
                        Variant="@(UserState.Value.IsAuthenticated ? SynQBadgeVariant.Success : SynQBadgeVariant.Error)"
                        Text="@(UserState.Value.IsAuthenticated ? "Autenticado" : "N√£o Autenticado")" />

                    @if (UserState.Value.IsAuthenticated && UserState.Value.CurrentUser != null)
                    {
                        <div class="user-info">
                            <SynQAvatar Name="@UserState.Value.CurrentUser.Nome"
                                ImageUrl="@UserState.Value.CurrentUser.FotoUrl" Size="SynQAvatarSize.Small" />
                            <span>@UserState.Value.CurrentUser.Nome (@UserState.Value.CurrentUser.Email)</span>
                        </div>
                    }
                    else
                    {
                        <div class="auth-actions">
                            <SynQButton Text="Login Demo" OnClick="SimulateLogin" Variant="SynQButtonVariant.Primary"
                                Size="SynQButtonSize.Small" />
                        </div>
                    }
                </div>
            </div>

            <!-- Informa√ß√µes de Debug -->
            <div class="state-section">
                <h5>üîß Debug</h5>
                <div class="debug-info">
                    <small>
                        <strong>Notifica√ß√µes:</strong> @UIState.Value.Notifications.Count<br />
                        <strong>Conex√£o API:</strong> @UIState.Value.ApiConnectionStatus<br />
                        <strong>Status Login:</strong> @UserState.Value.Status<br />
                        <strong>Permiss√µes:</strong> @UserState.Value.Permissions.Count
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .state-demo-panel {
        margin: 2rem 0;
    }

    .state-section {
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid var(--synq-color-border);
    }

    .state-section:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .state-controls {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
        margin-top: 0.5rem;
    }

    .notifications-preview {
        margin-top: 1rem;
        padding: 1rem;
        background: var(--synq-color-surface);
        border-radius: var(--synq-border-radius);
    }

    .notification-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        margin: 0.25rem 0;
        border-radius: var(--synq-border-radius);
        font-size: 0.875rem;
    }

    .notification-item.info {
        background: var(--synq-color-info-light);
        border-left: 3px solid var(--synq-color-info);
    }

    .notification-item.success {
        background: var(--synq-color-success-light);
        border-left: 3px solid var(--synq-color-success);
    }

    .notification-item.warning {
        background: var(--synq-color-warning-light);
        border-left: 3px solid var(--synq-color-warning);
    }

    .notification-item.error {
        background: var(--synq-color-error-light);
        border-left: 3px solid var(--synq-color-error);
    }

    .user-status {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-top: 0.5rem;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .debug-info {
        padding: 0.75rem;
        background: var(--synq-color-surface);
        border-radius: var(--synq-border-radius);
        color: var(--synq-color-text-secondary);
    }

    .auth-actions {
        display: flex;
        gap: 0.5rem;
    }
</style>

@code {
    [Inject] private IState<UIState> UIState { get; set; } = null!;
    [Inject] private IState<UserState> UserState { get; set; } = null!;
    [Inject] private IDispatcher Dispatcher { get; set; } = null!;

    private bool IsLoading => UIState.Value.IsLoading;

    /// <summary>
    /// Alterna o tema entre claro e escuro
    /// </summary>
    private void ToggleTheme()
    {
        var newTheme = UIState.Value.Theme == "light" ? "dark" : "light";
        Dispatcher.Dispatch(new UIActions.SetThemeAction(newTheme));
    }

    /// <summary>
    /// Alterna o estado da sidebar
    /// </summary>
    private void ToggleSidebar()
    {
        Dispatcher.Dispatch(new UIActions.ToggleSidebarAction());
    }

    /// <summary>
    /// Mostra uma notifica√ß√£o de exemplo
    /// </summary>
    private void ShowNotification()
    {
        var messages = new[]
        {
("Sucesso!", "Estado global funcionando perfeitamente!", NotificationType.Success),
("Informa√ß√£o", "O Fluxor est√° sincronizando dados...", NotificationType.Info),
("Aviso", "Demonstra√ß√£o do sistema de notifica√ß√µes", NotificationType.Warning),
("Novo recurso", "Sistema de estado implementado com sucesso!", NotificationType.Success)
};

        var random = new Random();
        var (title, message, type) = messages[random.Next(messages.Length)];

        Dispatcher.Dispatch(new UIActions.AddNotificationAction(title, message, type));
    }

    /// <summary>
    /// Remove uma notifica√ß√£o espec√≠fica
    /// </summary>
    private void RemoveNotification(string notificationId)
    {
        Dispatcher.Dispatch(new UIActions.RemoveNotificationAction(notificationId));
    }

    /// <summary>
    /// Simula um login para demonstra√ß√£o
    /// </summary>
    private void SimulateLogin()
    {
        var demoUser = new UserInfo
        {
            Id = Guid.NewGuid().ToString(),
            Nome = "Demo User",
            Email = "demo@synqcore.com",
            Username = "demo",
            Cargo = "Desenvolvedor",
            Departamento = "TI",
            DataCadastro = DateTime.Now,
            IsAtivo = true,
            Roles = new List<string> { "User", "Developer" }
        };

        var token = "demo-jwt-token-" + DateTime.Now.Ticks;
        var expiresAt = DateTime.Now.AddHours(8);

        Dispatcher.Dispatch(new UserActions.LoginSuccessAction(demoUser, token, null, expiresAt));
        Dispatcher.Dispatch(new UIActions.ShowSuccessMessageAction("Demo Login", "Login simulado realizado com sucesso!"));
    }

    /// <summary>
    /// Obt√©m a classe CSS para o tipo de notifica√ß√£o
    /// </summary>
    private string GetNotificationClass(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "success",
            NotificationType.Warning => "warning",
            NotificationType.Error => "error",
            _ => "info"
        };
    }
}
