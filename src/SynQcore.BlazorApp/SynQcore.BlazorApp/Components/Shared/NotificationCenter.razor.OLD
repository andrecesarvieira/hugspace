@using SynQcore.BlazorApp.Models
@using SynQcore.BlazorApp.Services
@inject INotificationService NotificationService
@inject IJSRuntime JS
@implements IDisposable

<!-- Incluir CSS externo -->
<link rel="stylesheet" href="~/css/notification-center.css" />

<div class="notification-center" style="position: relative !important;">
    <!-- Botão de Notificações Premium -->
    <div class="notification-trigger" @onclick="ToggleNotifications" 
         style="background: rgba(255,255,255,0.1) !important; 
                border: 1px solid rgba(255,255,255,0.2) !important; 
                color: white !important; 
                padding: 0.625rem !important; 
                border-radius: 10px !important; 
                cursor: pointer !important; 
                transition: all 0.3s ease !important; 
                backdrop-filter: blur(10px) !important; 
                position: relative !important; 
                display: flex !important; 
                align-items: center !important; 
                justify-content: center !important;">
        <i class="fas fa-bell notification-icon" style="font-size: 1.1rem !important; color: white !important;"></i>
        @if (unreadCount > 0)
        {
            <span class="notification-badge" 
                  style="position: absolute !important; 
                         top: -4px !important; 
                         right: -4px !important; 
                         background: linear-gradient(135deg, var(--error) 0%, #dc2626 100%) !important; 
                         color: white !important; 
                         border-radius: 50% !important; 
                         width: 20px !important; 
                         height: 20px !important; 
                         display: flex !important; 
                         align-items: center !important; 
                         justify-content: center !important; 
                         font-size: 0.7rem !important; 
                         font-weight: 600 !important; 
                         font-family: var(--font-family) !important; 
                         box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3) !important;">
                @(unreadCount > 99 ? "99+" : unreadCount.ToString())
            </span>
        }
    </div>

    <!-- Dropdown de Notificações Premium -->
    @if (isNotificationPanelOpen)
    {
        <div class="notification-dropdown" @onclick:stopPropagation="true" 
             style="position: absolute !important; 
                    top: calc(100% + 0.5rem) !important; 
                    right: 0 !important; 
                    background: white !important; 
                    border-radius: 16px !important; 
                    box-shadow: 0 20px 60px rgba(0,0,0,0.15) !important; 
                    padding: 0 !important; 
                    min-width: 380px !important; 
                    max-width: 400px !important; 
                    z-index: 2000 !important; 
                    border: none !important; 
                    backdrop-filter: blur(10px) !important; 
                    overflow: hidden !important;">
            <div class="notification-header" 
                 style="background: linear-gradient(135deg, var(--primary-500) 0%, var(--primary-700) 100%) !important; 
                        color: white !important; 
                        padding: 1.25rem !important; 
                        display: flex !important; 
                        align-items: center !important; 
                        justify-content: space-between !important;">
                <h3 style="font-family: var(--font-family) !important; 
                           font-weight: 600 !important; 
                           font-size: 1.1rem !important; 
                           color: white !important; 
                           margin: 0 !important;">
                    Notificações
                </h3>
                <div class="notification-actions" style="display: flex !important; align-items: center !important; gap: 0.75rem !important;">
                    @if (unreadCount > 0)
                    {
                        <button class="btn-mark-all-read" @onclick="MarkAllAsRead" 
                                style="background: rgba(255,255,255,0.15) !important; 
                                       border: 1px solid rgba(255,255,255,0.2) !important; 
                                       color: white !important; 
                                       padding: 0.375rem 0.75rem !important; 
                                       border-radius: 6px !important; 
                                       font-family: var(--font-family) !important; 
                                       font-weight: 500 !important; 
                                       font-size: 0.75rem !important; 
                                       cursor: pointer !important; 
                                       transition: all 0.3s ease !important;">
                            Marcar todas como lidas
                        </button>
                    }
                    <button class="btn-close" @onclick="CloseNotifications" 
                            style="background: transparent !important; 
                                   border: none !important; 
                                   color: rgba(255,255,255,0.8) !important; 
                                   padding: 0.375rem !important; 
                                   border-radius: 6px !important; 
                                   cursor: pointer !important; 
                                   transition: all 0.3s ease !important;">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>

            <div class="notification-filters" 
                 style="display: flex !important; 
                        background: var(--slate-50) !important; 
                        padding: 0.75rem !important; 
                        gap: 0.5rem !important; 
                        border-bottom: 1px solid var(--slate-100) !important;">
                <button class="filter-btn @(selectedFilter == "all" ? "active" : "")" 
                        @onclick='() => SetFilter("all")' 
                        style="background: @(selectedFilter == "all" ? "var(--primary-500)" : "transparent") !important; 
                               color: @(selectedFilter == "all" ? "white" : "var(--slate-600)") !important; 
                               border: 1px solid @(selectedFilter == "all" ? "var(--primary-500)" : "var(--slate-200)") !important; 
                               padding: 0.5rem 0.75rem !important; 
                               border-radius: 8px !important; 
                               font-family: var(--font-family) !important; 
                               font-weight: 500 !important; 
                               font-size: 0.8rem !important; 
                               cursor: pointer !important; 
                               transition: all 0.3s ease !important;">
                    Todas (@totalNotifications)
                </button>
                <button class="filter-btn @(selectedFilter == "unread" ? "active" : "")" 
                        @onclick='() => SetFilter("unread")' 
                        style="background: @(selectedFilter == "unread" ? "var(--primary-500)" : "transparent") !important; 
                               color: @(selectedFilter == "unread" ? "white" : "var(--slate-600)") !important; 
                               border: 1px solid @(selectedFilter == "unread" ? "var(--primary-500)" : "var(--slate-200)") !important; 
                               padding: 0.5rem 0.75rem !important; 
                               border-radius: 8px !important; 
                               font-family: var(--font-family) !important; 
                               font-weight: 500 !important; 
                               font-size: 0.8rem !important; 
                               cursor: pointer !important; 
                               transition: all 0.3s ease !important;">
                    Não lidas (@unreadCount)
                </button>
                <button class="filter-btn @(selectedFilter == "personal" ? "active" : "")" 
                        @onclick='() => SetFilter("personal")' 
                        style="background: @(selectedFilter == "personal" ? "var(--primary-500)" : "transparent") !important; 
                               color: @(selectedFilter == "personal" ? "white" : "var(--slate-600)") !important; 
                               border: 1px solid @(selectedFilter == "personal" ? "var(--primary-500)" : "var(--slate-200)") !important; 
                               padding: 0.5rem 0.75rem !important; 
                               border-radius: 8px !important; 
                               font-family: var(--font-family) !important; 
                               font-weight: 500 !important; 
                               font-size: 0.8rem !important; 
                               cursor: pointer !important; 
                               transition: all 0.3s ease !important;">
                    Pessoais
                </button>
                <button class="filter-btn @(selectedFilter == "corporate" ? "active" : "")" 
                        @onclick='() => SetFilter("corporate")' 
                        style="background: @(selectedFilter == "corporate" ? "var(--primary-500)" : "transparent") !important; 
                               color: @(selectedFilter == "corporate" ? "white" : "var(--slate-600)") !important; 
                               border: 1px solid @(selectedFilter == "corporate" ? "var(--primary-500)" : "var(--slate-200)") !important; 
                               padding: 0.5rem 0.75rem !important; 
                               border-radius: 8px !important; 
                               font-family: var(--font-family) !important; 
                               font-weight: 500 !important; 
                               font-size: 0.8rem !important; 
                               cursor: pointer !important; 
                               transition: all 0.3s ease !important;">
                    Corporativas
                </button>
            </div>

            <div class="notification-list">
                @if (filteredNotifications.Any())
                {
                    @foreach (var notification in filteredNotifications.Take(20))
                    {
                        <div class="notification-item @notification.PriorityClass @(notification.IsRead ? "read" : "unread")"
                             @onclick="() => HandleNotificationClick(notification)">
                            
                            <div class="notification-icon" style="color: @notification.TypeColor">
                                <i class="@notification.IconClass"></i>
                            </div>

                            <div class="notification-content">
                                <div class="notification-title">@notification.Title</div>
                                <div class="notification-message">@notification.Message</div>
                                <div class="notification-meta">
                                    <span class="notification-type">@GetTypeDisplayName(notification.Type)</span>
                                    <span class="notification-time">@notification.TimeAgo</span>
                                </div>
                            </div>

                            @if (!notification.IsRead)
                            {
                                <div class="unread-indicator"></div>
                            }

                            @if (notification.Priority == NotificationPriority.Critical)
                            {
                                <div class="priority-indicator critical">!</div>
                            }
                            else if (notification.Priority == NotificationPriority.High)
                            {
                                <div class="priority-indicator high">⚠</div>
                            }
                        </div>
                    }
                }
                else
                {
                    <div class="no-notifications" 
                         style="display: flex !important; 
                                flex-direction: column !important; 
                                align-items: center !important; 
                                justify-content: center !important; 
                                padding: 3rem 2rem !important; 
                                text-align: center !important; 
                                color: var(--slate-500) !important;">
                        <i class="fas fa-bell-slash" 
                           style="font-size: 2.5rem !important; 
                                  color: var(--slate-300) !important; 
                                  margin-bottom: 1rem !important;"></i>
                        <p style="font-family: var(--font-family) !important; 
                                  font-size: 1rem !important; 
                                  font-weight: 500 !important; 
                                  color: var(--slate-600) !important; 
                                  margin: 0 !important; 
                                  line-height: 1.5 !important;">
                            @GetEmptyMessage()
                        </p>
                    </div>
                }
            </div>

            <div class="notification-footer" 
                 style="padding: 1rem !important; 
                        background: var(--slate-50) !important; 
                        border-top: 1px solid var(--slate-100) !important;">
                <button class="btn-view-all" 
                        @onclick="ViewAllNotifications" 
                        style="width: 100% !important; 
                               background: linear-gradient(135deg, var(--primary-500) 0%, var(--primary-600) 100%) !important; 
                               color: white !important; 
                               border: none !important; 
                               padding: 0.75rem 1rem !important; 
                               border-radius: 8px !important; 
                               font-family: var(--font-family) !important; 
                               font-weight: 600 !important; 
                               font-size: 0.9rem !important; 
                               cursor: pointer !important; 
                               transition: all 0.3s ease !important;">
                    Ver todas as notificações
                </button>
            </div>
        </div>
    }
</div>

<!-- Toast Notifications -->
@if (showToastNotification && currentToastNotification != null)
{
    <div class="toast-notification @currentToastNotification.PriorityClass" 
         style="animation: slideInRight 0.3s ease-out;">
        <div class="toast-icon" style="color: @currentToastNotification.TypeColor">
            <i class="@currentToastNotification.IconClass"></i>
        </div>
        <div class="toast-content">
            <div class="toast-title">@currentToastNotification.Title</div>
            <div class="toast-message">@currentToastNotification.Message</div>
        </div>
        <button class="toast-close" @onclick="CloseToast">
            <i class="fas fa-times"></i>
        </button>
    </div>
}

@code {
    private bool isNotificationPanelOpen = false;
    private bool showToastNotification = false;
    private NotificationModel? currentToastNotification;
    private string selectedFilter = "all";
    private int unreadCount = 0;
    private List<NotificationModel> notifications = new();

    private int totalNotifications => notifications.Count;
    
    private List<NotificationModel> filteredNotifications => selectedFilter switch
    {
        "unread" => notifications.Where(n => !n.IsRead).ToList(),
        "personal" => notifications.Where(n => n.Type == NotificationType.Personal).ToList(),
        "corporate" => notifications.Where(n => n.Type == NotificationType.Corporate).ToList(),
        _ => notifications
    };

    protected override async Task OnInitializedAsync()
    {
        // Configurar eventos do serviço de notificações
        NotificationService.NotificationReceived += OnNotificationReceived;
        NotificationService.UnreadCountUpdated += OnUnreadCountUpdated;

        // Carregar notificações existentes
        notifications = NotificationService.RecentNotifications;
        unreadCount = NotificationService.UnreadCount;

        await Task.CompletedTask;
    }

    private async Task OnNotificationReceived(NotificationModel notification)
    {
        notifications.Insert(0, notification);
        
        // Manter apenas as 50 mais recentes
        if (notifications.Count > 50)
        {
            notifications.RemoveRange(50, notifications.Count - 50);
        }

        // Mostrar toast para notificações de alta prioridade
        if (notification.Priority >= NotificationPriority.High)
        {
            await ShowToast(notification);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnUnreadCountUpdated(int count)
    {
        unreadCount = count;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowToast(NotificationModel notification)
    {
        currentToastNotification = notification;
        showToastNotification = true;
        StateHasChanged();

        // Auto-hide após 5 segundos
        await Task.Delay(5000);
        if (currentToastNotification?.Id == notification.Id)
        {
            await CloseToast();
        }
    }

    private async Task CloseToast()
    {
        showToastNotification = false;
        currentToastNotification = null;
        await InvokeAsync(StateHasChanged);
    }

    private void ToggleNotifications()
    {
        isNotificationPanelOpen = !isNotificationPanelOpen;
    }

    private void CloseNotifications()
    {
        isNotificationPanelOpen = false;
    }

    private void SetFilter(string filter)
    {
        selectedFilter = filter;
    }

    private async Task HandleNotificationClick(NotificationModel notification)
    {
        if (!notification.IsRead)
        {
            await NotificationService.MarkAsReadAsync(notification.Id);
        }

        // Navegar para URL se disponível
        if (!string.IsNullOrEmpty(notification.ActionUrl))
        {
            await JS.InvokeVoidAsync("open", notification.ActionUrl, "_blank");
        }

        CloseNotifications();
    }

    private async Task MarkAllAsRead()
    {
        var unreadNotifications = notifications.Where(n => !n.IsRead).ToList();
        
        foreach (var notification in unreadNotifications)
        {
            await NotificationService.MarkAsReadAsync(notification.Id);
        }
    }

    private void ViewAllNotifications()
    {
        // Navegar para página de todas as notificações
        CloseNotifications();
        // Implementar navegação
    }

    private string GetTypeDisplayName(NotificationType type)
    {
        return type switch
        {
            NotificationType.Personal => "Pessoal",
            NotificationType.Department => "Departamento",
            NotificationType.Corporate => "Corporativa",
            NotificationType.Role => "Função",
            NotificationType.Topic => "Tópico",
            _ => "Geral"
        };
    }

    private string GetEmptyMessage()
    {
        return selectedFilter switch
        {
            "unread" => "Nenhuma notificação não lida",
            "personal" => "Nenhuma notificação pessoal",
            "corporate" => "Nenhuma notificação corporativa",
            _ => "Nenhuma notificação disponível"
        };
    }

    public void Dispose()
    {
        NotificationService.NotificationReceived -= OnNotificationReceived;
        NotificationService.UnreadCountUpdated -= OnUnreadCountUpdated;
    }
}