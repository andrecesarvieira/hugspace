@using SynQcore.BlazorApp.Services
@using SynQcore.BlazorApp.Client.Shared.Components
@using SynQcore.BlazorApp.Client.Models
@inject IApiService ApiService
@inject IAuthService AuthService
@rendermode InteractiveServer

<div class="api-test-panel">
    <div class="synq-card">
        <div class="synq-card-header">
            <h4>üåê Teste de Comunica√ß√£o API</h4>
            <SynQBadge Variant="@GetConnectionBadge()" Text="@GetConnectionText()" />
        </div>

        <div class="synq-card-content">
            <!-- Se√ß√£o de Autentica√ß√£o -->
            <div class="test-section">
                <h5>üîê Autentica√ß√£o</h5>
                <div class="test-controls">
                    <SynQButton
                        Text="Login Demo"
                        OnClick="TestLogin"
                        Variant="SynQButtonVariant.Primary"
                        Size="SynQButtonSize.Small"
                        IsLoading="isAuthLoading" />

                    <SynQButton
                        Text="Logout"
                        OnClick="TestLogout"
                        Variant="SynQButtonVariant.Secondary"
                        Size="SynQButtonSize.Small" />

                    <SynQButton
                        Text="Validar Token"
                        OnClick="TestValidateToken"
                        Variant="SynQButtonVariant.Outline"
                        Size="SynQButtonSize.Small"
                        IsLoading="isValidating" />
                </div>
            </div>

            <!-- Se√ß√£o de Requisi√ß√µes -->
            <div class="test-section">
                <h5>üì° Requisi√ß√µes HTTP</h5>
                <div class="test-controls">
                    <SynQButton
                        Text="GET Health"
                        OnClick="TestHealthCheck"
                        Variant="SynQButtonVariant.Primary"
                        Size="SynQButtonSize.Small"
                        IsLoading="isHealthLoading" />

                    <SynQButton
                        Text="GET Funcion√°rios"
                        OnClick="TestGetEmployees"
                        Variant="SynQButtonVariant.Primary"
                        Size="SynQButtonSize.Small"
                        IsLoading="isEmployeesLoading" />

                    <SynQButton
                        Text="POST Teste"
                        OnClick="TestPost"
                        Variant="SynQButtonVariant.Secondary"
                        Size="SynQButtonSize.Small"
                        IsLoading="isPostLoading" />
                </div>
            </div>

            <!-- Resultados dos Testes -->
            <div class="test-section">
                <h5>üìã Resultados</h5>
                <div class="test-results">
                    @if (testResults.Any())
                    {
                        @foreach (var result in testResults.TakeLast(5))
                        {
                            <div class="test-result @GetResultClass(result.Success)">
                                <div class="result-header">
                                    <strong>@result.Operation</strong>
                                    <span class="result-time">@result.Timestamp.ToString("HH:mm:ss")</span>
                                </div>
                                <div class="result-content">
                                    @if (result.Success)
                                    {
                                        <span class="success">‚úÖ @result.Message</span>
                                    }
                                    else
                                    {
                                        <span class="error">‚ùå @result.Message</span>
                                    }
                                </div>
                                @if (!string.IsNullOrEmpty(result.Data))
                                {
                                    <div class="result-data">
                                        <small>Resposta: @result.Data</small>
                                    </div>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <p class="no-results">Nenhum teste executado ainda.</p>
                    }
                </div>
            </div>

            <!-- Configura√ß√µes -->
            <div class="test-section">
                <h5>‚öôÔ∏è Configura√ß√µes</h5>
                <div class="config-info">
                    <small>
                        <strong>URL Base:</strong> http://localhost:5000/<br />
                        <strong>Timeout:</strong> 30 segundos<br />
                        <strong>Headers:</strong> Accept: application/json, Authorization: Bearer
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .api-test-panel {
        margin: 2rem 0;
    }

    .test-section {
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid var(--synq-color-border);
    }

    .test-section:last-child {
        border-bottom: none;
    }

    .test-controls {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
        margin-top: 0.5rem;
    }

    .test-results {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid var(--synq-color-border);
        border-radius: var(--synq-border-radius);
        padding: 1rem;
        background: var(--synq-color-surface);
    }

    .test-result {
        margin-bottom: 0.75rem;
        padding: 0.75rem;
        border-radius: var(--synq-border-radius);
        border-left: 3px solid;
    }

    .test-result.success {
        border-left-color: var(--synq-color-success);
        background: var(--synq-color-success-light);
    }

    .test-result.error {
        border-left-color: var(--synq-color-error);
        background: var(--synq-color-error-light);
    }

    .result-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.875rem;
        margin-bottom: 0.25rem;
    }

    .result-time {
        color: var(--synq-color-text-secondary);
        font-size: 0.75rem;
    }

    .result-content {
        font-size: 0.875rem;
    }

    .result-data {
        margin-top: 0.5rem;
        padding: 0.5rem;
        background: rgba(0, 0, 0, 0.05);
        border-radius: 4px;
        font-family: monospace;
        font-size: 0.75rem;
        color: var(--synq-color-text-secondary);
    }

    .no-results {
        text-align: center;
        color: var(--synq-color-text-secondary);
        font-style: italic;
    }

    .config-info {
        padding: 0.75rem;
        background: var(--synq-color-surface);
        border-radius: var(--synq-border-radius);
        color: var(--synq-color-text-secondary);
    }

    .success { color: var(--synq-color-success); }
    .error { color: var(--synq-color-error); }
</style>

@code {
    private bool isAuthLoading = false;
    private bool isValidating = false;
    private bool isHealthLoading = false;
    private bool isEmployeesLoading = false;
    private bool isPostLoading = false;

    private List<TestResult> testResults = new();

    private record TestResult(
        string Operation,
        bool Success,
        string Message,
        string? Data,
        DateTime Timestamp
    );

    /// <summary>
    /// Testa login demo
    /// </summary>
    private async Task TestLogin()
    {
        isAuthLoading = true;
        try
        {
            var success = await ((AuthService)AuthService).LoginDemoAsync();
            AddTestResult("Login Demo", success,
                success ? "Login realizado com sucesso" : "Falha no login",
                success ? "Token gerado" : null);
        }
        catch (Exception ex)
        {
            AddTestResult("Login Demo", false, $"Erro: {ex.Message}", null);
        }
        finally
        {
            isAuthLoading = false;
        }
    }

    /// <summary>
    /// Testa logout
    /// </summary>
    private async Task TestLogout()
    {
        try
        {
            await AuthService.LogoutAsync();
            AddTestResult("Logout", true, "Logout realizado com sucesso", null);
        }
        catch (Exception ex)
        {
            AddTestResult("Logout", false, $"Erro: {ex.Message}", null);
        }
    }

    /// <summary>
    /// Testa valida√ß√£o de token
    /// </summary>
    private async Task TestValidateToken()
    {
        isValidating = true;
        try
        {
            var isValid = await AuthService.ValidateTokenAsync();
            AddTestResult("Validar Token", isValid,
                isValid ? "Token v√°lido" : "Token inv√°lido",
                null);
        }
        catch (Exception ex)
        {
            AddTestResult("Validar Token", false, $"Erro: {ex.Message}", null);
        }
        finally
        {
            isValidating = false;
        }
    }

    /// <summary>
    /// Testa health check
    /// </summary>
    private async Task TestHealthCheck()
    {
        isHealthLoading = true;
        try
        {
            var response = await ApiService.GetAsync("health");
            var success = !string.IsNullOrEmpty(response);

            AddTestResult("GET Health", success,
                success ? "Servidor respondeu" : "Servidor n√£o respondeu",
                response?.Length > 100 ? response[..100] + "..." : response);
        }
        catch (Exception ex)
        {
            AddTestResult("GET Health", false, $"Erro: {ex.Message}", null);
        }
        finally
        {
            isHealthLoading = false;
        }
    }

    /// <summary>
    /// Testa requisi√ß√£o de funcion√°rios
    /// </summary>
    private async Task TestGetEmployees()
    {
        isEmployeesLoading = true;
        try
        {
            var response = await ApiService.GetAsync("api/funcionarios");
            var success = !string.IsNullOrEmpty(response);

            AddTestResult("GET Funcion√°rios", success,
                success ? "Dados recebidos" : "Nenhum dado recebido",
                response?.Length > 100 ? response[..100] + "..." : response);
        }
        catch (Exception ex)
        {
            AddTestResult("GET Funcion√°rios", false, $"Erro: {ex.Message}", null);
        }
        finally
        {
            isEmployeesLoading = false;
        }
    }

    /// <summary>
    /// Testa requisi√ß√£o POST
    /// </summary>
    private async Task TestPost()
    {
        isPostLoading = true;
        try
        {
            var testData = new { message = "Teste POST do Blazor", timestamp = DateTime.Now };
            var success = await ApiService.PostAsync("api/test", testData);

            AddTestResult("POST Teste", success,
                success ? "Dados enviados com sucesso" : "Falha ao enviar dados",
                $"Payload: {System.Text.Json.JsonSerializer.Serialize(testData)}");
        }
        catch (Exception ex)
        {
            AddTestResult("POST Teste", false, $"Erro: {ex.Message}", null);
        }
        finally
        {
            isPostLoading = false;
        }
    }

    /// <summary>
    /// Adiciona resultado de teste
    /// </summary>
    private void AddTestResult(string operation, bool success, string message, string? data)
    {
        testResults.Add(new TestResult(operation, success, message, data, DateTime.Now));
        StateHasChanged();
    }

    /// <summary>
    /// Obt√©m a classe CSS para o resultado
    /// </summary>
    private string GetResultClass(bool success) => success ? "success" : "error";

    /// <summary>
    /// Obt√©m a variante do badge de conex√£o
    /// </summary>
    private SynQBadgeVariant GetConnectionBadge() => SynQBadgeVariant.Info;

    /// <summary>
    /// Obt√©m o texto do status de conex√£o
    /// </summary>
    private string GetConnectionText() => "Pronto para teste";
}
