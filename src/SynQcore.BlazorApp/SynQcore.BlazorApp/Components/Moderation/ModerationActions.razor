@using SynQcore.BlazorApp.Services
@using SynQcore.BlazorApp.Models.Moderation
@inject IModerationService ModerationService
@inject IJSRuntime JSRuntime

<div class="moderation-actions">
    <div class="actions-header">
        <h3>
            <i class="fas fa-bolt"></i>
            Ações Rápidas de Moderação
        </h3>
        <div class="actions-toggle">
            <button @onclick="ToggleAdvancedMode" class="btn-toggle @(isAdvancedMode ? "active" : "")">
                <i class="fas fa-cog"></i>
                @(isAdvancedMode ? "Modo Básico" : "Modo Avançado")
            </button>
        </div>
    </div>

    <div class="actions-content">
        <!-- Ações Básicas -->
        <div class="basic-actions">
            <div class="action-group">
                <h4>
                    <i class="fas fa-check-double"></i>
                    Aprovação em Lote
                </h4>
                <div class="action-controls">
                    <div class="input-group">
                        <label for="bulkApproveIds">IDs dos itens (separados por vírgula):</label>
                        <input type="text" id="bulkApproveIds" @bind="bulkApproveIds" placeholder="1, 2, 3, 4..."
                            class="form-control">
                    </div>
                    <button @onclick="BulkApprove" class="btn-action approve"
                        disabled="@(isProcessing || string.IsNullOrWhiteSpace(bulkApproveIds))">
                        @if (isProcessing)
                        {
                            <div class="spinner-small"></div>
                        }
                        else
                        {
                            <i class="fas fa-check"></i>
                        }
                        Aprovar Selecionados
                    </button>
                </div>
            </div>

            <div class="action-group">
                <h4>
                    <i class="fas fa-times-circle"></i>
                    Rejeição em Lote
                </h4>
                <div class="action-controls">
                    <div class="input-group">
                        <label for="bulkRejectIds">IDs dos itens (separados por vírgula):</label>
                        <input type="text" id="bulkRejectIds" @bind="bulkRejectIds" placeholder="1, 2, 3, 4..."
                            class="form-control">
                    </div>
                    <div class="input-group">
                        <label for="bulkRejectReason">Motivo da rejeição:</label>
                        <textarea id="bulkRejectReason" @bind="bulkRejectReason"
                            placeholder="Informe o motivo da rejeição..." class="form-control" rows="2"></textarea>
                    </div>
                    <button @onclick="BulkReject" class="btn-action reject"
                        disabled="@(isProcessing || string.IsNullOrWhiteSpace(bulkRejectIds) || string.IsNullOrWhiteSpace(bulkRejectReason))">
                        @if (isProcessing)
                        {
                            <div class="spinner-small"></div>
                        }
                        else
                        {
                            <i class="fas fa-times"></i>
                        }
                        Rejeitar Selecionados
                    </button>
                </div>
            </div>
        </div>

        @if (isAdvancedMode)
        {
            <!-- Ações Avançadas -->
            <div class="advanced-actions">
                <div class="action-group">
                    <h4>
                        <i class="fas fa-filter"></i>
                        Filtros Automáticos
                    </h4>
                    <div class="filter-section">
                        <div class="filter-type">
                            <h5>Palavras de Auto-Aprovação</h5>
                            <div class="keyword-manager">
                                <div class="input-group">
                                    <input type="text" @bind="newApproveKeyword" placeholder="Nova palavra-chave..."
                                        class="form-control"
                                        @onkeypress="@(async (e) => { if (e.Key == "Enter") await AddApproveKeyword(); })">
                                    <button @onclick="AddApproveKeyword" class="btn-add"
                                        disabled="@string.IsNullOrWhiteSpace(newApproveKeyword)">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                </div>
                                <div class="keywords-list">
                                    @foreach (var keyword in approveKeywords)
                                    {
                                        <span class="keyword-tag approve">
                                            @keyword
                                            <button @onclick="() => RemoveApproveKeyword(keyword)" class="btn-remove">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </span>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="filter-type">
                            <h5>Palavras de Auto-Rejeição</h5>
                            <div class="keyword-manager">
                                <div class="input-group">
                                    <input type="text" @bind="newRejectKeyword" placeholder="Nova palavra-chave..."
                                        class="form-control"
                                        @onkeypress="@(async (e) => { if (e.Key == "Enter") await AddRejectKeyword(); })">
                                    <button @onclick="AddRejectKeyword" class="btn-add"
                                        disabled="@string.IsNullOrWhiteSpace(newRejectKeyword)">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                </div>
                                <div class="keywords-list">
                                    @foreach (var keyword in rejectKeywords)
                                    {
                                        <span class="keyword-tag reject">
                                            @keyword
                                            <button @onclick="() => RemoveRejectKeyword(keyword)" class="btn-remove">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </span>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="filter-actions">
                            <button @onclick="SaveFilters" class="btn-action primary" disabled="@isProcessing">
                                <i class="fas fa-save"></i>
                                Salvar Filtros
                            </button>
                            <button @onclick="ResetFilters" class="btn-action secondary" disabled="@isProcessing">
                                <i class="fas fa-undo"></i>
                                Redefinir
                            </button>
                        </div>
                    </div>
                </div>

                <div class="action-group">
                    <h4>
                        <i class="fas fa-file-alt"></i>
                        Relatórios
                    </h4>
                    <div class="report-section">
                        <div class="date-range">
                            <div class="input-group">
                                <label for="reportStartDate">Data inicial:</label>
                                <input type="date" id="reportStartDate" @bind="reportStartDate" class="form-control">
                            </div>
                            <div class="input-group">
                                <label for="reportEndDate">Data final:</label>
                                <input type="date" id="reportEndDate" @bind="reportEndDate" class="form-control">
                            </div>
                        </div>
                        <button @onclick="GenerateReport" class="btn-action info"
                            disabled="@(isProcessing || !reportStartDate.HasValue || !reportEndDate.HasValue)">
                            @if (isProcessing)
                            {
                                <div class="spinner-small"></div>
                            }
                            else
                            {
                                <i class="fas fa-download"></i>
                            }
                            Gerar Relatório
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Status Messages -->
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="status-message @statusMessageType">
            <i class="fas @GetStatusIcon()"></i>
            @statusMessage
            <button @onclick="ClearStatus" class="btn-close">
                <i class="fas fa-times"></i>
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback<string> OnActionCompleted { get; set; }
    [Parameter] public EventCallback<string> OnSuccessAction { get; set; }
    [Parameter] public EventCallback<string> OnErrorAction { get; set; }
    [Parameter] public EventCallback<string> OnInfoAction { get; set; }

    private bool isAdvancedMode = false;
    private bool isProcessing = false;

    // Bulk operations
    private string bulkApproveIds = "";
    private string bulkRejectIds = "";
    private string bulkRejectReason = "";

    // Filters
    private string newApproveKeyword = "";
    private string newRejectKeyword = "";
    private List<string> approveKeywords = new();
    private List<string> rejectKeywords = new();

    // Reports
    private DateTime? reportStartDate = DateTime.Now.AddDays(-7);
    private DateTime? reportEndDate = DateTime.Now;

    // Status
    private string statusMessage = "";
    private string statusMessageType = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadConfiguration();
    }

    private async Task LoadConfiguration()
    {
        try
        {
            var config = await ModerationService.GetModerationConfigAsync();
            if (config != null)
            {
                approveKeywords = config.AutoApproveKeywords ?? new List<string>();
                rejectKeywords = config.AutoRejectKeywords ?? new List<string>();
            }
        }
        catch (Exception ex)
        {
            ShowStatus($"Erro ao carregar configuração: {ex.Message}", "error");
        }
    }

    private void ToggleAdvancedMode()
    {
        isAdvancedMode = !isAdvancedMode;
    }

    private async Task BulkApprove()
    {
        if (string.IsNullOrWhiteSpace(bulkApproveIds))
            return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var ids = ParseIds(bulkApproveIds);
            if (ids.Length == 0)
            {
                ShowStatus("IDs inválidos fornecidos", "error");
                return;
            }

            var success = await ModerationService.BulkApproveAsync(ids);

            if (success)
            {
                ShowStatus($"{ids.Length} itens aprovados com sucesso", "success");
                await OnSuccessAction.InvokeAsync($"{ids.Length} itens aprovados com sucesso!");
                bulkApproveIds = "";
                await OnActionCompleted.InvokeAsync("bulk_approve");
            }
            else
            {
                ShowStatus("Erro ao aprovar itens em lote", "error");
                await OnErrorAction.InvokeAsync("Erro ao aprovar itens em lote");
            }
        }
        catch (Exception ex)
        {
            ShowStatus($"Erro: {ex.Message}", "error");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task BulkReject()
    {
        if (string.IsNullOrWhiteSpace(bulkRejectIds) || string.IsNullOrWhiteSpace(bulkRejectReason))
            return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var ids = ParseIds(bulkRejectIds);
            if (ids.Length == 0)
            {
                ShowStatus("IDs inválidos fornecidos", "error");
                return;
            }

            var success = await ModerationService.BulkRejectAsync(ids, bulkRejectReason);

            if (success)
            {
                ShowStatus($"{ids.Length} itens rejeitados com sucesso", "success");
                await OnSuccessAction.InvokeAsync($"{ids.Length} itens rejeitados com motivo: {bulkRejectReason}");
                bulkRejectIds = "";
                bulkRejectReason = "";
                await OnActionCompleted.InvokeAsync("bulk_reject");
            }
            else
            {
                ShowStatus("Erro ao rejeitar itens em lote", "error");
                await OnErrorAction.InvokeAsync("Erro ao rejeitar itens em lote");
            }
        }
        catch (Exception ex)
        {
            ShowStatus($"Erro: {ex.Message}", "error");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private Task AddApproveKeyword()
    {
        if (string.IsNullOrWhiteSpace(newApproveKeyword) || approveKeywords.Contains(newApproveKeyword))
            return Task.CompletedTask;

        approveKeywords.Add(newApproveKeyword);
        newApproveKeyword = "";
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void RemoveApproveKeyword(string keyword)
    {
        approveKeywords.Remove(keyword);
        StateHasChanged();
    }

    private Task AddRejectKeyword()
    {
        if (string.IsNullOrWhiteSpace(newRejectKeyword) || rejectKeywords.Contains(newRejectKeyword))
            return Task.CompletedTask;

        rejectKeywords.Add(newRejectKeyword);
        newRejectKeyword = "";
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void RemoveRejectKeyword(string keyword)
    {
        rejectKeywords.Remove(keyword);
        StateHasChanged();
    }

    private async Task SaveFilters()
    {
        try
        {
            isProcessing = true;
            StateHasChanged();

            var config = new ModerationConfigDto
            {
                AutoApproveKeywords = approveKeywords,
                AutoRejectKeywords = rejectKeywords,
                AutoApproveEnabled = approveKeywords.Any(),
                MaxProcessingTimeHours = 24,
                RequireDoubleApproval = false,
                SensitiveContentTypes = new List<string> { "Media", "External Link" },
                NotificationSettings = new Dictionary<string, object>()
            };

            var success = await ModerationService.UpdateModerationConfigAsync(config);

            if (success)
            {
                ShowStatus("Filtros salvos com sucesso", "success");
                await OnSuccessAction.InvokeAsync("Configuração de filtros salva com sucesso!");
                await OnActionCompleted.InvokeAsync("filters_saved");
            }
            else
            {
                ShowStatus("Erro ao salvar filtros", "error");
                await OnErrorAction.InvokeAsync("Erro ao salvar configuração de filtros");
            }
        }
        catch (Exception ex)
        {
            ShowStatus($"Erro ao salvar filtros: {ex.Message}", "error");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ResetFilters()
    {
        approveKeywords.Clear();
        rejectKeywords.Clear();
        await LoadConfiguration();
        ShowStatus("Filtros redefinidos", "info");
    }

    private async Task GenerateReport()
    {
        if (!reportStartDate.HasValue || !reportEndDate.HasValue)
            return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var report = await ModerationService.GetModerationReportAsync(reportStartDate.Value, reportEndDate.Value);

            if (report != null)
            {
                // Simular download do relatório
                await JSRuntime.InvokeVoidAsync("console.log", $"Relatório gerado: {report.ReportId}");
                ShowStatus("Relatório gerado com sucesso", "success");
                await OnSuccessAction.InvokeAsync($"Relatório de moderação gerado com sucesso! ID: {report.ReportId}");
                await OnActionCompleted.InvokeAsync("report_generated");
            }
            else
            {
                ShowStatus("Erro ao gerar relatório", "error");
                await OnErrorAction.InvokeAsync("Erro ao gerar relatório de moderação");
            }
        }
        catch (Exception ex)
        {
            ShowStatus($"Erro ao gerar relatório: {ex.Message}", "error");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private int[] ParseIds(string idsString)
    {
        try
        {
            return idsString
            .Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(id => int.Parse(id.Trim()))
            .ToArray();
        }
        catch
        {
            return Array.Empty<int>();
        }
    }

    private void ShowStatus(string message, string type)
    {
        statusMessage = message;
        statusMessageType = type;
        StateHasChanged();

        // Auto-clear status after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ => ClearStatus());
    }

    private void ClearStatus()
    {
        statusMessage = "";
        statusMessageType = "";
        StateHasChanged();
    }

    private string GetStatusIcon()
    {
        return statusMessageType switch
        {
            "success" => "fa-check-circle",
            "error" => "fa-exclamation-triangle",
            "info" => "fa-info-circle",
            _ => "fa-bell"
        };
    }
}
