@page "/perfil"
@page "/perfil/{userId}"
@namespace SynQcore.BlazorApp.Components.Pages
@using SynQcore.BlazorApp.Components.Social
@using SynQcore.BlazorApp.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveServer
@inject IPostService PostService

<PageTitle>SynQcore - Perfil</PageTitle>

<div class="profile-container">
    <!-- Header -->
    <div class="profile-header">
        <div class="header-content">
            <div class="logo-section">
                <h1>SynQcore</h1>
            </div>
            <div class="nav-section">
                <a href="/feed" class="nav-link">Feed</a>
                <a href="/perfil" class="nav-link active">Perfil</a>
                <a href="/mensagens" class="nav-link">Mensagens</a>
            </div>
        </div>
    </div>

    <!-- Profile Content -->
    <div class="main-content">
        <!-- Profile Info -->
        <div class="profile-info">
            <div class="profile-cover">
                <div class="cover-image"></div>
                <div class="profile-picture">
                    <img src="@currentUser.Avatar" alt="@currentUser.Name" class="avatar-large" />
                </div>
            </div>

            <div class="profile-details">
                <div class="user-info">
                    <h2 class="user-name">@currentUser.Name</h2>
                    <p class="user-role">@currentUser.Role</p>
                    <p class="user-department">@currentUser.Department</p>
                    <p class="user-bio">@currentUser.Bio</p>
                </div>

                <div class="profile-stats">
                    <div class="stat-item">
                        <span class="stat-number">@userStats.PostCount</span>
                        <span class="stat-label">Posts</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@userStats.FollowersCount</span>
                        <span class="stat-label">Seguidores</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@userStats.FollowingCount</span>
                        <span class="stat-label">Seguindo</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@userStats.LikesReceived</span>
                        <span class="stat-label">Curtidas</span>
                    </div>
                </div>

                @if (!isOwnProfile)
                {
                    <div class="profile-actions">
                        <button class="follow-btn @(isFollowing ? "following" : "")" @onclick="ToggleFollow">
                            @(isFollowing ? "Seguindo" : "Seguir")
                        </button>
                        <button class="message-btn" @onclick="SendMessage">
                            <i class="fas fa-comment"></i> Mensagem
                        </button>
                    </div>
                }
                else
                {
                    <div class="profile-actions">
                        <button class="edit-btn" @onclick="EditProfile">
                            <i class="fas fa-edit"></i> Editar Perfil
                        </button>
                    </div>
                }
            </div>
        </div>

        <!-- Profile Feed -->
        <div class="profile-feed">
            <div class="feed-tabs">
                <button class="tab-btn @(activeTab == "posts" ? "active" : "")" @onclick='() => SetActiveTab("posts")'>
                    Posts
                </button>
                <button class="tab-btn @(activeTab == "liked" ? "active" : "")" @onclick='() => SetActiveTab("liked")'>
                    Curtidos
                </button>
                <button class="tab-btn @(activeTab == "media" ? "active" : "")" @onclick='() => SetActiveTab("media")'>
                    M√≠dia
                </button>
            </div>

            <div class="feed-content">
                @if (isLoading)
                {
                    <div class="loading">
                        <p>Carregando...</p>
                    </div>
                }
                else if (userPosts.Any())
                {
                    @foreach (var post in userPosts)
                    {
                        <SimplePostCard Post="post" />
                    }
                }
                else
                {
                    <div class="no-content">
                        <p>@GetEmptyMessage()</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? UserId { get; set; }

    private UserProfile currentUser = new();
    private UserStats userStats = new();
    private List<SimplePostCard.PostModel> userPosts = new();
    private bool isLoading = true;
    private bool isOwnProfile = true;
    private bool isFollowing = false;
    private string activeTab = "posts";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
        await LoadUserPosts();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            isOwnProfile = false; // Se tem UserId na URL, n√£o √© o pr√≥prio perfil
            await LoadUserProfile();
            await LoadUserPosts();
        }
    }

    private Task LoadUserProfile()
    {
        isLoading = true;
        try
        {
            // Por enquanto, dados mockados
            // Futuramente conectar com API de usu√°rios
            currentUser = new UserProfile
            {
                Id = UserId ?? "current-user",
                Name = isOwnProfile ? "Admin" : "Jo√£o Silva",
                Role = isOwnProfile ? "Administrador" : "Desenvolvedor Senior",
                Department = isOwnProfile ? "TI" : "Desenvolvimento",
                Bio = isOwnProfile ?
                    "Administrador do sistema, apaixonado por tecnologia e inova√ß√£o." :
                    "Desenvolvedor experiente com foco em solu√ß√µes corporativas.",
                Avatar = "/images/default-avatar.png",
                CoverImage = "/images/default-cover.jpg"
            };

            userStats = new UserStats
            {
                PostCount = isOwnProfile ? 15 : 23,
                FollowersCount = isOwnProfile ? 45 : 67,
                FollowingCount = isOwnProfile ? 32 : 41,
                LikesReceived = isOwnProfile ? 128 : 156
            };

            // Simula status de seguir para perfis que n√£o s√£o pr√≥prios
            if (!isOwnProfile)
            {
                isFollowing = false; // Poderia vir da API
            }
        }
        finally
        {
            isLoading = false;
        }

        return Task.CompletedTask;
    }

    private async Task LoadUserPosts()
    {
        try
        {
            // Por enquanto, usar dados mockados filtrados por usu√°rio
            // Futuramente conectar com API para buscar posts do usu√°rio espec√≠fico
            var allPosts = await PostService.GetFeedPostsAsync();

            if (activeTab == "posts")
            {
                userPosts = allPosts.Where(p =>
                    (isOwnProfile && p.AuthorName == "Admin") ||
                    (!isOwnProfile && p.AuthorName == currentUser.Name)
                ).ToList();
            }
            else if (activeTab == "liked")
            {
                userPosts = allPosts.Where(p => p.IsLiked).ToList();
            }
            else if (activeTab == "media")
            {
                userPosts = allPosts.Where(p => p.Content.Contains("üñºÔ∏è") || p.Content.Contains("üì∑")).ToList();
            }
        }
        catch (Exception)
        {
            // Log error e mant√©m lista vazia
            userPosts = new List<SimplePostCard.PostModel>();
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task SetActiveTab(string tab)
    {
        activeTab = tab;
        await LoadUserPosts();
    }

    private async Task ToggleFollow()
    {
        isFollowing = !isFollowing;
        userStats.FollowersCount += isFollowing ? 1 : -1;
        await InvokeAsync(StateHasChanged);

        // Futuramente conectar com API para seguir/deixar de seguir
    }

    private async Task SendMessage()
    {
        // Futuramente navegar para p√°gina de mensagens ou abrir modal de chat
        await Task.CompletedTask;
    }

    private async Task EditProfile()
    {
        // Futuramente abrir modal de edi√ß√£o de perfil
        await Task.CompletedTask;
    }

    private string GetEmptyMessage()
    {
        return activeTab switch
        {
            "posts" => isOwnProfile ? "Voc√™ ainda n√£o fez nenhum post." : "Este usu√°rio ainda n√£o fez nenhum post.",
            "liked" => "Nenhum post curtido ainda.",
            "media" => "Nenhuma m√≠dia compartilhada ainda.",
            _ => "Nenhum conte√∫do encontrado."
        };
    }

    public class UserProfile
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string Role { get; set; } = "";
        public string Department { get; set; } = "";
        public string Bio { get; set; } = "";
        public string Avatar { get; set; } = "";
        public string CoverImage { get; set; } = "";
    }

    public class UserStats
    {
        public int PostCount { get; set; }
        public int FollowersCount { get; set; }
        public int FollowingCount { get; set; }
        public int LikesReceived { get; set; }
    }
}

<style>
    .profile-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .profile-header {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        padding: 1rem 0;
        position: sticky;
        top: 0;
        z-index: 100;
    }

    .header-content {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0 1rem;
    }

    .logo-section h1 {
        color: #667eea;
        margin: 0;
        font-size: 1.8rem;
        font-weight: 700;
    }

    .nav-section {
        display: flex;
        gap: 2rem;
    }

    .nav-link {
        text-decoration: none;
        color: #666;
        font-weight: 500;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        transition: all 0.3s ease;
    }

    .nav-link:hover,
    .nav-link.active {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
    }

    .main-content {
        max-width: 900px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    .profile-info {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        overflow: hidden;
        margin-bottom: 2rem;
    }

    .profile-cover {
        position: relative;
        height: 200px;
    }

    .cover-image {
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .profile-picture {
        position: absolute;
        bottom: -50px;
        left: 2rem;
        border: 5px solid white;
        border-radius: 50%;
        background: white;
    }

    .avatar-large {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
    }

    .profile-details {
        padding: 4rem 2rem 2rem 2rem;
    }

    .user-info {
        margin-bottom: 2rem;
    }

    .user-name {
        font-size: 2rem;
        font-weight: 700;
        color: #2d3748;
        margin: 0 0 0.5rem 0;
    }

    .user-role {
        font-size: 1.2rem;
        color: #667eea;
        font-weight: 600;
        margin: 0 0 0.25rem 0;
    }

    .user-department {
        color: #718096;
        margin: 0 0 1rem 0;
    }

    .user-bio {
        color: #4a5568;
        line-height: 1.6;
        margin: 0;
    }

    .profile-stats {
        display: flex;
        gap: 2rem;
        margin-bottom: 2rem;
    }

    .stat-item {
        text-align: center;
    }

    .stat-number {
        display: block;
        font-size: 1.5rem;
        font-weight: 700;
        color: #2d3748;
    }

    .stat-label {
        color: #718096;
        font-size: 0.875rem;
    }

    .profile-actions {
        display: flex;
        gap: 1rem;
    }

    .follow-btn, .message-btn, .edit-btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .follow-btn {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
    }

    .follow-btn.following {
        background: #e2e8f0;
        color: #4a5568;
    }

    .message-btn, .edit-btn {
        background: transparent;
        border: 2px solid #667eea;
        color: #667eea;
    }

    .message-btn:hover, .edit-btn:hover {
        background: #667eea;
        color: white;
    }

    .profile-feed {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        overflow: hidden;
    }

    .feed-tabs {
        display: flex;
        border-bottom: 1px solid #e2e8f0;
    }

    .tab-btn {
        flex: 1;
        padding: 1rem;
        border: none;
        background: transparent;
        color: #718096;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .tab-btn.active {
        color: #667eea;
        border-bottom: 3px solid #667eea;
    }

    .feed-content {
        padding: 1.5rem;
    }

    .loading, .no-content {
        text-align: center;
        padding: 3rem;
        color: #718096;
    }

    @@media (max-width: 768px) {
        .profile-stats {
            justify-content: center;
        }

        .profile-actions {
            justify-content: center;
        }

        .profile-details {
            text-align: center;
        }

        .profile-picture {
            left: 50%;
            transform: translateX(-50%);
        }
    }
</style>
