@*
 * SynQcore - Corporate Social Network
 *
 * Página de Criação de Artigos de Conhecimento
 * Interface para criar e editar posts da base de conhecimento
 *
 * Author: André César Vieira <andrecesarvieira@hotmail.com>
*@

@page "/knowledge/create"
@page "/knowledge/edit/{PostId:guid}"
@using SynQcore.Domain.Entities.Communication
@using SynQcore.BlazorApp.Services
@using SynQcore.BlazorApp.Models
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@inject IKnowledgeService KnowledgeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<HeadContent>
    <title>@(IsEditing ? "Editar Artigo" : "Novo Artigo") - SynQcore</title>
</HeadContent>

<div class="knowledge-create-container">
    <!-- Header -->
    <div class="header-section">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="page-title">
                    <i class="bi @(IsEditing ? "bi-pencil-fill" : "bi-plus-circle-fill") text-primary"></i>
                    @(IsEditing ? "Editar Artigo" : "Novo Artigo")
                </h2>
                <p class="text-muted mb-0">
                    @(IsEditing ? "Atualize as informações do artigo" : "Compartilhe conhecimento com sua equipe")
                </p>
            </div>

            <div class="d-flex gap-2">
                <button class="btn btn-outline-secondary" @onclick="GoBack">
                    <i class="bi bi-arrow-left"></i>
                    Voltar
                </button>
                <button class="btn btn-outline-primary" @onclick="SaveAsDraft" disabled="@isLoading">
                    <i class="bi bi-save"></i>
                    Salvar Rascunho
                </button>
                <button class="btn btn-primary" @onclick="SubmitPost" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    <i class="bi bi-check-lg"></i>
                    @(IsEditing ? "Atualizar" : "Publicar")
                </button>
            </div>
        </div>
    </div>

    <!-- Formulário -->
    <div class="form-container">
        <EditForm Model="createRequest" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="row">
                <!-- Coluna Principal -->
                <div class="col-lg-8">
                    <!-- Informações Básicas -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-info-circle text-primary"></i>
                                Informações Básicas
                            </h5>
                        </div>
                        <div class="card-body">
                            <!-- Título -->
                            <div class="mb-3">
                                <label class="form-label required">Título</label>
                                <InputText class="form-control"
                                          @bind-Value="createRequest.Title"
                                          placeholder="Digite um título claro e descritivo..." />
                                <ValidationMessage For="@(() => createRequest.Title)" class="invalid-feedback" />
                                <div class="form-text">Um bom título ajuda outros funcionários a encontrar o conteúdo</div>
                            </div>

                            <!-- Resumo -->
                            <div class="mb-3">
                                <label class="form-label">Resumo</label>
                                <InputTextArea class="form-control" @bind-Value="createRequest.Summary"
                                              rows="3" placeholder="Breve descrição do que este artigo aborda..." />
                                <div class="form-text">Resumo opcional que aparecerá na listagem de artigos</div>
                            </div>

                            <!-- Tipo e Status -->
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="form-label required">Tipo de Conteúdo</label>
                                    <InputSelect class="form-select"
                                                @bind-Value="createRequest.Type">
                                        <option value="">Selecione o tipo...</option>
                                        @foreach (var type in Enum.GetValues<PostType>())
                                        {
                                            <option value="@type">@GetPostTypeDisplay(type)</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => createRequest.Type)" class="invalid-feedback" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Status</label>
                                    <InputSelect class="form-select" @bind-Value="createRequest.Status">
                                        @foreach (var status in Enum.GetValues<PostStatus>())
                                        {
                                            <option value="@status">@GetPostStatusDisplay(status)</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Conteúdo -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-file-text text-primary"></i>
                                Conteúdo
                            </h5>
                        </div>
                        <div class="card-body">
                            <!-- Editor de Conteúdo -->
                            <div class="mb-3">
                                <label class="form-label required">Conteúdo do Artigo</label>
                                <div class="content-editor">
                                    <div class="editor-toolbar">
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => InsertMarkdown("**", "**"))" title="Negrito">
                                                <i class="bi bi-type-bold"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => InsertMarkdown("*", "*"))" title="Itálico">
                                                <i class="bi bi-type-italic"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => InsertMarkdown("`", "`"))" title="Código">
                                                <i class="bi bi-code"></i>
                                            </button>
                                        </div>
                                        <div class="btn-group btn-group-sm ms-2" role="group">
                                            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => InsertMarkdown("# ", ""))" title="Título">
                                                <i class="bi bi-type-h1"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => InsertMarkdown("## ", ""))" title="Subtítulo">
                                                <i class="bi bi-type-h2"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => InsertMarkdown("- ", ""))" title="Lista">
                                                <i class="bi bi-list-ul"></i>
                                            </button>
                                        </div>
                                        <div class="btn-group btn-group-sm ms-2" role="group">
                                            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => InsertMarkdown("[", "](url)"))" title="Link">
                                                <i class="bi bi-link"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => InsertMarkdown("![alt](", ")"))" title="Imagem">
                                                <i class="bi bi-image"></i>
                                            </button>
                                        </div>
                                        <div class="ms-auto">
                                            <button type="button" class="btn btn-outline-info btn-sm" @onclick="TogglePreview">
                                                <i class="bi bi-eye"></i>
                                                @(showPreview ? "Editor" : "Preview")
                                            </button>
                                        </div>
                                    </div>

                                    @if (showPreview)
                                    {
                                        <div class="content-preview">
                                            <div class="preview-content">
                                                @((MarkupString)ConvertMarkdownToHtml(createRequest.Content ?? ""))
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <InputTextArea class="form-control content-textarea"
                                                      @bind-Value="createRequest.Content"
                                                      @ref="contentTextArea"
                                                      rows="15"
                                                      placeholder="Digite o conteúdo do artigo usando Markdown...

Exemplos:
# Título Principal
## Subtítulo
**Texto em negrito**
*Texto em itálico*
- Item de lista
[Link](https://exemplo.com)
![Imagem](url-da-imagem)" />
                                    }

                                    <ValidationMessage For="@(() => createRequest.Content)" class="invalid-feedback" />
                                </div>
                                <div class="form-text">
                                    Use Markdown para formatar o conteúdo.
                                    <a href="#" @onclick="ShowMarkdownHelp" @onclick:preventDefault="true">Ver guia de formatação</a>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Tags -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-tags text-primary"></i>
                                Tags
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Tags</label>
                                <div class="tags-input-container">
                                    <div class="tags-display">
                                        @if (selectedTags?.Count > 0)
                                        {
                                            @foreach (var tag in selectedTags)
                                            {
                                                <span class="tag-item" style="background-color: @tag.Color;">
                                                    #@tag.Name
                                                    <button type="button" class="tag-remove" @onclick="() => RemoveTag(tag)">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </span>
                                            }
                                        }
                                    </div>
                                    <input type="text" class="form-control tags-input"
                                           @bind="newTagName"
                                           @onkeypress="HandleTagKeyPress"
                                           placeholder="Digite uma tag e pressione Enter..." />
                                </div>
                                <div class="form-text">Adicione tags para facilitar a busca e categorização</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Sidebar -->
                <div class="col-lg-4">
                    <!-- Configurações -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-gear text-primary"></i>
                                Configurações
                            </h6>
                        </div>
                        <div class="card-body">
                            <!-- Categoria -->
                            <div class="mb-3">
                                <label class="form-label">Categoria</label>
                                <InputSelect class="form-select" @bind-Value="createRequest.CategoryId">
                                    <option value="">Sem categoria</option>
                                    @if (categories != null)
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                            @if (category.SubCategories?.Count > 0)
                                            {
                                                @foreach (var subCategory in category.SubCategories)
                                                {
                                                    <option value="@subCategory.Id">└─ @subCategory.Name</option>
                                                }
                                            }
                                        }
                                    }
                                </InputSelect>
                            </div>

                            <!-- Visibilidade -->
                            <div class="mb-3">
                                <label class="form-label">Visibilidade</label>
                                <InputSelect class="form-select" @bind-Value="createRequest.Visibility">
                                    @foreach (var visibility in Enum.GetValues<PostVisibility>())
                                    {
                                        <option value="@visibility">@GetPostVisibilityDisplay(visibility)</option>
                                    }
                                </InputSelect>
                                <div class="form-text">Quem pode visualizar este artigo</div>
                            </div>

                            <!-- URL da Imagem -->
                            <div class="mb-3">
                                <label class="form-label">URL da Imagem</label>
                                <InputText class="form-control" @bind-Value="createRequest.ImageUrl"
                                          placeholder="https://exemplo.com/imagem.jpg" />
                                <div class="form-text">Imagem de capa para o artigo</div>
                            </div>

                            <!-- Preview da Imagem -->
                            @if (!string.IsNullOrEmpty(createRequest.ImageUrl))
                            {
                                <div class="mb-3">
                                    <div class="image-preview">
                                        <img src="@createRequest.ImageUrl" alt="Preview" class="img-fluid rounded"
                                             @onerror="HandleImageError" />
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Informações Adicionais (se editando) -->
                    @if (IsEditing && currentPost != null)
                    {
                        <div class="card mb-4">
                            <div class="card-header">
                                <h6 class="card-title mb-0">
                                    <i class="bi bi-info-circle text-primary"></i>
                                    Informações
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="info-item">
                                    <strong>Criado em:</strong>
                                    <span>@currentPost.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                                </div>
                                <div class="info-item">
                                    <strong>Autor:</strong>
                                    <span>@currentPost.AuthorName</span>
                                </div>
                                <div class="info-item">
                                    <strong>Versão:</strong>
                                    <span>v@currentPost.Version</span>
                                </div>
                                <div class="info-item">
                                    <strong>Visualizações:</strong>
                                    <span>@currentPost.ViewCount.ToString("N0")</span>
                                </div>
                                <div class="info-item">
                                    <strong>Curtidas:</strong>
                                    <span>@currentPost.LikeCount.ToString("N0")</span>
                                </div>
                                <div class="info-item">
                                    <strong>Comentários:</strong>
                                    <span>@currentPost.CommentCount.ToString("N0")</span>
                                </div>

                                @if (currentPost.Versions?.Count > 1)
                                {
                                    <hr />
                                    <button class="btn btn-sm btn-outline-info w-100" @onclick="ViewVersions">
                                        <i class="bi bi-clock-history"></i>
                                        Ver Histórico de Versões
                                    </button>
                                }
                            </div>
                        </div>
                    }

                    <!-- Ações Rápidas -->
                    <div class="card">
                        <div class="card-header">
                            <h6 class="card-title mb-0">
                                <i class="bi bi-lightning text-primary"></i>
                                Ações Rápidas
                            </h6>
                        </div>
                        <div class="card-body">
                            <button type="button" class="btn btn-outline-secondary btn-sm w-100 mb-2" @onclick="ClearForm">
                                <i class="bi bi-arrow-clockwise"></i>
                                Limpar Formulário
                            </button>
                            <button type="button" class="btn btn-outline-info btn-sm w-100 mb-2" @onclick="LoadTemplate">
                                <i class="bi bi-file-earmark-text"></i>
                                Carregar Template
                            </button>
                            <button type="button" class="btn btn-outline-primary btn-sm w-100" @onclick="ShowMarkdownHelp">
                                <i class="bi bi-question-circle"></i>
                                Ajuda Markdown
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Guid? PostId { get; set; }

    private CreateKnowledgePostRequest createRequest = new();

    private KnowledgePostDto? currentPost;
    private List<KnowledgeCategoryDto>? categories;
    private List<TagDto> selectedTags = new();
    private string newTagName = "";
    private bool isLoading = false;
    private bool showPreview = false;
    private InputTextArea? contentTextArea;

    private bool IsEditing => PostId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();

        if (IsEditing && PostId.HasValue)
        {
            await LoadPost();
        }
        else
        {
            // Configurações padrão para novo post
            createRequest.Type = PostType.Article;
            createRequest.Status = PostStatus.Draft;
            createRequest.Visibility = PostVisibility.Company;
            createRequest.Status = PostStatus.Draft;
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await KnowledgeService.GetCategoriesAsync(includeInactive: false, includeHierarchy: true);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Erro ao carregar categorias:", ex.Message);
        }
    }

    private async Task LoadPost()
    {
        if (!PostId.HasValue) return;

        try
        {
            currentPost = await KnowledgeService.GetKnowledgePostByIdAsync(PostId.Value);

            if (currentPost != null)
            {
                // Mapear dados para o formulário
                createRequest.Title = currentPost.Title;
                createRequest.Summary = currentPost.Summary;
                createRequest.Content = currentPost.Content;
                createRequest.Type = currentPost.Type;
                createRequest.Status = currentPost.Status;
                createRequest.Visibility = currentPost.Visibility;
                createRequest.CategoryId = currentPost.CategoryId;
                createRequest.ImageUrl = currentPost.ImageUrl;

                selectedTags = currentPost.Tags ?? new List<TagDto>();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao carregar post: {ex.Message}");
            Navigation.NavigateTo("/knowledge");
        }
    }

    private async Task HandleValidSubmit()
    {
        await SubmitPost();
    }

    private async Task SubmitPost()
    {
        if (isLoading) return;

        isLoading = true;
        StateHasChanged();

        try
        {
            // Adicionar tags ao request
            createRequest.TagIds = selectedTags.Select(t => t.Id).ToList();

            bool success;

            if (IsEditing && PostId.HasValue)
            {
                var updateRequest = new UpdateKnowledgePostRequest
                {
                    Title = createRequest.Title,
                    Summary = createRequest.Summary,
                    Content = createRequest.Content,
                    Type = createRequest.Type,
                    Status = createRequest.Status,
                    Visibility = createRequest.Visibility,
                    CategoryId = createRequest.CategoryId,
                    ImageUrl = createRequest.ImageUrl,
                    TagIds = createRequest.TagIds
                };

                var updateResult = await KnowledgeService.UpdateKnowledgePostAsync(PostId.Value, updateRequest);
                success = updateResult != null;
            }
            else
            {
                var result = await KnowledgeService.CreateKnowledgePostAsync(createRequest);
                success = result != null;

                if (success && result != null)
                {
                    // Redirecionar para o post criado
                    Navigation.NavigateTo($"/knowledge/view/{result.Id}");
                    return;
                }
            }

            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", IsEditing ? "Artigo atualizado com sucesso!" : "Artigo criado com sucesso!");
                Navigation.NavigateTo("/knowledge");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Erro ao salvar artigo.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveAsDraft()
    {
        var originalStatus = createRequest.Status;
        createRequest.Status = PostStatus.Draft;

        await SubmitPost();

        createRequest.Status = originalStatus;
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/knowledge");
    }

    private void ViewVersions()
    {
        if (PostId.HasValue)
        {
            Navigation.NavigateTo($"/knowledge/versions/{PostId.Value}");
        }
    }

    #region Tags Management

    private async Task HandleTagKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newTagName))
        {
            await AddTag();
        }
    }

    private async Task AddTag()
    {
        if (string.IsNullOrWhiteSpace(newTagName)) return;

        var tagName = newTagName.Trim().ToLower();

        if (selectedTags.Any(t => t.Name.ToLower() == tagName))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Esta tag já foi adicionada.");
            return;
        }

        // Criar nova tag (simulado - em produção viria do backend)
        var newTag = new TagDto
        {
            Id = Guid.NewGuid(),
            Name = tagName,
            Color = GetRandomTagColor(),
            UsageCount = 1
        };

        selectedTags.Add(newTag);
        newTagName = "";
        StateHasChanged();
    }

    private void RemoveTag(TagDto tag)
    {
        selectedTags.Remove(tag);
        StateHasChanged();
    }

    private static string GetRandomTagColor()
    {
        var colors = new[] { "#007ACC", "#28A745", "#DC3545", "#FFC107", "#6F42C1", "#FD7E14", "#20C997" };
        var random = new Random();
        return colors[random.Next(colors.Length)];
    }

    #endregion

    #region Markdown Editor

    private void TogglePreview()
    {
        showPreview = !showPreview;
    }

    private async Task InsertMarkdown(string before, string after)
    {
        if (showPreview) return;

        try
        {
            if (contentTextArea?.Element != null)
            {
                await JSRuntime.InvokeVoidAsync("insertAtCursor", contentTextArea.Element, before, after);
            }
        }
        catch
        {
            // Fallback para inserção simples
            createRequest.Content += before + after;
        }
    }

    private static string ConvertMarkdownToHtml(string markdown)
    {
        if (string.IsNullOrEmpty(markdown)) return "";

        // Conversão básica de Markdown para HTML (simplificada)
        var html = markdown
            .Replace("\n", "<br />")
            .Replace("**", "<strong>") // Simplificado
            .Replace("*", "<em>") // Simplificado
            .Replace("`", "<code>") // Simplificado
            .Replace("# ", "<h1>")
            .Replace("## ", "<h2>")
            .Replace("- ", "<li>");

        return html;
    }

    #endregion

    #region Helper Methods

    private void ClearForm()
    {
        if (!IsEditing)
        {
            createRequest = new CreateKnowledgePostRequest
            {
                Type = PostType.Article,
                Status = PostStatus.Draft,
                Visibility = PostVisibility.Company
            };
            selectedTags.Clear();
            StateHasChanged();
        }
    }

    private void LoadTemplate()
    {
        var template = @"# Título do Artigo

## Resumo
Breve descrição do que este artigo aborda.

## Objetivos
- Objetivo 1
- Objetivo 2
- Objetivo 3

## Conteúdo Principal

### Seção 1
Conteúdo da primeira seção...

### Seção 2
Conteúdo da segunda seção...

## Conclusão
Resumo final e próximos passos.

## Referências
- [Link 1](https://exemplo.com)
- [Link 2](https://exemplo.com)";

        createRequest.Content = template;
        StateHasChanged();
    }

    private async Task ShowMarkdownHelp()
    {
        await JSRuntime.InvokeVoidAsync("alert", @"Guia Rápido de Markdown:

# Título Principal
## Subtítulo
### Título Menor

**Texto em Negrito**
*Texto em Itálico*
`Código Inline`

- Item de lista
- Outro item

[Texto do Link](https://exemplo.com)
![Texto da Imagem](url-da-imagem)

> Citação

```
Bloco de código
```");
    }

    private void HandleImageError()
    {
        createRequest.ImageUrl = "";
        StateHasChanged();
    }

    private bool HasValidationError(string fieldName)
    {
        // Implementação básica de validação visual
        return false;
    }

    private static string GetPostTypeDisplay(PostType type)
    {
        return type switch
        {
            PostType.Article => "Artigo",
            PostType.HowTo => "Como Fazer",
            PostType.Policy => "Política",
            PostType.FAQ => "FAQ",
            PostType.Announcement => "Anúncio",
            PostType.News => "Notícia",
            PostType.Post => "Post",
            _ => type.ToString()
        };
    }

    private static string GetPostStatusDisplay(PostStatus status)
    {
        return status switch
        {
            PostStatus.Draft => "Rascunho",
            PostStatus.PendingApproval => "Pendente",
            PostStatus.Published => "Publicado",
            PostStatus.Archived => "Arquivado",
            PostStatus.Rejected => "Rejeitado",
            _ => status.ToString()
        };
    }

    private static string GetPostVisibilityDisplay(PostVisibility visibility)
    {
        return visibility switch
        {
            PostVisibility.Public => "Público",
            PostVisibility.Company => "Empresa",
            PostVisibility.Department => "Departamento",
            PostVisibility.Team => "Equipe",
            _ => visibility.ToString()
        };
    }

    #endregion
}

<style>
    .knowledge-create-container {
        padding: 1.5rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .page-title {
        font-size: 2rem;
        font-weight: 600;
        color: #1a365d;
        margin-bottom: 0.5rem;
    }

    .form-container {
        background: white;
        border-radius: 12px;
        overflow: hidden;
    }

    .card {
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        box-shadow: 0 1px 4px rgba(0,0,0,0.05);
    }

    .card-header {
        background: #f8fafc;
        border-bottom: 1px solid #e2e8f0;
        padding: 1rem 1.25rem;
    }

    .card-title {
        font-weight: 600;
        color: #2d3748;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .required::after {
        content: " *";
        color: #e53e3e;
    }

    .content-editor {
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        overflow: hidden;
    }

    .editor-toolbar {
        background: #f8fafc;
        border-bottom: 1px solid #e2e8f0;
        padding: 0.75rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .content-textarea {
        border: none !important;
        border-radius: 0;
        resize: vertical;
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        font-size: 0.9rem;
        line-height: 1.6;
    }

    .content-textarea:focus {
        box-shadow: none !important;
    }

    .content-preview {
        min-height: 400px;
        padding: 1rem;
        background: white;
    }

    .preview-content {
        line-height: 1.6;
    }

    .preview-content h1,
    .preview-content h2,
    .preview-content h3 {
        margin-bottom: 1rem;
        color: #2d3748;
    }

    .preview-content p {
        margin-bottom: 1rem;
    }

    .preview-content code {
        background: #f7fafc;
        padding: 0.125rem 0.25rem;
        border-radius: 4px;
        font-size: 0.875rem;
    }

    .tags-input-container {
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 0.5rem;
        min-height: 100px;
        background: white;
    }

    .tags-display {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .tag-item {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
        color: white;
    }

    .tag-remove {
        background: none;
        border: none;
        color: inherit;
        padding: 0;
        margin-left: 0.25rem;
        cursor: pointer;
        opacity: 0.8;
        font-size: 0.7rem;
    }

    .tag-remove:hover {
        opacity: 1;
    }

    .tags-input {
        border: none;
        outline: none;
        width: 100%;
        padding: 0.25rem 0;
        font-size: 0.9rem;
    }

    .image-preview {
        max-height: 200px;
        overflow: hidden;
        border-radius: 8px;
        border: 1px solid #e2e8f0;
    }

    .image-preview img {
        width: 100%;
        height: auto;
    }

    .info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid #f1f5f9;
    }

    .info-item:last-child {
        border-bottom: none;
    }

    .info-item strong {
        color: #4a5568;
        font-size: 0.9rem;
    }

    .info-item span {
        color: #2d3748;
        font-size: 0.9rem;
    }

    @@media (max-width: 768px) {
        .knowledge-create-container {
            padding: 1rem;
        }

        .editor-toolbar {
            flex-wrap: wrap;
        }

        .btn-group {
            margin-bottom: 0.5rem;
        }
    }
</style>

<script>
    window.insertAtCursor = function(textarea, before, after) {
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const selectedText = textarea.value.substring(start, end);
        const newText = before + selectedText + after;

        textarea.value = textarea.value.substring(0, start) + newText + textarea.value.substring(end);

        // Reposicionar cursor
        const newPosition = start + before.length + selectedText.length;
        textarea.setSelectionRange(newPosition, newPosition);
        textarea.focus();

        // Disparar evento de mudança
        textarea.dispatchEvent(new Event('input'));
    };
</script>
