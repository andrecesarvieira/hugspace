@page "/search"
@page "/search/{searchTerm}"
@rendermode InteractiveServer
@using Fluxor
@using SynQcore.BlazorApp.Store.User
@using SynQcore.BlazorApp.Services
@using SynQcore.BlazorApp.Models
@using SynQcore.BlazorApp.Components.Shared
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject IState<UserState> UserState
@inject ILocalAuthService LocalAuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http

<PageTitle>Busca Corporativa - SynQcore</PageTitle>

<div class="search-page">
    <!-- Header de Busca -->
    <div class="search-header">
        <div class="search-container">
            <h1>
                <i class="fas fa-search"></i>
                Busca Corporativa
            </h1>
            <p class="search-subtitle">
                Encontre funcionários, conhecimento, documentos e discussões
            </p>
        </div>
    </div>

    <!-- Barra de Busca Principal -->
    <div class="search-input-section">
        <div class="search-input-container">
            <div class="search-input-wrapper">
                <i class="fas fa-search search-icon"></i>
                <input type="text" 
                       class="search-main-input" 
                       placeholder="Digite sua busca..." 
                       @bind="currentSearchTerm"
                       @onkeypress="HandleSearchKeyPress"
                       @ref="searchInputRef" />
                @if (!string.IsNullOrEmpty(currentSearchTerm))
                {
                    <button class="search-clear-btn" @onclick="ClearSearch">
                        <i class="fas fa-times"></i>
                    </button>
                }
            </div>
            <button class="search-btn" @onclick="PerformSearch" disabled="@isSearching">
                @if (isSearching)
                {
                    <div class="spinner-small"></div>
                }
                else
                {
                    <i class="fas fa-search"></i>
                }
                Buscar
            </button>
        </div>

        <!-- Filtros de Busca -->
        <div class="search-filters">
            <div class="filter-group">
                <label>Tipo:</label>
                <select @bind="selectedSearchType" @bind:after="OnFilterChanged">
                    <option value="all">Todos</option>
                    <option value="employees">Funcionários</option>
                    <option value="knowledge">Conhecimento</option>
                    <option value="documents">Documentos</option>
                    <option value="discussions">Discussões</option>
                    <option value="endorsements">Endorsements</option>
                </select>
            </div>

            <div class="filter-group">
                <label>Departamento:</label>
                <select @bind="selectedDepartment" @bind:after="OnFilterChanged">
                    <option value="">Todos os Departamentos</option>
                    @foreach (var dept in departments)
                    {
                        <option value="@dept.Id">@dept.Name</option>
                    }
                </select>
            </div>

            <div class="filter-group">
                <label>Período:</label>
                <select @bind="selectedPeriod" @bind:after="OnFilterChanged">
                    <option value="">Qualquer período</option>
                    <option value="today">Hoje</option>
                    <option value="week">Esta semana</option>
                    <option value="month">Este mês</option>
                    <option value="quarter">Este trimestre</option>
                    <option value="year">Este ano</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Resultados da Busca -->
    @if (hasSearched)
    {
        <div class="search-results">
            <!-- Estatísticas da Busca -->
            <div class="search-stats">
                <div class="results-info">
                    @if (isSearching)
                    {
                        <div class="searching-indicator">
                            <div class="spinner-small"></div>
                            <span>Buscando...</span>
                        </div>
                    }
                    else
                    {
                        <span>
                            @GetTotalResultsCount() resultados encontrados 
                            @if (!string.IsNullOrEmpty(currentSearchTerm))
                            {
                                <text>para "<strong>@currentSearchTerm</strong>"</text>
                            }
                            em @searchElapsedTime.TotalMilliseconds.ToString("F0")ms
                        </span>
                    }
                </div>
            </div>

            <!-- Tabs de Resultados -->
            <div class="results-tabs">
                <button class="tab-btn @(activeTab == "all" ? "active" : "")" 
                        @onclick="@(() => SetActiveTab("all"))">
                    <i class="fas fa-th-list"></i>
                    Todos (@GetTotalResultsCount())
                </button>
                <button class="tab-btn @(activeTab == "employees" ? "active" : "")" 
                        @onclick="@(() => SetActiveTab("employees"))">
                    <i class="fas fa-users"></i>
                    Funcionários (@(employeeResults?.TotalCount ?? 0))
                </button>
            </div>

            <!-- Conteúdo dos Resultados -->
            <div class="results-content">
                @if (isSearching)
                {
                    <div class="loading-results">
                        <div class="loading-grid">
                            @for (int i = 0; i < 6; i++)
                            {
                                <div class="loading-card">
                                    <div class="loading-avatar"></div>
                                    <div class="loading-content">
                                        <div class="loading-line loading-title"></div>
                                        <div class="loading-line loading-subtitle"></div>
                                        <div class="loading-line loading-description"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else if (GetTotalResultsCount() == 0)
                {
                    <div class="no-results">
                        <div class="no-results-icon">
                            <i class="fas fa-search"></i>
                        </div>
                        <h3>Nenhum resultado encontrado</h3>
                        <p>
                            @if (!string.IsNullOrEmpty(currentSearchTerm))
                            {
                                <text>Não encontramos resultados para "<strong>@currentSearchTerm</strong>".</text>
                            }
                            else
                            {
                                <text>Tente ajustar os filtros ou usar termos diferentes.</text>
                            }
                        </p>
                    </div>
                }
                else
                {
                    @if (activeTab == "all" || activeTab == "employees")
                    {
                        @if (employeeResults?.Items.Any() == true)
                        {
                            <div class="results-section" data-section="employees">
                                @if (activeTab == "all")
                                {
                                    <h3 class="section-title">
                                        <i class="fas fa-users"></i>
                                        Funcionários (@employeeResults.TotalCount)
                                    </h3>
                                }
                                <div class="employee-results">
                                    @foreach (var employee in employeeResults.Items)
                                    {
                                        <div class="employee-card" @onclick="@(() => ViewEmployee(employee.Id))">
                                            <div class="employee-avatar">
                                                @if (!string.IsNullOrEmpty(employee.PhotoUrl))
                                                {
                                                    <img src="@employee.PhotoUrl" alt="@employee.Name" />
                                                }
                                                else
                                                {
                                                    <div class="avatar-placeholder">
                                                        @employee.Name.First()
                                                    </div>
                                                }
                                            </div>
                                            <div class="employee-info">
                                                <h4>@employee.Name</h4>
                                                <p class="employee-title">@employee.JobTitle</p>
                                                <p class="employee-department">@employee.DepartmentName</p>
                                                <div class="employee-contact">
                                                    <span class="contact-info">
                                                        <i class="fas fa-envelope"></i>
                                                        @employee.Email
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="employee-actions">
                                                <button class="btn btn-sm btn-primary" @onclick:stopPropagation="true" 
                                                        @onclick="@(() => ContactEmployee(employee.Id))">
                                                    <i class="fas fa-comment"></i>
                                                    Contato
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                }
            </div>
        </div>
    }
    else
    {
        <!-- Estado Inicial - Sugestões de Busca -->
        <div class="search-suggestions">
            <div class="quick-searches">
                <h3>Buscas Rápidas</h3>
                <div class="quick-search-grid">
                    <button class="quick-search-card" @onclick="@(() => QuickSearch("desenvolvedores"))">
                        <i class="fas fa-code"></i>
                        <span>Desenvolvedores</span>
                    </button>
                    <button class="quick-search-card" @onclick="@(() => QuickSearch("gestores"))">
                        <i class="fas fa-users-cog"></i>
                        <span>Gestores</span>
                    </button>
                    <button class="quick-search-card" @onclick="@(() => QuickSearch("recursos humanos"))">
                        <i class="fas fa-user-tie"></i>
                        <span>Recursos Humanos</span>
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? SearchTerm { get; set; }

    // Estado da busca
    private string currentSearchTerm = string.Empty;
    private bool isSearching = false;
    private bool hasSearched = false;
    private TimeSpan searchElapsedTime = TimeSpan.Zero;
    private ElementReference searchInputRef;

    // Filtros
    private string selectedSearchType = "all";
    private string selectedDepartment = string.Empty;
    private string selectedPeriod = string.Empty;
    private string activeTab = "all";

    // Dados
    private List<DepartmentDto> departments = new();
    private List<string> recentSearches = new();

    // Resultados
    private PagedResult<EmployeeSearchResultDto>? employeeResults;
    private bool shouldFocusInput = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(SearchTerm))
        {
            currentSearchTerm = SearchTerm;
            await PerformSearch();
        }

        await LoadDepartments();
        await LoadRecentSearches();
        
        // Marcar para focar no input após renderização
        shouldFocusInput = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(SearchTerm) && SearchTerm != currentSearchTerm)
        {
            currentSearchTerm = SearchTerm;
            await PerformSearch();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && shouldFocusInput)
        {
            shouldFocusInput = false;
            await FocusSearchInput();
        }
    }

    private async Task FocusSearchInput()
    {
        try
        {
            if (searchInputRef.Context != null)
            {
                await Task.Delay(50); // Pequeno delay para garantir que o DOM está pronto
                await searchInputRef.FocusAsync();
            }
        }
        catch (Exception ex)
        {
            // Log do erro sem quebrar a aplicação
            Console.WriteLine($"Erro ao focar no input de busca: {ex.Message}");
        }
    }

    private async Task LoadDepartments()
    {
        try
        {
            // TODO: Implementar carregamento real de departamentos
            departments = new List<DepartmentDto>
            {
                new DepartmentDto { Id = Guid.NewGuid(), Name = "Desenvolvimento" },
                new DepartmentDto { Id = Guid.NewGuid(), Name = "Recursos Humanos" },
                new DepartmentDto { Id = Guid.NewGuid(), Name = "Marketing" },
                new DepartmentDto { Id = Guid.NewGuid(), Name = "Vendas" }
            };
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar departamentos: {ex.Message}");
        }
    }

    private async Task LoadRecentSearches()
    {
        try
        {
            // TODO: Implementar carregamento de buscas recentes do localStorage ou API
            recentSearches = new List<string> { "desenvolvedores", "gestão de projetos", "marketing digital" };
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar buscas recentes: {ex.Message}");
        }
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await PerformSearch();
        }
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(currentSearchTerm))
            return;

        isSearching = true;
        hasSearched = true;
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        try
        {
            // Adicionar aos recentes
            await AddToRecentSearches(currentSearchTerm);

            // Executar busca de funcionários
            if (selectedSearchType == "all" || selectedSearchType == "employees")
            {
                await SearchEmployees();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro durante a busca: {ex.Message}");
        }
        finally
        {
            stopwatch.Stop();
            searchElapsedTime = stopwatch.Elapsed;
            isSearching = false;
            StateHasChanged();
        }
    }

    private async Task SearchEmployees()
    {
        try
        {
            // Simular busca de funcionários (substituir por chamada real à API)
            await Task.Delay(500); // Simular latência
            
            var mockEmployees = new List<EmployeeSearchResultDto>
            {
                new EmployeeSearchResultDto
                {
                    Id = Guid.NewGuid(),
                    Name = "João Silva",
                    Email = "joao.silva@synqcore.com",
                    JobTitle = "Desenvolvedor Senior",
                    DepartmentName = "Desenvolvimento"
                },
                new EmployeeSearchResultDto
                {
                    Id = Guid.NewGuid(),
                    Name = "Maria Santos",
                    Email = "maria.santos@synqcore.com",
                    JobTitle = "Gerente de Projetos",
                    DepartmentName = "Gestão"
                }
            };

            employeeResults = new PagedResult<EmployeeSearchResultDto>(mockEmployees, 1, 10, mockEmployees.Count);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar funcionários: {ex.Message}");
            employeeResults = new PagedResult<EmployeeSearchResultDto>(new List<EmployeeSearchResultDto>(), 1, 10, 0);
        }
    }

    private async Task AddToRecentSearches(string searchTerm)
    {
        if (!recentSearches.Contains(searchTerm))
        {
            recentSearches.Insert(0, searchTerm);
            if (recentSearches.Count > 10)
            {
                recentSearches = recentSearches.Take(10).ToList();
            }
        }
        await Task.CompletedTask;
    }

    private void ClearSearch()
    {
        currentSearchTerm = string.Empty;
        hasSearched = false;
        ClearResults();
    }

    private void ClearResults()
    {
        employeeResults = null;
    }

    private async Task OnFilterChanged()
    {
        if (hasSearched)
        {
            await PerformSearch();
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private int GetTotalResultsCount()
    {
        return employeeResults?.TotalCount ?? 0;
    }

    private async Task QuickSearch(string term)
    {
        currentSearchTerm = term;
        await PerformSearch();
    }

    private async Task ExecuteSearch(string term)
    {
        currentSearchTerm = term;
        await PerformSearch();
    }

    private void RemoveRecentSearch(string term)
    {
        recentSearches.Remove(term);
    }

    private void ViewEmployee(Guid employeeId)
    {
        Navigation.NavigateTo($"/employees/{employeeId}");
    }

    private async Task ContactEmployee(Guid employeeId)
    {
        // TODO: Implementar contato com funcionário
        await Task.CompletedTask;
    }

    // Models
    public class DepartmentDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class EmployeeSearchResultDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string? Phone { get; set; }
        public string JobTitle { get; set; } = string.Empty;
        public string DepartmentName { get; set; } = string.Empty;
        public string? PhotoUrl { get; set; }
        public List<string> Skills { get; set; } = new();
    }

    public class PagedResult<T>
    {
        public List<T> Items { get; set; } = new();
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalCount { get; set; }
        public int TotalPages => (int)Math.Ceiling((double)TotalCount / PageSize);
        public bool HasPreviousPage => Page > 1;
        public bool HasNextPage => Page < TotalPages;

        public PagedResult() { }

        public PagedResult(List<T> items, int page, int pageSize, int totalCount)
        {
            Items = items;
            Page = page;
            PageSize = pageSize;
            TotalCount = totalCount;
        }
    }
}