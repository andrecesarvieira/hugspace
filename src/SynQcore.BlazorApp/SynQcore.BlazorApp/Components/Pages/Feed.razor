@page "/feed"
@rendermode InteractiveServer
@using Fluxor
@using SynQcore.BlazorApp.Store.User
@using SynQcore.BlazorApp.Services
@using SynQcore.BlazorApp.Models
@using SynQcore.BlazorApp.Components.Social
@using SynQcore.BlazorApp.Components.Shared
@using SynQcore.Application.Features.CorporateSearch.DTOs
@using SynQcore.Application.Features.Departments.DTOs
@inject IState<UserState> UserState
@inject ILocalAuthService LocalAuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IUserPermissionService UserPermissionService
@inject IPostService PostService
@inject INotificationService NotificationService
@inject ISearchService SearchService
@inject IDepartmentService DepartmentService

<style>
    /* === RESET COMPLETO === */
    .feed-container * {
        box-sizing: border-box !important;
    }

    /* === ESTRUTURA FUNDAMENTAL === */
    .feed-container {
        width: 100vw !important;
        min-height: 100vh !important;
        margin: 0 !important;
        padding: 0 !important;
        overflow-x: hidden !important;
    }

    /* === HEADER FIXO === */
    .feed-header {
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        width: 100% !important;
        height: 70px !important;
        background: white !important;
        z-index: 1000 !important;
        display: flex !important;
        align-items: center !important;
        justify-content: space-between !important;
        padding: 0 2rem !important;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
    }

    /* === BARRA DE PESQUISA INDEPENDENTE === */
    .header-search {
        flex: 1 !important;
        display: flex !important;
        justify-content: center !important;
        max-width: none !important;
    }

    .search-container {
        width: 100% !important;
        max-width: 550px !important;
        position: relative !important;
    }

    .search-input {
        width: 100% !important;
        height: 45px !important;
        padding: 0 3rem 0 3rem !important;
        border: 2px solid #e5e7eb !important;
        border-radius: 25px !important;
        font-size: 1rem !important;
        background: #f8fafc !important;
    }

    /* === GRID LAYOUT PRINCIPAL === */
    .main-content {
        position: absolute !important;
        top: 70px !important;
        left: 0 !important;
        right: 0 !important;
        width: 100% !important;
        display: grid !important;
        grid-template-columns: 280px 1fr 320px !important;
        gap: 1.5rem !important;
        padding: 2rem 2rem 0 2rem !important;
        min-height: calc(100vh - 70px) !important;
        max-width: 1400px !important;
        margin: 0 auto !important;
    }

    /* === ELEMENTOS DO GRID === */
    .sidebar-left {
        grid-column: 1 !important;
        background: white !important;
        border-radius: 12px !important;
        padding: 1.5rem !important;
        height: fit-content !important;
        position: sticky !important;
        top: 90px !important;
    }

    .main-feed {
        grid-column: 2 !important;
        background: white !important;
        border-radius: 12px !important;
        padding: 1.5rem !important;
        min-height: 500px !important;
    }

    .sidebar-right {
        grid-column: 3 !important;
        background: white !important;
        border-radius: 12px !important;
        padding: 1.5rem !important;
        height: fit-content !important;
        position: sticky !important;
        top: 90px !important;
    }

    /* === ESTILOS PARA BUSCA INLINE === */
    .search-results-section {
        background: white !important;
        border-radius: 12px !important;
        padding: 1.5rem !important;
        margin-bottom: 1.5rem !important;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1) !important;
    }

    .search-results-header {
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
        margin-bottom: 1.5rem !important;
        padding-bottom: 1rem !important;
        border-bottom: 2px solid #f1f5f9 !important;
    }

    .search-results-header h3 {
        color: #1e293b !important;
        font-size: 1.25rem !important;
        font-weight: 600 !important;
        margin: 0 !important;
    }

    .search-results-header h3 i {
        color: #3b82f6 !important;
        margin-right: 0.5rem !important;
    }

    .clear-search-btn {
        background: #ef4444 !important;
        color: white !important;
        border: none !important;
        padding: 0.5rem 1rem !important;
        border-radius: 8px !important;
        font-size: 0.875rem !important;
        cursor: pointer !important;
        transition: all 0.2s !important;
    }

    .clear-search-btn:hover {
        background: #dc2626 !important;
        transform: translateY(-1px) !important;
    }

    .search-category {
        margin-bottom: 2rem !important;
    }

    .category-title {
        color: #475569 !important;
        font-size: 1.1rem !important;
        font-weight: 600 !important;
        margin-bottom: 1rem !important;
        padding-left: 0.5rem !important;
        border-left: 4px solid #3b82f6 !important;
    }

    .category-results {
        display: grid !important;
        gap: 1rem !important;
    }

    .search-result-card {
        display: flex !important;
        padding: 1rem !important;
        background: #f8fafc !important;
        border-radius: 8px !important;
        cursor: pointer !important;
        transition: all 0.2s !important;
        border: 2px solid transparent !important;
    }

    .search-result-card:hover {
        background: #e2e8f0 !important;
        border-color: #3b82f6 !important;
        transform: translateY(-2px) !important;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15) !important;
    }

    .result-icon {
        width: 40px !important;
        height: 40px !important;
        background: #3b82f6 !important;
        border-radius: 8px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        margin-right: 1rem !important;
        flex-shrink: 0 !important;
    }

    .result-icon i {
        color: white !important;
        font-size: 1.1rem !important;
    }

    .result-content {
        flex: 1 !important;
    }

    .result-content h5 {
        color: #1e293b !important;
        font-size: 1rem !important;
        font-weight: 600 !important;
        margin: 0 0 0.5rem 0 !important;
    }

    .result-content p {
        color: #64748b !important;
        font-size: 0.875rem !important;
        margin: 0 0 0.5rem 0 !important;
        line-height: 1.4 !important;
    }

    .result-meta {
        color: #94a3b8 !important;
        font-size: 0.75rem !important;
        font-weight: 500 !important;
    }

    .search-loading {
        text-align: center !important;
        padding: 3rem !important;
        color: #64748b !important;
    }

    .search-loading i {
        font-size: 2rem !important;
        margin-bottom: 1rem !important;
        color: #3b82f6 !important;
    }

    .search-no-results {
        text-align: center !important;
        padding: 3rem !important;
        color: #64748b !important;
    }

    .search-no-results i {
        font-size: 3rem !important;
        margin-bottom: 1rem !important;
        color: #94a3b8 !important;
    }

    .search-no-results h4 {
        color: #475569 !important;
        margin: 0 0 0.5rem 0 !important;
    }

    .search-no-results p {
        margin: 0 !important;
    }
</style>

<div class="feed-container">
    <!-- Header Principal -->
        <!-- Header Principal -->
    <header class="feed-header">
        <!-- Logo e Branding -->
        <div class="header-brand">
            <div class="logo-section">
                <i class="fas fa-network-wired logo-icon"></i>
                <div class="logo-text">
                    <h1>SynQcore</h1>
                    <span class="logo-subtitle">Rede Social Corporativa</span>
                </div>
            </div>
        </div>

        <!-- Barra de Pesquisa Central -->
        <div class="header-search">
            <div class="search-container">
                <i class="fas fa-search search-icon"></i>
                <input type="text"
                       class="search-input"
                       placeholder="Buscar discussões, colegas, projetos..."
                       @bind="searchQuery"
                       @onkeypress="@(async (e) => { if (e.Key == "Enter") await HandleSearch(); })"
                       @oninput="OnSearchInput"
                       @ref="searchInputRef" />

                <!-- Filtros integrados como dropdown -->
                <div class="search-filters-dropdown">
                    <select class="search-filter-select" @bind="searchFilter">
                        <option value="all">Tudo</option>
                        <option value="posts">Posts</option>
                        <option value="people">Pessoas</option>
                        <option value="tags">Tags</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Área de Ações do Usuário -->
        <div class="header-actions">
            <!-- Notificações -->
            <NotificationCenter />

            <!-- Perfil do Usuário -->
            @if (currentUser != null)
            {
                <div class="user-profile">
                    <button class="profile-btn" @onclick="ToggleProfileMenu">
                        <div class="profile-avatar">@currentUser.Nome?.Substring(0, 1).ToUpper()</div>
                        <div class="profile-info">
                            <span class="profile-name">@currentUser.Nome</span>
                            <span class="profile-role">@currentUser.Cargo</span>
                        </div>
                        <i class="fas fa-chevron-down profile-arrow"></i>
                    </button>

                    <!-- Menu Dropdown do Perfil -->
                    @if (showProfileMenu)
                    {
                        <div class="profile-menu">
                            <a href="/perfil" class="menu-item">
                                <i class="fas fa-user"></i>
                                Meu Perfil
                            </a>
                            <a href="/configuracoes" class="menu-item">
                                <i class="fas fa-cog"></i>
                                Configurações
                            </a>
                            <a href="/employees" class="menu-item">
                                <i class="fas fa-users"></i>
                                Funcionários
                            </a>
                            <a href="/endorsements" class="menu-item">
                                <i class="fas fa-award"></i>
                                Endorsements
                            </a>
                            @if (canModerate)
                            {
                                <a href="/moderation" class="menu-item">
                                    <i class="fas fa-shield-alt"></i>
                                    Moderação
                                </a>
                            }
                            <a href="/ajuda" class="menu-item">
                                <i class="fas fa-question-circle"></i>
                                Ajuda
                            </a>
                            <hr class="menu-divider">
                            <button class="menu-item logout-btn" @onclick="HandleLogout">
                                <i class="fas fa-sign-out-alt"></i>
                                Sair
                            </button>
                        </div>
                    }
                </div>
            }
        </div>
    </header>

    <!-- Conteúdo Principal -->
    <div class="main-content">
        <!-- Sidebar de Navegação Esquerda -->
        <div class="sidebar-left">
            <div class="navigation-menu">
                <h3>Navegação</h3>
                <nav class="main-nav">
                    <a href="#" class="nav-item @(activeTab == "feed" ? "active" : "")" @onclick="@(() => SetActiveTab("feed"))">
                        <i class="fas fa-home"></i>
                        <span>Feed Principal</span>
                    </a>
                    <a href="#" class="nav-item @(activeTab == "discussions" ? "active" : "")" @onclick="@(() => SetActiveTab("discussions"))">
                        <i class="fas fa-comments"></i>
                        <span>Discussões</span>
                    </a>
                    <a href="#" class="nav-item @(activeTab == "endorsements" ? "active" : "")" @onclick="@(() => SetActiveTab("endorsements"))">
                        <i class="fas fa-award"></i>
                        <span>Endorsements</span>
                    </a>
                    <a href="#" class="nav-item @(activeTab == "people" ? "active" : "")" @onclick="@(() => SetActiveTab("people"))">
                        <i class="fas fa-users"></i>
                        <span>Pessoas</span>
                    </a>
                    <a href="#" class="nav-item @(activeTab == "analytics" ? "active" : "")" @onclick="@(() => SetActiveTab("analytics"))">
                        <i class="fas fa-chart-bar"></i>
                        <span>Analytics</span>
                    </a>
                </nav>
            </div>

            <div class="quick-actions">
                <h4>Ações Rápidas</h4>
                <button class="action-btn" @onclick="ShowCreatePostModal">
                    <i class="fas fa-plus"></i>
                    <span>Nova Postagem</span>
                </button>
                <button class="action-btn" @onclick="ShowCreateDiscussion">
                    <i class="fas fa-comments"></i>
                    <span>Criar Discussão</span>
                </button>
                <button class="action-btn" @onclick="ShowCreateEndorsement">
                    <i class="fas fa-award"></i>
                    <span>Endorsement</span>
                </button>
            </div>

            <div class="sidebar-widget">
                <h4>Filtros</h4>
                <div class="filter-options">
                    <label class="filter-option">
                        <input type="checkbox" checked />
                        <span>Posts Recentes</span>
                    </label>
                    <label class="filter-option">
                        <input type="checkbox" />
                        <span>Apenas Seguindo</span>
                    </label>
                    <label class="filter-option">
                        <input type="checkbox" />
                        <span>Populares</span>
                    </label>
                </div>
            </div>
        </div>

        <div class="main-feed">
            
            <!-- Resultados de Busca -->
            @if (isSearchActive)
            {
                <div class="search-results-section">
                    <div class="search-results-header">
                        <h3><i class="fas fa-search"></i> Resultados para "@currentSearchTerm"</h3>
                        <button class="clear-search-btn" @onclick="ClearSearch">
                            <i class="fas fa-times"></i> Limpar
                        </button>
                    </div>

                    <!-- Resultados por Categoria -->
                    @if (searchResults?.Any() == true)
                    {
                        <div class="search-results-content">
                            @foreach (var category in searchResults.GroupBy(r => r.Type))
                            {
                                <div class="search-category">
                                    <h4 class="category-title">@GetCategoryDisplayName(category.Key)</h4>
                                    <div class="category-results">
                                        @foreach (var result in category)
                                        {
                                            <div class="search-result-card" @onclick="() => NavigateToResult(result)">
                                                <div class="result-icon">
                                                    <i class="@GetCategoryIcon(result.Type)"></i>
                                                </div>
                                                <div class="result-content">
                                                    <h5>@result.Title</h5>
                                                    <p>@result.Excerpt</p>
                                                    <span class="result-meta">@result.Type • @result.CreatedAt.ToString("dd/MM/yyyy") • @result.AuthorName</span>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else if (isSearching)
                    {
                        <div class="search-loading">
                            <i class="fas fa-spinner fa-spin"></i>
                            <span>Buscando...</span>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(currentSearchTerm))
                    {
                        <div class="search-no-results">
                            <i class="fas fa-search"></i>
                            <h4>Nenhum resultado encontrado</h4>
                            <p>Tente usar termos diferentes ou verifique a ortografia.</p>
                        </div>
                    }
                </div>
            }
            else
            {
            <!-- Área de Criação de Post -->
            <div class="create-post-area">
                <div class="create-post-header">
                    @if (currentUser != null)
                    {
                        <div class="profile-avatar">@currentUser.Nome?.Substring(0, 1).ToUpper()</div>
                    }
                    <span>O que você gostaria de compartilhar, @(currentUser?.Nome?.Split(' ')[0] ?? "Usuário")?</span>
                </div>
                <textarea class="create-post-input"
                          placeholder="Compartilhe suas ideias, projetos ou conhecimentos..."
                          @bind="newPostContent"
                          rows="3"></textarea>
                <div class="create-post-actions">
                    <div class="post-options">
                        <button class="post-option">
                            <i class="fas fa-camera"></i>
                            Foto/Vídeo
                        </button>
                        <button class="post-option">
                            <i class="fas fa-poll"></i>
                            Enquete
                        </button>
                        <button class="post-option">
                            <i class="fas fa-lightbulb"></i>
                            Ideia
                        </button>
                    </div>
                    <button class="btn-publish"
                            @onclick="CreatePost"
                            disabled="@(string.IsNullOrWhiteSpace(newPostContent) || isCreatingPost)">
                        @if (isCreatingPost)
                        {
                            <i class="fas fa-spinner fa-spin"></i>
                            <text>Publicando</text>
                        }
                        else
                        {
                            <i class="fas fa-paper-plane"></i>
                            <text>Publicar</text>
                        }
                    </button>
                </div>
            </div>

            <!-- Posts -->
            @if (isLoading)
            {
                <div class="loading-state">
                    <div class="loading-spinner"></div>
                    <h3>Carregando feed...</h3>
                    <p>Aguarde enquanto buscamos as últimas atualizações para você.</p>
                </div>
            }
            else if (posts.Any())
            {
                <div class="posts-container">
                    @foreach (var post in posts)
                    {
                        <div class="post-card">
                            <h4>@post.Title</h4>
                            <p>@post.Content</p>
                            <small>Por @post.AuthorName - @post.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-stream"></i>
                    <h3>Bem-vindo ao SynQcore!</h3>
                    <p>Ainda não há posts no feed. Seja o primeiro a compartilhar algo interessante com a equipe!</p>
                    <button class="btn-create-first" @onclick="ShowCreatePostModal">
                        <i class="fas fa-plus"></i>
                        Criar Primeira Postagem
                    </button>
                </div>
            }
            } <!-- Fecha o else da busca -->
        </div>

        <div class="sidebar-right">
            <h3>Atividades Recentes</h3>
            <p>Conteúdo da sidebar direita</p>
        </div>
    </div>
</div>

@code {
    private UserInfo? currentUser;
    private bool isLocalAuthenticated = false;
    private List<SimplePostCard.PostModel> posts = new();
    private bool isLoading = true;
    private bool isCreatingPost = false;
    private string newPostContent = string.Empty;
    private string newPostTags = string.Empty;
    private bool canModerate = false;

    // Navegação
    private string activeTab = "feed";
    private bool showProfileMenu = false;

    // Pesquisa
    private string searchQuery = string.Empty;
    private string searchFilter = "all";
    private string currentSearchTerm = string.Empty;
    private bool isSearchActive = false;
    private bool isSearching = false;
    private List<SearchResultDto>? searchResults;
    private ElementReference searchInputRef;
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadFeedAsync();
    }

    private async Task LoadFeedAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Verificar autenticação
            isLocalAuthenticated = await LocalAuthService.IsAuthenticatedAsync();

            Console.WriteLine($"[FEED] Status de autenticação verificado - Fluxor: {UserState.Value.IsAuthenticated}, LocalAuth: {isLocalAuthenticated}");

            // Verificar se está autenticado
            if (!UserState.Value.IsAuthenticated && !isLocalAuthenticated)
            {
                Console.WriteLine("[FEED] Usuário não autenticado, redirecionando para login");
                Navigation.NavigateTo("/login", true);
                return;
            }

            Console.WriteLine($"[FEED] Autenticação OK - Fluxor: {UserState.Value.IsAuthenticated}, LocalAuth: {isLocalAuthenticated}");

            // Carregar dados do usuário
            if (UserState.Value.IsAuthenticated && UserState.Value.CurrentUser != null)
            {
                currentUser = UserState.Value.CurrentUser;
            }
            else if (isLocalAuthenticated)
            {
                // Buscar dados do LocalAuth
                currentUser = await LocalAuthService.GetCurrentUserAsync();
            }

            Console.WriteLine($"[FEED] Feed carregado - User: {currentUser?.Nome}");

            // Verificar permissões de moderação
            if (currentUser != null)
            {
                canModerate = await UserPermissionService.CanModerateAsync();
            }

            // Inicializar serviço de notificações se autenticado
            await InitializeNotificationServiceAsync();

            // Carregar posts reais da API
            await LoadPostsFromApiAsync();

            Console.WriteLine($"[FEED] Posts carregados da API - Total: {posts.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[FEED] Erro ao carregar feed: {ex.Message}");
            posts = new List<SimplePostCard.PostModel>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPostsFromApiAsync()
    {
        try
        {
            // Usar o PostService para carregar posts reais da API
            var feedPosts = await PostService.GetFeedPostsAsync(page: 1, pageSize: 20);
            
            if (feedPosts?.Any() == true)
            {
                posts = feedPosts;
                Console.WriteLine($"[FEED] {posts.Count} posts carregados da API com sucesso");
            }
            else
            {
                // Se não há posts, criar uma lista vazia
                posts = new List<SimplePostCard.PostModel>();
                Console.WriteLine("[FEED] Nenhum post encontrado na API - feed vazio");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[FEED] Erro ao carregar posts da API: {ex.Message}");
            // Em caso de erro, manter lista vazia
            posts = new List<SimplePostCard.PostModel>();
        }
    }

    private async Task LoadPostsAsync()
    {
        // Método legacy - redireciona para o novo método da API
        await LoadPostsFromApiAsync();
    }

    private async Task CreatePost()
    {
        if (string.IsNullOrWhiteSpace(newPostContent) || currentUser == null)
            return;

        try
        {
            isCreatingPost = true;
            StateHasChanged();

            // Criar post usando a API real
            var createRequest = new CreatePostRequest
            {
                Content = newPostContent,
                Tags = newPostTags?.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                  .Select(t => t.Trim())
                                  .Where(t => !string.IsNullOrWhiteSpace(t))
                                  .ToArray()
            };

            var newPost = await PostService.CreatePostAsync(createRequest);

            if (newPost != null)
            {
                posts.Insert(0, newPost);
                newPostContent = string.Empty;
                newPostTags = string.Empty;

                Console.WriteLine($"[FEED] Post criado com sucesso via API: {newPost.Content}");
            }
            else
            {
                Console.WriteLine("[FEED] Falha ao criar post via API");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[FEED] Erro ao criar post: {ex.Message}");
        }
        finally
        {
            isCreatingPost = false;
            StateHasChanged();
        }
    }

    private async Task LikePost(Guid postId)
    {
        var post = posts.FirstOrDefault(p => p.Id == postId);
        if (post != null)
        {
            // Chamar API para curtir o post
            var success = await PostService.LikePostAsync(postId);
            
            if (success)
            {
                post.LikeCount++;
                post.IsLiked = true;
                StateHasChanged();
            }
        }
    }

    private async Task ShowComments(Guid postId)
    {
        Console.WriteLine($"[BLAZOR] [FEED] Mostrar comentários do post {postId}");
        await Task.CompletedTask;
    }

    private async Task SharePost(Guid postId)
    {
        Console.WriteLine($"[BLAZOR] [FEED] Compartilhar post {postId}");
        await Task.CompletedTask;
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private void ToggleProfileMenu()
    {
        showProfileMenu = !showProfileMenu;
        StateHasChanged();
    }

    private async Task HandleLogout()
    {
        await LocalAuthService.LogoutAsync();
        Navigation.NavigateTo("/login", true);
    }

    private async Task HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            ClearSearch();
            return;
        }

        currentSearchTerm = searchQuery.Trim();
        isSearchActive = true;
        isSearching = true;
        StateHasChanged();

        Console.WriteLine($"[SEARCH] Pesquisando inline: '{currentSearchTerm}' com filtro: {searchFilter}");

        try
        {
            // Configurar filtros baseados no filtro selecionado
            SearchFiltersDto? filters = null;
            if (searchFilter != "all")
            {
                filters = new SearchFiltersDto
                {
                    ContentTypes = new List<string> { GetContentTypeFromFilter(searchFilter) }
                };
            }

            // Executar busca real via API
            var searchResult = await SearchService.SearchAsync(currentSearchTerm, 1, 20, filters);
            searchResults = searchResult.Items;
            isSearching = false;
            StateHasChanged();

            Console.WriteLine($"[SEARCH] Encontrados {searchResults.Count} resultados para '{currentSearchTerm}'");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[SEARCH] Erro na busca: {ex.Message}");
            searchResults = new List<SearchResultDto>();
            isSearching = false;
            StateHasChanged();
        }
    }

    private string GetContentTypeFromFilter(string filter)
    {
        return filter switch
        {
            "posts" => "Post",
            "people" => "Employee", 
            "documents" => "Document",
            "discussions" => "Discussion",
            _ => "Post"
        };
    }

    private void SetSearchFilter(string filter)
    {
        searchFilter = filter;
        StateHasChanged();
    }

    private void OnFilterAll() => SetSearchFilter("all");
    private void OnFilterPosts() => SetSearchFilter("posts");
    private void OnFilterPeople() => SetSearchFilter("people");

    // Método para inicializar serviço de notificações
    private async Task InitializeNotificationServiceAsync()
    {
        try
        {
            if (isLocalAuthenticated)
            {
                var accessToken = await LocalAuthService.GetAccessTokenAsync();
                if (!string.IsNullOrEmpty(accessToken))
                {
                    await NotificationService.StartAsync(accessToken);
                    Console.WriteLine("[FEED] NotificationService inicializado com sucesso");
                }
                else
                {
                    Console.WriteLine("[FEED] Token de acesso não encontrado para NotificationService");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[FEED] Erro ao inicializar NotificationService: {ex.Message}");
        }
    }

    private async Task ShowMessages()
    {
        Console.WriteLine("[MESSAGES] Abrindo mensagens");
        // TODO: Implementar painel de mensagens
        Console.WriteLine($"[BLAZOR] [FEED] Mostrar mensagens");
        await Task.CompletedTask;
    }

    private void ShowCreatePostModal()
    {
        Console.WriteLine("[BLAZOR] [FEED] Abrir modal de criação de post");
        // TODO: Implementar modal de criação de post
    }

    private void ShowCreateDiscussion()
    {
        Console.WriteLine("[BLAZOR] [FEED] Abrir modal de criação de discussão");
        // TODO: Implementar modal de criação de discussão
    }

    private void ShowCreateEndorsement()
    {
        Console.WriteLine("[BLAZOR] [FEED] Abrir modal de criação de endorsement");
        // TODO: Implementar modal de criação de endorsement
    }

    private void CloseCreatePostModal()
    {
        Console.WriteLine("[BLAZOR] [FEED] Fechar modal de criação de post");
        newPostContent = string.Empty;
        newPostTags = string.Empty;
        StateHasChanged();
    }

    // === MÉTODOS DE BUSCA INLINE ===

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        
        // Debounce - esperar 300ms antes de buscar
        searchTimer?.Dispose();
        searchTimer = new Timer(_ => 
        {
            _ = Task.Run(async () => await PerformDelayedSearch());
        }, null, 300, Timeout.Infinite);
    }

    private async Task PerformDelayedSearch()
    {
        await InvokeAsync(async () =>
        {
            if (!string.IsNullOrWhiteSpace(searchQuery))
            {
                await HandleSearch();
            }
            else
            {
                ClearSearch();
            }
        });
    }

    private void ClearSearch()
    {
        currentSearchTerm = string.Empty;
        searchQuery = string.Empty;
        isSearchActive = false;
        isSearching = false;
        searchResults = null;
        StateHasChanged();
    }

    private string GetCategoryDisplayName(string category)
    {
        return category switch
        {
            "Post" => "Posts",
            "Employee" => "Pessoas", 
            "Document" => "Documentos",
            "Discussion" => "Discussões",
            "MediaAsset" => "Mídia",
            "KnowledgeBase" => "Base de Conhecimento",
            _ => "Outros"
        };
    }

    private string GetCategoryIcon(string category)
    {
        return category switch
        {
            "Post" => "fas fa-comment",
            "Employee" => "fas fa-user",
            "Document" => "fas fa-file-alt", 
            "Discussion" => "fas fa-comments",
            "MediaAsset" => "fas fa-image",
            "KnowledgeBase" => "fas fa-book",
            _ => "fas fa-search"
        };
    }

    private void NavigateToResult(SearchResultDto result)
    {
        // Gerar URL baseada no tipo de conteúdo
        var url = result.Type switch
        {
            "Employee" => $"/profile/{result.Id}",
            "Post" => $"/post/{result.Id}",
            "Document" => $"/document/{result.Id}",
            "Discussion" => $"/discussion/{result.Id}",
            "MediaAsset" => $"/media/{result.Id}",
            "KnowledgeBase" => $"/knowledge/{result.Id}",
            _ => $"/content/{result.Id}"
        };
        
        Navigation.NavigateTo(url);
    }
}
