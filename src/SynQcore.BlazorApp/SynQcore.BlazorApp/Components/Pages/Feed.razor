@page "/feed"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using SynQcore.BlazorApp.Services
@using SynQcore.BlazorApp.Services.StateManagement
@using SynQcore.BlazorApp.Models
@using SynQcore.Application.DTOs
@implements IDisposable
@inject StateManager StateManager
@inject NavigationManager Navigation
@inject IPostService PostService
@inject IAuthService AuthService

<PageTitle>Feed - SynQcore</PageTitle>

<h1>Feed Social Corporativo</h1>

@if (!StateManager.User.IsAuthenticated)
{
    <p>Você precisa estar autenticado para ver o feed.</p>
    <button @onclick="GoToLogin">Fazer Login</button>
}
else
{
    <section>
        <h2>Criar Post</h2>
        <form @onsubmit="CreatePost">
            <div>
                <label>Conteúdo:</label>
                <textarea @bind="newPostContent" rows="4" required></textarea>
            </div>
            <button type="submit" disabled="@isCreating">
                @(isCreating ? "Publicando..." : "Publicar")
            </button>
        </form>
        
        @if (!string.IsNullOrEmpty(createError))
        {
            <p style="color: red;">@createError</p>
        }
    </section>

    <section>
        <h2>Posts Recentes</h2>
        
        @if (isLoading)
        {
            <p>Carregando posts...</p>
        }
        else if (posts == null || !posts.Any())
        {
            <p>Nenhum post encontrado. Seja o primeiro a publicar!</p>
        }
        else
        {
            @foreach (var post in posts)
            {
                <article>
                    <div>
                        <strong>@post.EmployeeName</strong>
                        <span>@post.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                    </div>
                    <p>@post.Content</p>
                    <div>
                        <button @onclick="@(() => ToggleLike(post.Id))">
                            @(post.IsLikedByCurrentUser ? "Descurtir" : "Curtir") (@post.TotalLikes)
                        </button>
                        <button @onclick="@(() => ToggleComments(post.Id))">
                            Comentários (@post.TotalComments)
                        </button>
                    </div>
                    
                    @if (expandedComments.Contains(post.Id))
                    {
                        <div>
                            <h3>Comentários</h3>
                            <form @onsubmit="@(() => AddComment(post.Id))">
                                <input type="text" @bind="commentText" placeholder="Adicionar comentário..." />
                                <button type="submit">Enviar</button>
                            </form>
                            
                            @if (post.Comments != null && post.Comments.Any())
                            {
                                @foreach (var comment in post.Comments)
                                {
                                    <div>
                                        <strong>@comment.EmployeeName</strong>
                                        <span>@comment.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                                        <p>@comment.Content</p>
                                    </div>
                                }
                            }
                        </div>
                    }
                </article>
            }
        }
    </section>
}

@code {
    private List<FeedDto>? posts;
    private bool isLoading = false;
    private bool isCreating = false;
    private string newPostContent = "";
    private string createError = "";
    private string commentText = "";
    private HashSet<Guid> expandedComments = new();

    protected override async Task OnInitializedAsync()
    {
        StateManager.OnChange += StateHasChanged;
        
        if (StateManager.User.IsAuthenticated)
        {
            await LoadPosts();
        }
    }

    private async Task LoadPosts()
    {
        isLoading = true;
        try
        {
            var result = await PostService.GetFeedPostsAsync();
            if (result.Success && result.Data != null)
            {
                posts = result.Data;
            }
        }
        catch (Exception ex)
        {
            createError = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CreatePost()
    {
        if (string.IsNullOrWhiteSpace(newPostContent)) return;
        
        isCreating = true;
        createError = "";
        
        try
        {
            var result = await PostService.CreatePostAsync(newPostContent);
            if (result.Success)
            {
                newPostContent = "";
                await LoadPosts();
            }
            else
            {
                createError = result.Message ?? "Erro ao criar post";
            }
        }
        catch (Exception ex)
        {
            createError = ex.Message;
        }
        finally
        {
            isCreating = false;
        }
    }

    private async Task ToggleLike(Guid postId)
    {
        try
        {
            await PostService.ToggleLikeAsync(postId);
            await LoadPosts();
        }
        catch { }
    }

    private void ToggleComments(Guid postId)
    {
        if (expandedComments.Contains(postId))
        {
            expandedComments.Remove(postId);
        }
        else
        {
            expandedComments.Add(postId);
        }
    }

    private async Task AddComment(Guid postId)
    {
        if (string.IsNullOrWhiteSpace(commentText)) return;
        
        try
        {
            await PostService.AddCommentAsync(postId, commentText);
            commentText = "";
            await LoadPosts();
        }
        catch { }
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        StateManager.OnChange -= StateHasChanged;
    }
}
