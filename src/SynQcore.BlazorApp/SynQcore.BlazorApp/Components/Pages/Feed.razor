@page "/feed"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using SynQcore.BlazorApp.Services
@using SynQcore.BlazorApp.Services.StateManagement
@inject StateManager StateManager
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Feed - SynQcore</PageTitle>

<div class="container">
    @if (!StateManager.User.IsAuthenticated)
    {
        <div class="card">
            <div class="card-body text-center">
                <h1 class="mb-4">Feed Social Corporativo</h1>
                <p class="mb-4">Você precisa estar autenticado para ver o feed.</p>
                <button @onclick="GoToLogin" class="btn btn-primary">Fazer Login</button>
            </div>
        </div>
    }
    else
    {
        <div class="card mb-6">
            <div class="card-header">
                <h2 class="text-xl font-bold">Criar Post</h2>
            </div>
            <div class="card-body">
                <form @onsubmit="CreatePost">
                    <div class="form-group">
                        <label class="form-label">O que você está pensando?</label>
                        <textarea @bind="newPostContent" class="form-textarea" rows="4" placeholder="Compartilhe suas ideias..." required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary" disabled="@isCreating">
                        @(isCreating ? "Publicando..." : "Publicar Post")
                    </button>
                </form>
                
                @if (!string.IsNullOrEmpty(createError))
                {
                    <div class="alert alert-danger mt-4">
                        @createError
                    </div>
                }
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h2 class="text-xl font-bold">Posts Recentes</h2>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="loading">
                        <div class="spinner"></div>
                        <p class="ml-4">Carregando posts...</p>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        <p class="mb-0">Feed social em desenvolvimento. Esta é uma versão simplificada.</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = false;
    private bool isCreating = false;
    private string newPostContent = "";
    private string createError = "";

    protected override void OnInitialized()
    {
        StateManager.User.PropertyChanged += OnUserStateChanged;
    }

    private void OnUserStateChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task CreatePost()
    {
        if (string.IsNullOrWhiteSpace(newPostContent)) return;
        
        isCreating = true;
        createError = "";
        
        try
        {
            // TODO: Implement post creation when service is ready
            await Task.Delay(1000);
            newPostContent = "";
            createError = "Funcionalidade em desenvolvimento";
        }
        catch (Exception ex)
        {
            createError = ex.Message;
        }
        finally
        {
            isCreating = false;
        }
    }

    private void GoToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        StateManager.User.PropertyChanged -= OnUserStateChanged;
    }
}
