@page "/login"
@rendermode InteractiveServer
@using Fluxor
@using SynQcore.BlazorApp.Store.User
@using SynQcore.BlazorApp.Services
@inject IDispatcher Dispatcher
@inject IState<UserState> UserState
@inject IAuthService AuthService
@inject ICookieAuthService CookieAuthService
@inject ILocalAuthService LocalAuthService
@inject NavigationManager Navigation

<PageTitle>Login - SynQcore</PageTitle>

<div class="login-page">
    <div class="login-container">
        <div class="login-content">
            <!-- Lado Esquerdo - Informações da Empresa -->
            <div class="login-info">
                <div class="company-branding">
                    <div class="logo-container">
                        <div class="logo-circle">
                            <i class="fas fa-at logo-icon"></i>
                        </div>
                        <h1>SynQcore</h1>
                    </div>

                    <p class="company-tagline">
                        Conecte-se, colabore e cresça com sua equipe
                    </p>

                    <p class="company-description">
                        A rede social corporativa que transforma a comunicação interna,
                        promove colaboração e constrói conhecimento coletivo.
                    </p>

                    <div class="features-preview">
                        <div class="feature-item">
                            <i class="fas fa-users"></i>
                            <span>Colaboração em Tempo Real</span>
                        </div>
                        <div class="feature-item">
                            <i class="fas fa-brain"></i>
                            <span>Gestão de Conhecimento</span>
                        </div>
                        <div class="feature-item">
                            <i class="fas fa-chart-line"></i>
                            <span>Analytics Avançados</span>
                        </div>
                        <div class="feature-item">
                            <i class="fas fa-shield-alt"></i>
                            <span>Segurança Enterprise</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Lado Direito - Formulário de Login -->
            <div class="login-form-section">
                <div class="login-card">
                    <div class="login-header">
                        <h2>Bem-vindo de volta!</h2>
                        <p class="login-subtitle">Faça login para acessar sua conta</p>
                    </div>

                    <div class="login-form">
                        @* Mensagem de erro *@
                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="fas fa-exclamation-triangle"></i>
                                @ErrorMessage
                            </div>
                        }

                        @* Formulário *@
                        <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                            <div class="form-group">
                                <label for="email" class="form-label">E-mail</label>
                                <div class="input-group">
                                    <i class="fas fa-envelope input-icon"></i>
                                    <input id="email" type="email" @bind="Email" @bind:event="oninput"
                                        class="form-control" placeholder="seu.email@empresa.com" disabled="@IsLoading"
                                        required autocomplete="email" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="password" class="form-label">Senha</label>
                                <div class="input-group">
                                    <i class="fas fa-lock input-icon"></i>
                                    <input id="password" type="@(ShowPassword ? "text" : "password")" @bind="Password"
                                        @bind:event="oninput" class="form-control" placeholder="Digite sua senha"
                                        disabled="@IsLoading" required autocomplete="current-password" />
                                    <button type="button" class="btn-toggle-password"
                                        @onclick="TogglePasswordVisibility" disabled="@IsLoading" tabindex="-1">
                                        <i class="fas @(ShowPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                    </button>
                                </div>
                            </div>

                            <div class="form-options">
                                <div class="form-check">
                                    <input id="rememberMe" type="checkbox" @bind="RememberMe" class="form-check-input"
                                        disabled="@IsLoading" />
                                    <label class="form-check-label" for="rememberMe">
                                        Lembrar-me
                                    </label>
                                </div>
                            </div>

                            <button type="submit" class="btn btn-primary btn-login"
                                disabled="@(IsLoading || !IsFormValid())" @onclick="HandleLogin">
                                @if (IsLoading)
                                {
                                    <div class="btn-loading">
                                        <div class="btn-spinner"></div>
                                        <span>Entrando...</span>
                                    </div>
                                }
                                else
                                {
                                    <i class="fas fa-sign-in-alt"></i>
                                    <span>Entrar</span>
                                }
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string Email = "admin@synqcore.com";
    private string Password = "SynQcore@Admin123!";
    private bool RememberMe = false;
    private bool IsLoading = false;
    private bool ShowPassword = false;
    private string ErrorMessage = string.Empty;

    protected override void OnInitialized()
    {
        // Verificar se já está autenticado
        if (UserState.Value.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
            return;
        }
    }

    private async Task HandleSubmit()
    {
        await HandleLogin();
    }

    private async Task HandleLogin()
    {
        if (!IsFormValid() || IsLoading)
            return;

        IsLoading = true;
        ErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Usar LocalAuthService que não depende de cookies
            var success = await LocalAuthService.LoginAsync(Email, Password);

            if (success)
            {
                // Buscar os dados reais do usuário do LocalAuthService
                var currentUser = await LocalAuthService.GetCurrentUserAsync();

                if (currentUser != null)
                {
                    Console.WriteLine($"[LOGIN] Usuário logado com sucesso: {currentUser.Nome}");

                    // Atualizar o estado do usuário via Fluxor
                    Dispatcher.Dispatch(new UserActions.LoginSuccessAction(
                    currentUser,
                    AccessToken: "token-from-api", // Será sobrescrito pelo token real
                    RefreshToken: null,
                    ExpiresAt: DateTime.UtcNow.AddHours(24)
                    ));

                    Console.WriteLine("[LOGIN] LoginSuccessAction disparado");

                    // Aguardar um pouco para o estado ser processado
                    await Task.Delay(100);
                    StateHasChanged();

                    Console.WriteLine("[LOGIN] Redirecionando para /feed");

                    // Navegação forçada sem wait para evitar problemas com response
                    Navigation.NavigateTo("/feed", forceLoad: true);
                }
                else
                {
                    ErrorMessage = "Erro ao obter dados do usuário após login.";
                }
            }
            else
            {
                ErrorMessage = "Credenciais inválidas. Verifique seu e-mail e senha.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro durante login: {Email}");
            Console.WriteLine($"{ex}");
            ErrorMessage = "Erro interno do sistema. Tente novamente.";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        ShowPassword = !ShowPassword;
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(Email) &&
        !string.IsNullOrWhiteSpace(Password) &&
        Email.Contains("@");
    }
}
