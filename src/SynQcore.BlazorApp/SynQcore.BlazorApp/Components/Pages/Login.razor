@page "/login"
@rendermode InteractiveServer
@using Fluxor
@using SynQcore.BlazorApp.Store.User
@using SynQcore.BlazorApp.Services
@inject IDispatcher Dispatcher
@inject IState<UserState> UserState
@inject IAuthService AuthService
@inject ICookieAuthService CookieAuthService
@inject ILocalAuthService LocalAuthService
@inject NavigationManager Navigation

<PageTitle>Login - SynQcore</PageTitle>

<div class="page-login">
    <div class="page-login__hero">
        <div class="page-login__hero-content">
            <div class="login-logo">
                <i class="fas fa-at"></i>
            </div>
            <h1 class="page-login__hero-title">SynQcore</h1>
            <p class="page-login__hero-tagline">
                Conecte-se, colabore e cresça com sua equipe
            </p>
            <p class="page-login__hero-description">
                A rede social corporativa que transforma a comunicação interna,
                promove colaboração e constrói conhecimento coletivo.
            </p>

            <div class="login-features">
                <div class="login-feature">
                    <i class="fas fa-users"></i>
                    <span>Colaboração em Tempo Real</span>
                </div>
                <div class="login-feature">
                    <i class="fas fa-brain"></i>
                    <span>Gestão de Conhecimento</span>
                </div>
                <div class="login-feature">
                    <i class="fas fa-chart-line"></i>
                    <span>Analytics Avançados</span>
                </div>
                <div class="login-feature">
                    <i class="fas fa-shield-alt"></i>
                    <span>Segurança Enterprise</span>
                </div>
            </div>
        </div>
    </div>

    <div class="page-login__form-section">
        <div class="page-login__form-container">
            <div class="page-login__form-card">
                <div class="page-login__form-card-body">
                    <div class="page-login__form-title">Bem-vindo de volta!</div>
                    <div class="page-login__form-subtitle">Faça login para acessar sua conta</div>

                    @* Mensagem de erro *@
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="login-error-message">
                            <i class="fas fa-exclamation-triangle"></i>
                            @ErrorMessage
                        </div>
                    }

                    @* Formulário *@
                    <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true" class="page-login__form">
                        <div class="page-login__field">
                            <label for="email" class="page-login__label">E-mail</label>
                            <div class="login-input-group">
                                <i class="fas fa-envelope login-input-icon"></i>
                                <input id="email" type="email" @bind="Email" @bind:event="oninput"
                                    class="login-input" placeholder="admin@synqcore.com" disabled="@IsLoading"
                                    required autocomplete="email" />
                            </div>
                        </div>

                        <div class="page-login__field">
                            <label for="password" class="page-login__label">Senha</label>
                            <div class="login-input-group">
                                <i class="fas fa-lock login-input-icon"></i>
                                <input id="password" type="@(ShowPassword ? "text" : "password")" @bind="Password"
                                    @bind:event="oninput" class="login-input" placeholder="Digite sua senha"
                                    disabled="@IsLoading" required autocomplete="current-password" />
                                <button type="button" class="login-toggle-password"
                                    @onclick="TogglePasswordVisibility" disabled="@IsLoading" tabindex="-1">
                                    <i class="fas @(ShowPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                        </div>

                        <div class="login-options">
                            <label class="login-checkbox">
                                <input type="checkbox" @bind="RememberMe" disabled="@IsLoading" />
                                <span class="login-checkbox-text">Lembrar-me</span>
                            </label>
                        </div>

                        <button type="submit" class="login-submit-btn"
                            disabled="@(IsLoading || !IsFormValid())" @onclick="HandleLogin">
                            @if (IsLoading)
                            {
                                <div class="login-btn-loading">
                                    <div class="login-btn-spinner"></div>
                                    <span>Entrando...</span>
                                </div>
                            }
                            else
                            {
                                <i class="fas fa-sign-in-alt"></i>
                                <span>Entrar</span>
                            }
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string Email = "admin@synqcore.com";
    private string Password = "SynQcore@Admin123!";
    private bool RememberMe = false;
    private bool IsLoading = false;
    private bool ShowPassword = false;
    private string ErrorMessage = string.Empty;

    protected override void OnInitialized()
    {
        // Verificar se já está autenticado
        if (UserState.Value.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
            return;
        }
    }

    private async Task HandleSubmit()
    {
        await HandleLogin();
    }

    private async Task HandleLogin()
    {
        if (!IsFormValid() || IsLoading)
            return;

        IsLoading = true;
        ErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Usar LocalAuthService que não depende de cookies
            var success = await LocalAuthService.LoginAsync(Email, Password);

            if (success)
            {
                // Buscar os dados reais do usuário do LocalAuthService
                var currentUser = await LocalAuthService.GetCurrentUserAsync();

                if (currentUser != null)
                {
                    // Atualizar o estado do usuário via Fluxor
                    Dispatcher.Dispatch(new UserActions.LoginSuccessAction(
                    currentUser,
                    AccessToken: "token-from-api", // Será sobrescrito pelo token real
                    RefreshToken: null,
                    ExpiresAt: DateTime.UtcNow.AddHours(24)
                    ));

                    // Aguardar processamento no Windows
                    await Task.Delay(500);
                    StateHasChanged();

                    // Redirecionar para o Feed após login bem-sucedido
                    try
                    {
                        Navigation.NavigateTo("/feed");
                    }
                    catch (Exception)
                    {
                        Navigation.NavigateTo("/feed", forceLoad: true);
                    }
                }
                else
                {
                    ErrorMessage = "Erro ao obter dados do usuário após login.";
                }
            }
            else
            {
                ErrorMessage = "Credenciais inválidas. Verifique seu e-mail e senha.";
            }
        }
        catch (Exception)
        {
            ErrorMessage = "Erro interno do sistema. Tente novamente.";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        ShowPassword = !ShowPassword;
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(Email) &&
        !string.IsNullOrWhiteSpace(Password) &&
        Email.Contains("@");
    }
}
