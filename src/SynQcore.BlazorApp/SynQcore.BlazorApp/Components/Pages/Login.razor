@page "/login"
@using SynQcore.BlazorApp.Services.StateManagement
@using SynQcore.BlazorApp.Services
@inject StateManager StateManager
@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject ILocalAuthService LocalAuthService
@layout Components.Layout.MainLayout

<PageTitle>Login - SynQcore</PageTitle>

<h1>Login - SynQcore</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

<form @onsubmit="HandleLogin">
    <div>
        <label>Email:</label>
        <input type="email" @bind="email" required />
    </div>
    
    <div>
        <label>Senha:</label>
        <input type="password" @bind="password" required />
    </div>
    
    <div>
        <label>
            <input type="checkbox" @bind="rememberMe" />
            Lembrar-me
        </label>
    </div>
    
    <button type="submit" disabled="@isLoading">
        @(isLoading ? "Entrando..." : "Entrar")
    </button>
</form>

<p>Credenciais padr√£o:</p>
<ul>
    <li>Email: admin@synqcore.com</li>
    <li>Senha: SynQcore@Admin123!</li>
</ul>

@code {
    private string email = "admin@synqcore.com";
    private string password = "SynQcore@Admin123!";
    private bool rememberMe = true;
    private bool isLoading = false;
    private string errorMessage = "";

    protected override void OnInitialized()
    {
        if (StateManager.User.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = "";
        
        try
        {
            var result = await AuthService.LoginAsync(email, password, rememberMe);
            
            if (result.Success)
            {
                await LocalAuthService.SaveTokenAsync(result.Data!.Token);
                StateManager.SetUser(result.Data.User);
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = result.Message ?? "Erro ao fazer login";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
}
