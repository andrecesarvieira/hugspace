@page "/dashboard"
@rendermode InteractiveServer
@using Fluxor
@using SynQcore.BlazorApp.Store.User
@using SynQcore.BlazorApp.Services
@using SynQcore.BlazorApp.Models
@inject IState<UserState> UserState
@inject ILocalAuthService LocalAuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IEmployeeService EmployeeService
@inject IPlatformStatsService PlatformStatsService

<link href="~/css/dashboard.css" rel="stylesheet" />

<div class="dashboard-page">
    <!-- Header do Dashboard -->
    <div class="dashboard-header">
        <div class="header-content">
            <div class="welcome-section">
                <h1>
                    <i class="fas fa-tachometer-alt"></i>
                    Dashboard Corporativo
                </h1>
                <p class="welcome-message">
                    Bem-vindo ao SynQcore, @currentUser?.Nome
                </p>
                <p class="current-time">
                    @DateTime.Now.ToString("dddd, dd 'de' MMMM 'de' yyyy - HH:mm", new System.Globalization.CultureInfo("pt-BR"))
                </p>
            </div>
            <div class="quick-actions">
                <button class="quick-action-btn" @onclick="NavigateToSearch">
                    <i class="fas fa-search"></i>
                    <span>Buscar</span>
                </button>
                <button class="quick-action-btn" @onclick="NavigateToEmployees">
                    <i class="fas fa-users"></i>
                    <span>Funcionários</span>
                </button>
                <button class="quick-action-btn" @onclick="NavigateToKnowledge">
                    <i class="fas fa-brain"></i>
                    <span>Conhecimento</span>
                </button>
                <button class="quick-action-btn" @onclick="NavigateToFeed">
                    <i class="fas fa-stream"></i>
                    <span>Feed</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Grid Principal do Dashboard -->
    <div class="dashboard-grid">
        <!-- Estatísticas Principais -->
        <div class="stats-section">
            <h2 class="section-title">
                <i class="fas fa-chart-bar"></i>
                Estatísticas da Plataforma
            </h2>
            <div class="stats-grid">
                <div class="stat-card employees">
                    <div class="stat-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number">@(platformStats?.TotalEmployees ?? 0)</div>
                        <div class="stat-label">Funcionários</div>
                        <div class="stat-trend positive">
                            <i class="fas fa-arrow-up"></i>
                            +12% este mês
                        </div>
                    </div>
                </div>

                <div class="stat-card knowledge">
                    <div class="stat-icon">
                        <i class="fas fa-brain"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number">@(platformStats?.TotalDocuments ?? 0)</div>
                        <div class="stat-label">Documentos</div>
                        <div class="stat-trend positive">
                            <i class="fas fa-arrow-up"></i>
                            +25% este mês
                        </div>
                    </div>
                </div>

                <div class="stat-card discussions">
                    <div class="stat-icon">
                        <i class="fas fa-comments"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number">@(platformStats?.TotalPosts ?? 0)</div>
                        <div class="stat-label">Posts Ativos</div>
                        <div class="stat-trend positive">
                            <i class="fas fa-arrow-up"></i>
                            +8% este mês
                        </div>
                    </div>
                </div>

                <div class="stat-card endorsements">
                    <div class="stat-icon">
                        <i class="fas fa-award"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number">@(platformStats?.TotalComments ?? 0)</div>
                        <div class="stat-label">Comentários</div>
                        <div class="stat-trend positive">
                            <i class="fas fa-arrow-up"></i>
                            +18% este mês
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Funcionários Recentes -->
        <div class="recent-employees-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-user-plus"></i>
                    Funcionários Recentes
                </h2>
                <button class="view-all-btn" @onclick="NavigateToEmployees">
                    Ver todos
                    <i class="fas fa-arrow-right"></i>
                </button>
            </div>
            <div class="employees-list">
                @if (recentEmployees?.Any() == true)
                {
                    @foreach (var employee in recentEmployees.Take(5))
                    {
                        <div class="employee-item" @onclick="@(() => ViewEmployee(employee.Id))">
                            <div class="employee-avatar">
                                @if (!string.IsNullOrEmpty(employee.Avatar))
                                {
                                    <img src="@employee.Avatar" alt="@employee.FullName" />
                                }
                                else
                                {
                                    <div class="avatar-placeholder">
                                        @employee.FirstName.First()
                                    </div>
                                }
                            </div>
                            <div class="employee-info">
                                <div class="employee-name">@employee.FullName</div>
                                <div class="employee-title">@employee.Email</div>
                                <div class="employee-department">
                                    @if (employee.Departments.Any())
                                    {
                                        @employee.Departments.First().Name
                                    }
                                </div>
                            </div>
                            <div class="employee-badge">
                                <span class="badge new">Novo</span>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-users"></i>
                        <p>Nenhum funcionário recente</p>
                    </div>
                }
            </div>
        </div>

        <!-- Atividades Recentes -->
        <div class="recent-activities-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-clock"></i>
                    Atividades Recentes
                </h2>
                <button class="view-all-btn" @onclick="NavigateToFeed">
                    Ver feed completo
                    <i class="fas fa-arrow-right"></i>
                </button>
            </div>
            <div class="activities-list">
                @if (recentActivities?.Any() == true)
                {
                    @foreach (var activity in recentActivities.Take(8))
                    {
                        <div class="activity-item">
                            <div class="activity-icon @activity.Type.ToLowerInvariant()">
                                <i class="fas @GetActivityIcon(activity.Type)"></i>
                            </div>
                            <div class="activity-content">
                                <div class="activity-text">@activity.Description</div>
                                <div class="activity-time">@activity.TimeAgo</div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-clock"></i>
                        <p>Nenhuma atividade recente</p>
                    </div>
                }
            </div>
        </div>

        <!-- Departamentos -->
        <div class="departments-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-building"></i>
                    Departamentos
                </h2>
                <button class="view-all-btn" @onclick="NavigateToOrganization">
                    Ver organograma
                    <i class="fas fa-arrow-right"></i>
                </button>
            </div>
            <div class="departments-grid">
                @if (departments?.Any() == true)
                {
                    @foreach (var dept in departments.Take(6))
                    {
                        <div class="department-card" @onclick="@(() => ViewDepartment(dept.Id))">
                            <div class="department-icon">
                                <i class="fas @GetDepartmentIcon(dept.Name)"></i>
                            </div>
                            <div class="department-info">
                                <div class="department-name">@dept.Name</div>
                                <div class="department-stats">
                                    <span class="employee-count">
                                        @dept.EmployeeCount funcionários
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-building"></i>
                        <p>Nenhum departamento configurado</p>
                    </div>
                }
            </div>
        </div>

        <!-- Métricas de Performance -->
        <div class="performance-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-chart-line"></i>
                    Performance da Plataforma
                </h2>
            </div>
            <div class="performance-metrics">
                <div class="metric-item">
                    <div class="metric-label">Engajamento Médio</div>
                    <div class="metric-value">87%</div>
                    <div class="metric-bar">
                        <div class="metric-progress" style="width: 87%"></div>
                    </div>
                </div>
                <div class="metric-item">
                    <div class="metric-label">Satisfação dos Usuários</div>
                    <div class="metric-value">92%</div>
                    <div class="metric-bar">
                        <div class="metric-progress" style="width: 92%"></div>
                    </div>
                </div>
                <div class="metric-item">
                    <div class="metric-label">Tempo Médio na Plataforma</div>
                    <div class="metric-value">45min</div>
                    <div class="metric-bar">
                        <div class="metric-progress" style="width: 75%"></div>
                    </div>
                </div>
                <div class="metric-item">
                    <div class="metric-label">Colaboração Ativa</div>
                    <div class="metric-value">78%</div>
                    <div class="metric-bar">
                        <div class="metric-progress" style="width: 78%"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Links Rápidos -->
        <div class="quick-links-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-external-link-alt"></i>
                    Links Rápidos
                </h2>
            </div>
            <div class="quick-links-grid">
                <a href="/employees" class="quick-link-card">
                    <i class="fas fa-users"></i>
                    <span>Gestão de Funcionários</span>
                </a>
                <a href="/knowledge" class="quick-link-card">
                    <i class="fas fa-book"></i>
                    <span>Base de Conhecimento</span>
                </a>
                <a href="/endorsements" class="quick-link-card">
                    <i class="fas fa-award"></i>
                    <span>Endorsements</span>
                </a>
                <a href="/search" class="quick-link-card">
                    <i class="fas fa-search"></i>
                    <span>Busca Avançada</span>
                </a>
                <a href="/profile" class="quick-link-card">
                    <i class="fas fa-user-cog"></i>
                    <span>Configurações</span>
                </a>
                <a href="/help" class="quick-link-card">
                    <i class="fas fa-question-circle"></i>
                    <span>Ajuda e Suporte</span>
                </a>
            </div>
        </div>
    </div>
</div>

@code {
    private UserInfo? currentUser;
    private PlatformStatsDto? platformStats;
    private List<EmployeeDto>? recentEmployees;
    private List<ActivityDto>? recentActivities;
    private List<DepartmentDto>? departments;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Carregar usuário atual
            currentUser = UserState.Value.CurrentUser;

            // Carregar estatísticas da plataforma
            platformStats = await PlatformStatsService.GetPlatformStatsAsync();

            // Carregar funcionários recentes (mock data por enquanto)
            var employeeSearchRequest = new EmployeeSearchRequest
            {
                Page = 1,
                PageSize = 10,
                SortBy = "CreatedAt",
                SortDescending = true
            };
            var employeesResult = await EmployeeService.GetEmployeesAsync(employeeSearchRequest);
            recentEmployees = employeesResult.Items;

            // Carregar atividades recentes (mock data)
            recentActivities = GetMockActivities();

            // Carregar departamentos (mock data)
            departments = GetMockDepartments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados do dashboard: {ex.Message}");
        }
    }

    private List<ActivityDto> GetMockActivities()
    {
        return new List<ActivityDto>
        {
            new ActivityDto
            {
                Id = Guid.NewGuid(),
                Type = "Knowledge",
                Description = "João Silva criou um novo artigo sobre 'Boas Práticas de Desenvolvimento'",
                TimeAgo = "5 minutos atrás"
            },
            new ActivityDto
            {
                Id = Guid.NewGuid(),
                Type = "Endorsement",
                Description = "Maria Santos recebeu um endorsement em 'Gestão de Projetos'",
                TimeAgo = "15 minutos atrás"
            },
            new ActivityDto
            {
                Id = Guid.NewGuid(),
                Type = "Discussion",
                Description = "Carlos Oliveira iniciou uma discussão sobre 'Metodologias Ágeis'",
                TimeAgo = "30 minutos atrás"
            },
            new ActivityDto
            {
                Id = Guid.NewGuid(),
                Type = "Employee",
                Description = "Ana Costa foi adicionada ao departamento de Marketing",
                TimeAgo = "1 hora atrás"
            }
        };
    }

    private List<DepartmentDto> GetMockDepartments()
    {
        return new List<DepartmentDto>
        {
            new DepartmentDto { Id = Guid.NewGuid(), Name = "Desenvolvimento", EmployeeCount = 25 },
            new DepartmentDto { Id = Guid.NewGuid(), Name = "Marketing", EmployeeCount = 12 },
            new DepartmentDto { Id = Guid.NewGuid(), Name = "Recursos Humanos", EmployeeCount = 8 },
            new DepartmentDto { Id = Guid.NewGuid(), Name = "Vendas", EmployeeCount = 18 },
            new DepartmentDto { Id = Guid.NewGuid(), Name = "Suporte", EmployeeCount = 15 },
            new DepartmentDto { Id = Guid.NewGuid(), Name = "Financeiro", EmployeeCount = 10 }
        };
    }

    private string GetActivityIcon(string type)
    {
        return type.ToLowerInvariant() switch
        {
            "knowledge" => "fa-brain",
            "endorsement" => "fa-award",
            "discussion" => "fa-comments",
            "employee" => "fa-user-plus",
            "document" => "fa-file-alt",
            _ => "fa-info-circle"
        };
    }

    private string GetDepartmentIcon(string departmentName)
    {
        return departmentName.ToLowerInvariant() switch
        {
            "desenvolvimento" => "fa-code",
            "marketing" => "fa-bullhorn",
            "recursos humanos" => "fa-user-tie",
            "vendas" => "fa-chart-line",
            "suporte" => "fa-headset",
            "financeiro" => "fa-calculator",
            _ => "fa-building"
        };
    }

    // Navegação
    private void NavigateToSearch() => Navigation.NavigateTo("/search");
    private void NavigateToEmployees() => Navigation.NavigateTo("/employees");
    private void NavigateToKnowledge() => Navigation.NavigateTo("/knowledge");
    private void NavigateToFeed() => Navigation.NavigateTo("/feed");
    private void NavigateToOrganization() => Navigation.NavigateTo("/organization");
    private void ViewEmployee(Guid id) => Navigation.NavigateTo($"/employees/{id}");
    private void ViewDepartment(Guid id) => Navigation.NavigateTo($"/departments/{id}");

    // Models
    public class ActivityDto
    {
        public Guid Id { get; set; }
        public string Type { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string TimeAgo { get; set; } = string.Empty;
    }

    public class DepartmentDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int EmployeeCount { get; set; }
    }
}