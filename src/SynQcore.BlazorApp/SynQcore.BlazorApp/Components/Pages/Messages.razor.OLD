@page "/mensagens"
@namespace SynQcore.BlazorApp.Components.Pages
@using Microsoft.AspNetCore.Components
@rendermode InteractiveServer

<div class="messages-container">
    <!-- Header -->
    <div class="messages-header">
        <div class="header-content">
            <div class="logo-section">
                <h1>SynQcore</h1>
            </div>
            <div class="nav-section">
                <a href="/feed" class="nav-link">Feed</a>
                <a href="/perfil" class="nav-link">Perfil</a>
                <a href="/mensagens" class="nav-link active">Mensagens</a>
            </div>
        </div>
    </div>

    <!-- Messages Content -->
    <div class="main-content">
        <div class="messages-layout">
            <!-- Sidebar de conversas -->
            <div class="conversations-sidebar">
                <div class="search-section">
                    <input type="text" placeholder="Buscar conversas..." class="search-input" />
                </div>

                <div class="conversations-list">
                    @foreach (var conversation in mockConversations)
                    {
                        <div class="conversation-item @(selectedConversation?.Id == conversation.Id ? "selected" : "")"
                             @onclick="() => SelectConversation(conversation)">
                            <img src="@conversation.Avatar" alt="@conversation.Name" class="conversation-avatar" />
                            <div class="conversation-info">
                                <div class="conversation-name">@conversation.Name</div>
                                <div class="conversation-preview">@conversation.LastMessage</div>
                                <div class="conversation-time">@GetRelativeTime(conversation.LastMessageTime)</div>
                            </div>
                            @if (conversation.UnreadCount > 0)
                            {
                                <div class="unread-badge">@conversation.UnreadCount</div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Área de chat -->
            <div class="chat-area">
                @if (selectedConversation != null)
                {
                    <!-- Header do chat -->
                    <div class="chat-header">
                        <img src="@selectedConversation.Avatar" alt="@selectedConversation.Name" class="chat-avatar" />
                        <div class="chat-user-info">
                            <div class="chat-user-name">@selectedConversation.Name</div>
                            <div class="chat-user-status">@selectedConversation.Status</div>
                        </div>
                    </div>

                    <!-- Mensagens -->
                    <div class="messages-list">
                        @foreach (var message in selectedConversation.Messages)
                        {
                            <div class="message @(message.IsFromMe ? "message-sent" : "message-received")">
                                @if (!message.IsFromMe)
                                {
                                    <img src="@selectedConversation.Avatar" alt="@selectedConversation.Name" class="message-avatar" />
                                }
                                <div class="message-content">
                                    <div class="message-text">@message.Text</div>
                                    <div class="message-time">@GetRelativeTime(message.SentAt)</div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Input de nova mensagem -->
                    <div class="message-input-area">
                        <div class="message-input-container">
                            <input type="text" @bind="newMessageText" @onkeypress="HandleKeyPress"
                                   placeholder="Digite sua mensagem..." class="message-input" />
                            <button @onclick="SendMessage" class="send-button" disabled="@string.IsNullOrWhiteSpace(newMessageText)">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="no-conversation">
                        <div class="no-conversation-content">
                            <i class="fas fa-comments"></i>
                            <h3>Selecione uma conversa</h3>
                            <p>Escolha uma conversa para começar a trocar mensagens</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Conversation> mockConversations = new();
    private Conversation? selectedConversation;
    private string newMessageText = "";

    protected override void OnInitialized()
    {
        LoadMockConversations();
    }

    private void LoadMockConversations()
    {
        mockConversations = new List<Conversation>
        {
            new Conversation
            {
                Id = "1",
                Name = "João Silva",
                Avatar = "/images/default-avatar.png",
                LastMessage = "Ótimo trabalho na apresentação!",
                LastMessageTime = DateTime.Now.AddMinutes(-5),
                UnreadCount = 2,
                Status = "Online",
                Messages = new List<Message>
                {
                    new Message { Text = "Oi! Como foi a reunião?", IsFromMe = false, SentAt = DateTime.Now.AddHours(-1) },
                    new Message { Text = "Foi muito boa! Conseguimos aprovar o projeto.", IsFromMe = true, SentAt = DateTime.Now.AddMinutes(-50) },
                    new Message { Text = "Que ótima notícia!", IsFromMe = false, SentAt = DateTime.Now.AddMinutes(-45) },
                    new Message { Text = "Ótimo trabalho na apresentação!", IsFromMe = false, SentAt = DateTime.Now.AddMinutes(-5) }
                }
            },
            new Conversation
            {
                Id = "2",
                Name = "Maria Santos",
                Avatar = "/images/default-avatar.png",
                LastMessage = "Vamos alinhar os próximos passos",
                LastMessageTime = DateTime.Now.AddHours(-2),
                UnreadCount = 0,
                Status = "Ausente",
                Messages = new List<Message>
                {
                    new Message { Text = "Podemos conversar sobre o sprint?", IsFromMe = false, SentAt = DateTime.Now.AddHours(-3) },
                    new Message { Text = "Claro! Qual sua disponibilidade?", IsFromMe = true, SentAt = DateTime.Now.AddHours(-2.5) },
                    new Message { Text = "Vamos alinhar os próximos passos", IsFromMe = false, SentAt = DateTime.Now.AddHours(-2) }
                }
            },
            new Conversation
            {
                Id = "3",
                Name = "Carlos Oliveira",
                Avatar = "/images/default-avatar.png",
                LastMessage = "Documentação atualizada!",
                LastMessageTime = DateTime.Now.AddDays(-1),
                UnreadCount = 0,
                Status = "Offline",
                Messages = new List<Message>
                {
                    new Message { Text = "Conseguiu revisar a documentação?", IsFromMe = true, SentAt = DateTime.Now.AddDays(-1).AddHours(-1) },
                    new Message { Text = "Documentação atualizada!", IsFromMe = false, SentAt = DateTime.Now.AddDays(-1) }
                }
            }
        };
    }

    private void SelectConversation(Conversation conversation)
    {
        selectedConversation = conversation;
        conversation.UnreadCount = 0; // Marca como lida
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessageText) || selectedConversation == null)
            return;

        var newMessage = new Message
        {
            Text = newMessageText,
            IsFromMe = true,
            SentAt = DateTime.Now
        };

        selectedConversation.Messages.Add(newMessage);
        selectedConversation.LastMessage = newMessageText;
        selectedConversation.LastMessageTime = DateTime.Now;

        newMessageText = "";
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var diff = DateTime.Now - dateTime;
        if (diff.TotalDays >= 1) return $"{(int)diff.TotalDays}d";
        if (diff.TotalHours >= 1) return $"{(int)diff.TotalHours}h";
        return $"{(int)diff.TotalMinutes}m";
    }

    public class Conversation
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string Avatar { get; set; } = "";
        public string LastMessage { get; set; } = "";
        public DateTime LastMessageTime { get; set; }
        public int UnreadCount { get; set; }
        public string Status { get; set; } = "";
        public List<Message> Messages { get; set; } = new();
    }

    public class Message
    {
        public string Text { get; set; } = "";
        public bool IsFromMe { get; set; }
        public DateTime SentAt { get; set; }
    }
}

<style>
    .messages-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .messages-header {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        padding: 1rem 0;
        position: sticky;
        top: 0;
        z-index: 100;
    }

    .header-content {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0 1rem;
    }

    .logo-section h1 {
        color: #667eea;
        margin: 0;
        font-size: 1.8rem;
        font-weight: 700;
    }

    .nav-section {
        display: flex;
        gap: 2rem;
    }

    .nav-link {
        text-decoration: none;
        color: #666;
        font-weight: 500;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        transition: all 0.3s ease;
    }

    .nav-link:hover,
    .nav-link.active {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
    }

    .main-content {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
        height: calc(100vh - 100px);
    }

    .messages-layout {
        display: grid;
        grid-template-columns: 350px 1fr;
        gap: 1rem;
        height: 100%;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        overflow: hidden;
    }

    .conversations-sidebar {
        border-right: 1px solid #e2e8f0;
        display: flex;
        flex-direction: column;
    }

    .search-section {
        padding: 1rem;
        border-bottom: 1px solid #e2e8f0;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 20px;
        outline: none;
        font-size: 0.875rem;
    }

    .conversations-list {
        flex: 1;
        overflow-y: auto;
    }

    .conversation-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 1rem;
        cursor: pointer;
        border-bottom: 1px solid #f7fafc;
        transition: background-color 0.2s;
        position: relative;
    }

    .conversation-item:hover,
    .conversation-item.selected {
        background: #f7fafc;
    }

    .conversation-avatar {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        object-fit: cover;
    }

    .conversation-info {
        flex: 1;
        min-width: 0;
    }

    .conversation-name {
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.25rem;
    }

    .conversation-preview {
        color: #718096;
        font-size: 0.875rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .conversation-time {
        color: #a0aec0;
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }

    .unread-badge {
        background: #667eea;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .chat-area {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .chat-header {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 1rem;
        border-bottom: 1px solid #e2e8f0;
        background: #f7fafc;
    }

    .chat-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }

    .chat-user-name {
        font-weight: 600;
        color: #2d3748;
    }

    .chat-user-status {
        color: #718096;
        font-size: 0.875rem;
    }

    .messages-list {
        flex: 1;
        padding: 1rem;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .message {
        display: flex;
        gap: 0.5rem;
        max-width: 70%;
    }

    .message-sent {
        align-self: flex-end;
        flex-direction: row-reverse;
    }

    .message-received {
        align-self: flex-start;
    }

    .message-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
    }

    .message-content {
        background: #f7fafc;
        padding: 0.75rem;
        border-radius: 1rem;
        max-width: 100%;
    }

    .message-sent .message-content {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
    }

    .message-text {
        margin-bottom: 0.25rem;
        word-wrap: break-word;
    }

    .message-time {
        font-size: 0.75rem;
        opacity: 0.7;
    }

    .message-input-area {
        padding: 1rem;
        border-top: 1px solid #e2e8f0;
        background: #f7fafc;
    }

    .message-input-container {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .message-input {
        flex: 1;
        padding: 0.75rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 25px;
        outline: none;
        font-size: 0.875rem;
    }

    .send-button {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: opacity 0.2s;
    }

    .send-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .no-conversation {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        color: #718096;
    }

    .no-conversation-content {
        text-align: center;
    }

    .no-conversation-content i {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.3;
    }

    .no-conversation-content h3 {
        margin: 0 0 0.5rem 0;
        color: #4a5568;
    }

    @@media (max-width: 768px) {
        .messages-layout {
            grid-template-columns: 1fr;
        }

        .conversations-sidebar {
            display: none;
        }
    }
</style>
