@page "/admin/employees"
@attribute [Authorize(Roles = "Admin,Manager,HR")]
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.AspNetCore.Authorization
@using SynQcore.BlazorApp.Services
@inject IEmployeeService EmployeeService
@inject IDepartmentService DepartmentService
@inject NavigationManager Navigation
@inject ILogger<EmployeeDirectory> Logger

<PageTitle>Diretório de Funcionários - Admin</PageTitle>

<div class="container">
    <div class="admin-header mb-6">
        <h1 class="text-2xl font-bold">Diretório de Funcionários</h1>
        <p class="text-muted">Gerencie colaboradores, visualize organograma e analise métricas da equipe</p>
    </div>

    <div class="admin-layout">
        <!-- Filtros Laterais -->
        <aside class="admin-sidebar">
            <div class="card">
                <div class="card-header">
                    <h3 class="font-bold">Filtros</h3>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label class="form-label">Buscar</label>
                        <input type="text" 
                               @bind="searchTerm" 
                               @bind:event="oninput"
                               @onkeyup="OnSearchChanged"
                               class="form-input" 
                               placeholder="Nome, cargo, departamento..." />
                    </div>

                    <div class="form-group">
                        <label class="form-label">Departamento</label>
                        <select @bind="selectedDepartmentId" class="form-select">
                            <option value="">Todos</option>
                            @foreach (var dept in departments)
                            {
                                <option value="@dept.Id">@dept.Name</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Status</label>
                        <div class="checkbox-group">
                            <label class="checkbox-label">
                                <input type="checkbox" @bind="showActiveOnly" />
                                <span>Apenas Ativos</span>
                            </label>
                        </div>
                    </div>

                    <button @onclick="() => { ClearFilters(); }" class="btn btn-secondary w-full">
                        Limpar Filtros
                    </button>
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-header">
                    <h3 class="font-bold">Estatísticas</h3>
                </div>
                <div class="card-body">
                    <div class="stat-item mb-3">
                        <div class="stat-label">Total de Funcionários</div>
                        <div class="stat-value">@totalEmployees</div>
                    </div>
                    <div class="stat-item mb-3">
                        <div class="stat-label">Ativos</div>
                        <div class="stat-value text-success">@activeEmployees</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">Departamentos</div>
                        <div class="stat-value">@departments.Count</div>
                    </div>
                </div>
            </div>
        </aside>

        <!-- Conteúdo Principal -->
        <main class="admin-main">
            <div class="card">
                <div class="card-header flex justify-between items-center">
                    <h2 class="font-bold">Colaboradores</h2>
                    <div class="actions">
                        <button @onclick="ToggleView" class="btn btn-secondary mr-2">
                            @(showGrid ? "Visualizar Lista" : "Visualizar Grid")
                        </button>
                        <button @onclick="NavigateToCreate" class="btn btn-primary">
                            + Novo Funcionário
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="loading">
                            <div class="spinner"></div>
                            <p class="ml-4">Carregando funcionários...</p>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            <p class="mb-2"><strong>Erro ao carregar funcionários:</strong></p>
                            <p class="mb-0">@errorMessage</p>
                            <button @onclick="LoadEmployees" class="btn btn-secondary mt-3">Tentar Novamente</button>
                        </div>
                    }
                    else if (employees.Count == 0)
                    {
                        <div class="alert alert-info">
                            <p class="mb-0">Nenhum funcionário encontrado com os filtros aplicados.</p>
                        </div>
                    }
                    else
                    {
                        @if (showGrid)
                        {
                            <div class="employee-directory-grid">
                                @foreach (var employee in employees)
                                {
                                    <div class="employee-card-admin">
                                        <div class="employee-card-header">
                                            <div class="employee-avatar">
                                                @if (!string.IsNullOrEmpty(employee.Avatar))
                                                {
                                                    <img src="@employee.Avatar" alt="@employee.FullName" />
                                                }
                                                else
                                                {
                                                    <span class="avatar-placeholder">@GetInitials(employee.FullName)</span>
                                                }
                                            </div>
                                            @if (employee.IsActive)
                                            {
                                                <span class="badge badge-success">Ativo</span>
                                            }
                                            else
                                            {
                                                <span class="badge badge-secondary">Inativo</span>
                                            }
                                        </div>
                                        <div class="employee-card-body">
                                            <h3 class="employee-name">@employee.FullName</h3>
                                            <p class="employee-department">@GetDepartmentName(employee)</p>
                                            @if (!string.IsNullOrEmpty(employee.Email))
                                            {
                                                <p class="employee-email">@employee.Email</p>
                                            }
                                        </div>
                                        <div class="employee-card-footer">
                                            <button @onclick="() => ViewEmployee(employee.Id)" class="btn btn-sm btn-secondary">
                                                Ver Perfil
                                            </button>
                                            <button @onclick="() => EditEmployee(employee.Id)" class="btn btn-sm btn-primary">
                                                Editar
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Nome</th>
                                            <th>Departamento</th>
                                            <th>Email</th>
                                            <th>Status</th>
                                            <th>Ações</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var employee in employees)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="flex items-center">
                                                        <div class="employee-avatar-sm mr-2">
                                                            @if (!string.IsNullOrEmpty(employee.Avatar))
                                                            {
                                                                <img src="@employee.Avatar" alt="@employee.FullName" />
                                                            }
                                                            else
                                                            {
                                                                <span class="avatar-placeholder">@GetInitials(employee.FullName)</span>
                                                            }
                                                        </div>
                                                        @employee.FullName
                                                    </div>
                                                </td>
                                                <td>@GetDepartmentName(employee)</td>
                                                <td>@employee.Email</td>
                                                <td>
                                                    @if (employee.IsActive)
                                                    {
                                                        <span class="badge badge-success">Ativo</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge badge-secondary">Inativo</span>
                                                    }
                                                </td>
                                                <td>
                                                    <button @onclick="() => ViewEmployee(employee.Id)" class="btn btn-sm btn-secondary mr-1">
                                                        Ver
                                                    </button>
                                                    <button @onclick="() => EditEmployee(employee.Id)" class="btn btn-sm btn-primary">
                                                        Editar
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }

                        <!-- Paginação -->
                        @if (totalPages > 1)
                        {
                            <div class="pagination mt-4">
                                <button @onclick="PreviousPage" 
                                        disabled="@(currentPage <= 1)" 
                                        class="btn btn-secondary">
                                    Anterior
                                </button>
                                <span class="pagination-info">
                                    Página @currentPage de @totalPages (@totalEmployees funcionários)
                                </span>
                                <button @onclick="NextPage" 
                                        disabled="@(currentPage >= totalPages)" 
                                        class="btn btn-secondary">
                                    Próxima
                                </button>
                            </div>
                        }
                    }
                </div>
            </div>
        </main>
    </div>
</div>

@code {
    private List<EmployeeDto> employees = new();
    private List<EmployeeDepartmentDto> departments = new();
    private bool isLoading = false;
    private string errorMessage = "";
    private string searchTerm = "";
    private string selectedDepartmentId = "";
    private bool showActiveOnly = false;
    private bool showGrid = true;
    
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalEmployees = 0;
    private int activeEmployees = 0;
    private int totalPages = 0;
    
    private System.Timers.Timer? searchDebounceTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
        await LoadEmployees();
    }

    private async Task LoadDepartments()
    {
        try
        {
            // Placeholder - implementar quando DepartmentService estiver completo
            departments = new List<EmployeeDepartmentDto>
            {
                new EmployeeDepartmentDto { Id = Guid.NewGuid(), Name = "Tecnologia" },
                new EmployeeDepartmentDto { Id = Guid.NewGuid(), Name = "Recursos Humanos" },
                new EmployeeDepartmentDto { Id = Guid.NewGuid(), Name = "Marketing" },
                new EmployeeDepartmentDto { Id = Guid.NewGuid(), Name = "Vendas" }
            };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao carregar departamentos");
        }
    }

    private async Task LoadEmployees()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            // Placeholder - implementar chamada real quando serviço estiver disponível
            // var result = await EmployeeService.GetEmployeesAsync(
            //     page: currentPage,
            //     pageSize: pageSize,
            //     search: searchTerm,
            //     departmentId: string.IsNullOrEmpty(selectedDepartmentId) ? null : Guid.Parse(selectedDepartmentId),
            //     isActive: showActiveOnly ? true : null
            // );

            // Dados de exemplo para demonstração
            employees = GenerateSampleEmployees();
            totalEmployees = employees.Count;
            activeEmployees = employees.Count(e => e.IsActive);
            totalPages = (int)Math.Ceiling(totalEmployees / (double)pageSize);
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar funcionários: {ex.Message}";
            Logger.LogError(ex, "Erro ao carregar funcionários");
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<EmployeeDto> GenerateSampleEmployees()
    {
        // Dados de exemplo - remover quando implementar chamada real
        var dept1 = new EmployeeDepartmentDto { Id = Guid.NewGuid(), Name = "Tecnologia" };
        var dept2 = new EmployeeDepartmentDto { Id = Guid.NewGuid(), Name = "Recursos Humanos" };
        var dept3 = new EmployeeDepartmentDto { Id = Guid.NewGuid(), Name = "Marketing" };
        
        return new List<EmployeeDto>
        {
            new EmployeeDto 
            { 
                Id = Guid.NewGuid(), 
                FirstName = "João",
                LastName = "Silva",
                Email = "joao.silva@synqcore.com",
                IsActive = true,
                HireDate = DateTime.Now.AddYears(-2),
                Departments = new List<EmployeeDepartmentDto> { dept1 }
            },
            new EmployeeDto 
            { 
                Id = Guid.NewGuid(), 
                FirstName = "Maria",
                LastName = "Santos",
                Email = "maria.santos@synqcore.com",
                IsActive = true,
                HireDate = DateTime.Now.AddYears(-3),
                Departments = new List<EmployeeDepartmentDto> { dept2 }
            },
            new EmployeeDto 
            { 
                Id = Guid.NewGuid(), 
                FirstName = "Pedro",
                LastName = "Costa",
                Email = "pedro.costa@synqcore.com",
                IsActive = true,
                HireDate = DateTime.Now.AddYears(-1),
                Departments = new List<EmployeeDepartmentDto> { dept3 }
            }
        };
    }

    private void OnSearchChanged(KeyboardEventArgs e)
    {
        // Implementar debounce de 300ms
        searchDebounceTimer?.Stop();
        searchDebounceTimer = new System.Timers.Timer(300);
        searchDebounceTimer.Elapsed += async (sender, e) =>
        {
            searchDebounceTimer.Stop();
            await InvokeAsync(async () =>
            {
                currentPage = 1;
                await LoadEmployees();
                StateHasChanged();
            });
        };
        searchDebounceTimer.Start();
    }

    private async Task ClearFilters()
    {
        searchTerm = "";
        selectedDepartmentId = "";
        showActiveOnly = false;
        currentPage = 1;
        await LoadEmployees();
    }

    private void ToggleView()
    {
        showGrid = !showGrid;
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadEmployees();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadEmployees();
        }
    }

    private void ViewEmployee(Guid id)
    {
        Navigation.NavigateTo($"/employees/{id}");
    }

    private void EditEmployee(Guid id)
    {
        Navigation.NavigateTo($"/admin/employees/{id}/edit");
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/admin/employees/create");
    }

    private string GetInitials(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName))
            return "?";

        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 1)
            return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper();
        
        return $"{parts[0][0]}{parts[^1][0]}".ToUpper();
    }

    private string GetDepartmentName(EmployeeDto employee)
    {
        return employee.Departments.FirstOrDefault()?.Name ?? "Sem departamento";
    }

    public void Dispose()
    {
        searchDebounceTimer?.Dispose();
    }
}
