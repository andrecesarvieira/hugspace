@page "/test-state"
@rendermode InteractiveServer
@using SynQcore.BlazorApp.Services.StateManagement
@inject StateManager StateManager
@implements IDisposable

<PageTitle>SynQcore - Teste StateManager</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h1 class="text-primary">ðŸŽ¯ SynQcore StateManager - Teste BÃ¡sico</h1>
            <p class="lead">Testando o funcionamento do StateManager customizado (substituto do Fluxor)</p>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">ðŸ‘¤ UserState</h5>
                </div>
                <div class="card-body">
                    <p><strong>IsAuthenticated:</strong> @StateManager.User.IsAuthenticated</p>
                    <p><strong>AccessToken:</strong> @(StateManager.User.AccessToken.Length > 10 ? StateManager.User.AccessToken[..10] + "..." : StateManager.User.AccessToken)</p>
                    <p><strong>IsLoading:</strong> @StateManager.User.IsLoading</p>
                    <p><strong>Permissions:</strong> @string.Join(", ", StateManager.User.Permissions)</p>
                    
                    <button class="btn btn-sm btn-success me-2" @onclick="SimulateLogin">
                        Simular Login
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="SimulateLogout">
                        Simular Logout
                    </button>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">ðŸŽ¨ UIState</h5>
                </div>
                <div class="card-body">
                    <p><strong>IsLoading:</strong> @StateManager.UI.IsLoading</p>
                    <p><strong>IsSidebarExpanded:</strong> @StateManager.UI.IsSidebarExpanded</p>
                    <p><strong>CurrentModal:</strong> @(StateManager.UI.CurrentModal ?? "Nenhum")</p>
                    <p><strong>Notifications:</strong> @StateManager.UI.Notifications.Count</p>
                    
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="ToggleLoading">
                        Toggle Loading
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleSidebar">
                        Toggle Sidebar
                    </button>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">ðŸ”¢ SimpleState</h5>
                </div>
                <div class="card-body">
                    <p><strong>Count:</strong> @StateManager.Simple.Count</p>
                    <p><strong>Message:</strong> @StateManager.Simple.Message</p>
                    
                    <button class="btn btn-sm btn-primary me-2" @onclick="IncrementCounter">
                        Incrementar
                    </button>
                    <button class="btn btn-sm btn-warning me-2" @onclick="UpdateMessage">
                        Nova Mensagem
                    </button>
                    <button class="btn btn-sm btn-secondary" @onclick="ResetSimple">
                        Reset
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="alert alert-success">
                <h5>âœ… StateManager Status</h5>
                <p class="mb-0">
                    <strong>Estado:</strong> Funcionando corretamente! <br/>
                    <strong>SubstituiÃ§Ã£o do Fluxor:</strong> Completa <br/>
                    <strong>Reatividade:</strong> Todos os estados atualizam automaticamente via INotifyPropertyChanged <br/>
                    <strong>RenderizaÃ§Ã£o:</strong> @(DateTime.Now.ToString("HH:mm:ss")) - InteractiveServer Mode
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        // Inscrever-se nas mudanÃ§as de estado
        StateManager.User.PropertyChanged += OnStateChanged;
        StateManager.UI.PropertyChanged += OnStateChanged;
        StateManager.Simple.PropertyChanged += OnStateChanged;
    }

    private void OnStateChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        // ForÃ§ar re-renderizaÃ§Ã£o quando o estado mudar
        InvokeAsync(StateHasChanged);
    }

    private async Task SimulateLogin()
    {
        Console.WriteLine("ðŸ”µ [TestStateManager] SimulateLogin chamado");
        await StateManager.User.LoginAsync("admin@synqcore.com", "senha123");
        Console.WriteLine("ðŸ”µ [TestStateManager] SimulateLogin concluÃ­do");
    }

    private void SimulateLogout()
    {
        Console.WriteLine("ðŸ”µ [TestStateManager] SimulateLogout chamado");
        StateManager.User.Logout();
        Console.WriteLine("ðŸ”µ [TestStateManager] SimulateLogout concluÃ­do");
    }

    private void ToggleLoading()
    {
        Console.WriteLine("ðŸ”µ [TestStateManager] ToggleLoading chamado");
        StateManager.UI.IsLoading = !StateManager.UI.IsLoading;
        Console.WriteLine($"ðŸ”µ [TestStateManager] ToggleLoading: {StateManager.UI.IsLoading}");
    }

    private void ToggleSidebar()
    {
        Console.WriteLine("ðŸ”µ [TestStateManager] ToggleSidebar chamado");
        StateManager.UI.ToggleSidebar();
        Console.WriteLine($"ðŸ”µ [TestStateManager] ToggleSidebar: {StateManager.UI.IsSidebarExpanded}");
    }

    private void IncrementCounter()
    {
        Console.WriteLine("ðŸ”µ [TestStateManager] IncrementCounter chamado");
        StateManager.Simple.Increment();
        Console.WriteLine($"ðŸ”µ [TestStateManager] IncrementCounter: {StateManager.Simple.Count}");
    }

    private void UpdateMessage()
    {
        Console.WriteLine("ðŸ”µ [TestStateManager] UpdateMessage chamado");
        var messages = new[] 
        { 
            "StateManager funcionando!", 
            "Fluxor removido com sucesso!", 
            "MigraÃ§Ã£o concluÃ­da!",
            "Teste realizado!"
        };
        var random = new Random();
        var newMessage = messages[random.Next(messages.Length)];
        StateManager.Simple.SetMessage(newMessage);
        Console.WriteLine($"ðŸ”µ [TestStateManager] UpdateMessage: {newMessage}");
    }

    private void ResetSimple()
    {
        Console.WriteLine("ðŸ”µ [TestStateManager] ResetSimple chamado");
        StateManager.Simple.Reset();
        Console.WriteLine("ðŸ”µ [TestStateManager] ResetSimple concluÃ­do");
    }

    public void Dispose()
    {
        StateManager.User.PropertyChanged -= OnStateChanged;
        StateManager.UI.PropertyChanged -= OnStateChanged;
        StateManager.Simple.PropertyChanged -= OnStateChanged;
    }
}