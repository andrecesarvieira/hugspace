@page "/test-fluxor"
@using Fluxor
@using SynQcore.BlazorApp.Store.Simple
@inject IDispatcher Dispatcher
@inject IState<SimpleState> SimpleState

<h3>Teste BÃ¡sico do Fluxor</h3>

<div class="card">
    <div class="card-body">
        <h5>Estado Atual</h5>
        <p><strong>Mensagem:</strong> @SimpleState.Value.Message</p>
        <p><strong>Contador:</strong> @SimpleState.Value.Count</p>

        <hr />

        <div class="mb-3">
            <input @bind="testMessage" class="form-control" placeholder="Digite uma mensagem" />
        </div>

        <div class="d-flex gap-2">
            <button class="btn btn-primary" @onclick="DispatchSimpleAction">Atualizar Mensagem</button>
            <button class="btn btn-secondary" @onclick="DispatchIncrementAction">Incrementar Contador</button>
        </div>

        <hr />

        <h6>Logs de Debug</h6>
        <pre>@debugLog</pre>
    </div>
</div>

@code {
    private string testMessage = "Nova mensagem de teste";
    private string debugLog = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SimpleState.StateChanged += OnStateChanged;

        AddLog("Componente inicializado");
        AddLog($"Estado inicial - Message: {SimpleState.Value.Message}, Count: {SimpleState.Value.Count}");
    }

    private void OnStateChanged(object? sender, EventArgs e)
    {
        AddLog($"Estado alterado - Message: {SimpleState.Value.Message}, Count: {SimpleState.Value.Count}");
        InvokeAsync(StateHasChanged);
    }

    private void DispatchSimpleAction()
    {
        try
        {
            AddLog($"Disparando SimpleAction com mensagem: {testMessage}");
            Dispatcher.Dispatch(new SimpleAction(testMessage));
            AddLog("SimpleAction disparada com sucesso");
        }
        catch (Exception ex)
        {
            AddLog($"Erro ao disparar SimpleAction: {ex.Message}");
        }
    }

    private void DispatchIncrementAction()
    {
        try
        {
            AddLog("Disparando IncrementCountAction");
            Dispatcher.Dispatch(new IncrementCountAction());
            AddLog("IncrementCountAction disparada com sucesso");
        }
        catch (Exception ex)
        {
            AddLog($"Erro ao disparar IncrementCountAction: {ex.Message}");
        }
    }

    private void AddLog(string message)
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
        debugLog += $"[{timestamp}] {message}\n";
    }

    public void Dispose()
    {
        if (SimpleState != null)
        {
            SimpleState.StateChanged -= OnStateChanged;
        }
    }
}
