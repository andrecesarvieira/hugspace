@page "/employees/create"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using SynQcore.BlazorApp.Services
@using SynQcore.BlazorApp.Models
@attribute [Authorize(Roles = "HR,Admin")]
@inject IEmployeeService EmployeeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="employee-form-container">
    <div class="form-header">
        <h1 class="form-title">
            <i class="fas fa-user-plus"></i>
            Novo Funcionário
        </h1>
        <p class="form-subtitle">Cadastre um novo funcionário no sistema</p>
    </div>

    <div class="form-content">
        <EditForm Model="createRequest" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />

            <div class="form-section">
                <h3 class="section-title">Informações Pessoais</h3>

                <div class="form-row">
                    <div class="form-group">
                        <label for="firstName">Nome *</label>
                        <InputText id="firstName" @bind-Value="createRequest.FirstName" class="form-control" />
                        <ValidationMessage For="@(() => createRequest.FirstName)" />
                    </div>

                    <div class="form-group">
                        <label for="lastName">Sobrenome *</label>
                        <InputText id="lastName" @bind-Value="createRequest.LastName" class="form-control" />
                        <ValidationMessage For="@(() => createRequest.LastName)" />
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="email">Email Corporativo *</label>
                        <InputText id="email" @bind-Value="createRequest.Email" class="form-control" type="email" />
                        <ValidationMessage For="@(() => createRequest.Email)" />
                    </div>

                    <div class="form-group">
                        <label for="phone">Telefone</label>
                        <InputText id="phone" @bind-Value="createRequest.Phone" class="form-control" />
                        <ValidationMessage For="@(() => createRequest.Phone)" />
                    </div>
                </div>
            </div>

            <div class="form-section">
                <h3 class="section-title">Informações Profissionais</h3>

                <div class="form-row">
                    <div class="form-group">
                        <label for="hireDate">Data de Admissão *</label>
                        <InputDate id="hireDate" @bind-Value="createRequest.HireDate" class="form-control" />
                        <ValidationMessage For="@(() => createRequest.HireDate)" />
                    </div>

                    <div class="form-group">
                        <label for="managerId">Gerente Direto</label>
                        <select id="managerId" @bind="createRequest.ManagerId" class="form-control">
                            <option value="">Selecione um gerente...</option>
                            @foreach (var manager in availableManagers)
                            {
                                <option value="@manager.Id">@manager.FullName</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label>Departamentos</label>
                    <div class="checkbox-group">
                        @foreach (var dept in availableDepartments)
                        {
                            <label class="checkbox-item">
                                <input type="checkbox"
                                       checked="@createRequest.DepartmentIds.Contains(dept.Id)"
                                       @onchange="@((e) => ToggleDepartment(dept.Id, (bool)e.Value!))" />
                                <span class="checkbox-label">@dept.Name</span>
                                @if (!string.IsNullOrEmpty(dept.Description))
                                {
                                    <small class="checkbox-description">@dept.Description</small>
                                }
                            </label>
                        }
                    </div>
                </div>

                <div class="form-group">
                    <label>Equipes</label>
                    <div class="checkbox-group">
                        @foreach (var team in availableTeams)
                        {
                            <label class="checkbox-item">
                                <input type="checkbox"
                                       checked="@createRequest.TeamIds.Contains(team.Id)"
                                       @onchange="@((e) => ToggleTeam(team.Id, (bool)e.Value!))" />
                                <span class="checkbox-label">@team.Name</span>
                                @if (!string.IsNullOrEmpty(team.Description))
                                {
                                    <small class="checkbox-description">@team.Description</small>
                                }
                            </label>
                        }
                    </div>
                </div>
            </div>

            <div class="form-actions">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">
                    <i class="fas fa-times"></i>
                    Cancelar
                </button>
                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <i class="fas fa-spinner fa-spin"></i>
                        <span>Criando...</span>
                    }
                    else
                    {
                        <i class="fas fa-save"></i>
                        <span>Criar Funcionário</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateEmployeeRequest createRequest = new() { HireDate = DateTime.Today };
    private List<EmployeeDto> availableManagers = new();
    private List<DepartmentDto> availableDepartments = new();
    private List<TeamDto> availableTeams = new();
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadFormData();
    }

    private async Task LoadFormData()
    {
        try
        {
            // Carregar gerentes disponíveis
            var managers = await EmployeeService.SearchEmployeesAsync(""); // Buscar todos
            availableManagers = managers.Where(m => m.IsActive).ToList();

            // Mock data para departamentos e equipes (seria carregado de serviços específicos)
            availableDepartments = GetMockDepartments();
            availableTeams = GetMockTeams();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Erro ao carregar dados do formulário", ex.Message);
        }
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;
            StateHasChanged();

            var newEmployee = await EmployeeService.CreateEmployeeAsync(createRequest);

            await JSRuntime.InvokeVoidAsync("alert", "Funcionário criado com sucesso!");
            Navigation.NavigateTo($"/employees/{newEmployee.Id}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao criar funcionário: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/employees");
    }

    private void ToggleDepartment(Guid departmentId, bool isChecked)
    {
        if (isChecked)
        {
            if (!createRequest.DepartmentIds.Contains(departmentId))
                createRequest.DepartmentIds.Add(departmentId);
        }
        else
        {
            createRequest.DepartmentIds.Remove(departmentId);
        }
    }

    private void ToggleTeam(Guid teamId, bool isChecked)
    {
        if (isChecked)
        {
            if (!createRequest.TeamIds.Contains(teamId))
                createRequest.TeamIds.Add(teamId);
        }
        else
        {
            createRequest.TeamIds.Remove(teamId);
        }
    }

    #region Mock Data (seria substituído por serviços reais)

    private static List<DepartmentDto> GetMockDepartments()
    {
        return new List<DepartmentDto>
        {
            new() { Id = Guid.NewGuid(), Name = "Tecnologia da Informação", Description = "Desenvolvimento e infraestrutura" },
            new() { Id = Guid.NewGuid(), Name = "Recursos Humanos", Description = "Gestão de pessoas e talentos" },
            new() { Id = Guid.NewGuid(), Name = "Financeiro", Description = "Controladoria e finanças" },
            new() { Id = Guid.NewGuid(), Name = "Marketing", Description = "Marketing e comunicação" },
            new() { Id = Guid.NewGuid(), Name = "Vendas", Description = "Comercial e relacionamento com clientes" },
            new() { Id = Guid.NewGuid(), Name = "Operações", Description = "Processos e operações" }
        };
    }

    private static List<TeamDto> GetMockTeams()
    {
        return new List<TeamDto>
        {
            new() { Id = Guid.NewGuid(), Name = "Desenvolvimento Frontend", Description = "Equipe de UI/UX" },
            new() { Id = Guid.NewGuid(), Name = "Desenvolvimento Backend", Description = "APIs e serviços" },
            new() { Id = Guid.NewGuid(), Name = "DevOps", Description = "Infraestrutura e deploy" },
            new() { Id = Guid.NewGuid(), Name = "QA", Description = "Qualidade e testes" },
            new() { Id = Guid.NewGuid(), Name = "Design", Description = "Design e experiência do usuário" },
            new() { Id = Guid.NewGuid(), Name = "Produto", Description = "Gestão de produto" }
        };
    }

    public class DepartmentDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
    }

    #endregion
}

<style>
    .employee-form-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background: white;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(102, 126, 234, 0.1);
    }

    .form-header {
        text-align: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e2e8f0;
    }

    .form-title {
        font-size: 2rem;
        font-weight: 700;
        color: #2d3748;
        margin: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .form-title i {
        color: #667eea;
    }

    .form-subtitle {
        color: #718096;
        margin: 0.5rem 0 0 0;
        font-size: 1rem;
    }

    .form-content {
        max-width: 100%;
    }

    .form-section {
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: #f8f9ff;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #4a5568;
        margin: 0 0 1.5rem 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .section-title::before {
        content: '';
        width: 4px;
        height: 20px;
        background: #667eea;
        border-radius: 2px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form-group label {
        font-weight: 600;
        color: #4a5568;
        font-size: 0.9rem;
    }

    .form-control {
        padding: 0.75rem;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.2s;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .checkbox-group {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 0.75rem;
        margin-top: 0.5rem;
    }

    .checkbox-item {
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
        padding: 0.75rem;
        background: white;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .checkbox-item:hover {
        border-color: #667eea;
        background: #f8f9ff;
    }

    .checkbox-item input[type="checkbox"] {
        margin: 0;
        width: 18px;
        height: 18px;
        accent-color: #667eea;
    }

    .checkbox-label {
        font-weight: 600;
        color: #4a5568;
        line-height: 1.2;
    }

    .checkbox-description {
        display: block;
        color: #718096;
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid #e2e8f0;
    }

    .btn {
        padding: 0.75rem 2rem;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
        font-size: 1rem;
    }

    .btn-primary {
        background: #667eea;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background: #5a6fd8;
        transform: translateY(-1px);
    }

    .btn-secondary {
        background: #e2e8f0;
        color: #4a5568;
    }

    .btn-secondary:hover {
        background: #cbd5e0;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .validation-message {
        color: #e53e3e;
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }

    /* Responsividade */
    @@media (max-width: 768px) {
        .employee-form-container {
            margin: 1rem;
            padding: 1rem;
        }

        .form-row {
            grid-template-columns: 1fr;
        }

        .checkbox-group {
            grid-template-columns: 1fr;
        }

        .form-actions {
            flex-direction: column;
        }

        .btn {
            width: 100%;
            justify-content: center;
        }
    }
</style>
