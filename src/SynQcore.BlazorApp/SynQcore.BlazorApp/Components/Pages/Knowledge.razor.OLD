@*
 * SynQcore - Corporate Social Network
 *
 * P√°gina de Gest√£o de Conhecimento
 * Interface para base de conhecimento corporativo
 *
 * Author: Andr√© C√©sar Vieira <andrecesarvieira@hotmail.com>
*@

@page "/knowledge"
@using SynQcore.Domain.Entities.Communication
@using SynQcore.BlazorApp.Services
@using SynQcore.BlazorApp.Models
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@inject IKnowledgeService KnowledgeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<HeadContent>
    <title>Gest√£o de Conhecimento - SynQcore</title>
</HeadContent>

<div class="knowledge-container">
    <!-- Header com t√≠tulo e a√ß√µes -->
    <div class="header-section">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="page-title">
                    <i class="bi bi-book-fill text-primary"></i>
                    Base de Conhecimento
                </h2>
                <p class="text-muted mb-0">Centro de conhecimento corporativo e documenta√ß√£o</p>
            </div>

            <div class="d-flex gap-3">
                <button class="btn btn-outline-secondary" @onclick="ToggleCategoriesView">
                    <i class="bi bi-tags"></i>
                    @(showCategories ? "Ocultar" : "Mostrar") Categorias
                </button>
                <button class="btn btn-outline-primary" @onclick="ShowCreateCategoryModal">
                    <i class="bi bi-folder-plus"></i>
                    Nova Categoria
                </button>
                <button class="btn btn-primary" @onclick="ShowCreatePostModal">
                    <i class="bi bi-plus-lg"></i>
                    Novo Artigo
                </button>
            </div>
        </div>

        <!-- Resumo de estat√≠sticas -->
        @if (posts != null && categories != null)
        {
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="stat-card bg-primary">
                        <div class="stat-icon">
                            <i class="bi bi-file-text"></i>
                        </div>
                        <div class="stat-content">
                            <h4>@posts.TotalCount.ToString("N0")</h4>
                            <p>Artigos Totais</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card bg-success">
                        <div class="stat-icon">
                            <i class="bi bi-tags"></i>
                        </div>
                        <div class="stat-content">
                            <h4>@categories.Count.ToString("N0")</h4>
                            <p>Categorias Ativas</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card bg-info">
                        <div class="stat-icon">
                            <i class="bi bi-eye"></i>
                        </div>
                        <div class="stat-content">
                            <h4>@posts.Items.Sum(p => p.ViewCount).ToString("N0")</h4>
                            <p>Visualiza√ß√µes</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card bg-warning">
                        <div class="stat-icon">
                            <i class="bi bi-heart"></i>
                        </div>
                        <div class="stat-content">
                            <h4>@posts.Items.Sum(p => p.LikeCount).ToString("N0")</h4>
                            <p>Curtidas</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="row">
        <!-- Sidebar de Categorias -->
        @if (showCategories)
        {
            <div class="col-lg-3">
                <div class="categories-sidebar">
                    <div class="sidebar-header">
                        <h5>
                            <i class="bi bi-folder"></i>
                            Categorias
                        </h5>
                    </div>

                    @if (isLoadingCategories)
                    {
                        <div class="text-center py-3">
                            <div class="spinner-border spinner-border-sm" role="status"></div>
                            <p class="mt-2 small text-muted">Carregando...</p>
                        </div>
                    }
                    else if (categories?.Count > 0)
                    {
                        <div class="categories-tree">
                            @foreach (var category in categories)
                            {
                                <div class="category-item @(selectedCategoryId == category.Id ? "selected" : "")"
                                     @onclick="() => SelectCategory(category.Id)">
                                    <div class="category-content">
                                        <span class="category-icon" style="color: @category.Color;">@category.Icon</span>
                                        <div class="category-info">
                                            <div class="category-name">@category.Name</div>
                                            <div class="category-count">@category.PostsCount artigos</div>
                                        </div>
                                    </div>

                                    @if (category.SubCategories?.Count > 0)
                                    {
                                        <div class="subcategories">
                                            @foreach (var subCategory in category.SubCategories)
                                            {
                                                <div class="subcategory-item @(selectedCategoryId == subCategory.Id ? "selected" : "")"
                                                     @onclick="() => SelectCategory(subCategory.Id)">
                                                    <span class="subcategory-icon" style="color: @subCategory.Color;">@subCategory.Icon</span>
                                                    <span class="subcategory-name">@subCategory.Name</span>
                                                    <span class="subcategory-count">(@subCategory.PostsCount)</span>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }

                            <!-- Bot√£o para mostrar todas -->
                            <div class="category-item @(selectedCategoryId == null ? "selected" : "")"
                                 @onclick="() => SelectCategory(null)">
                                <div class="category-content">
                                    <span class="category-icon">üìö</span>
                                    <div class="category-info">
                                        <div class="category-name">Todos os Artigos</div>
                                        <div class="category-count">Visualizar tudo</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-folder-x display-4 text-muted"></i>
                            <p class="mt-2 text-muted">Nenhuma categoria encontrada</p>
                            <button class="btn btn-sm btn-primary" @onclick="ShowCreateCategoryModal">
                                Criar Primeira Categoria
                            </button>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Conte√∫do Principal -->
        <div class="@(showCategories ? "col-lg-9" : "col-12")">
            <!-- Filtros e busca -->
            <div class="filters-section mb-4">
                <div class="card">
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label class="form-label">Buscar</label>
                                <input type="text" class="form-control" @bind="searchRequest.SearchTerm"
                                       placeholder="Buscar por t√≠tulo ou conte√∫do..." />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Tipo</label>
                                <select class="form-select" @bind="searchRequest.Type">
                                    <option value="">Todos</option>
                                    @foreach (var type in Enum.GetValues<PostType>())
                                    {
                                        <option value="@type">@GetPostTypeDisplay(type)</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Status</label>
                                <select class="form-select" @bind="searchRequest.Status">
                                    <option value="">Todos</option>
                                    @foreach (var status in Enum.GetValues<PostStatus>())
                                    {
                                        <option value="@status">@GetPostStatusDisplay(status)</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Visibilidade</label>
                                <select class="form-select" @bind="searchRequest.Visibility">
                                    <option value="">Todas</option>
                                    @foreach (var visibility in Enum.GetValues<PostVisibility>())
                                    {
                                        <option value="@visibility">@GetPostVisibilityDisplay(visibility)</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">&nbsp;</label>
                                <button class="btn btn-primary w-100" @onclick="LoadKnowledgePosts">
                                    <i class="bi bi-search"></i>
                                    Buscar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Lista de Posts -->
            <div class="posts-section">
                @if (isLoadingPosts)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Carregando...</span>
                        </div>
                        <p class="mt-2 text-muted">Carregando artigos...</p>
                    </div>
                }
                else if (posts?.Items?.Count > 0)
                {
                    <div class="row">
                        @foreach (var post in posts.Items)
                        {
                            <div class="col-lg-6 col-xl-4 mb-4">
                                <div class="knowledge-post-card">
                                    <!-- Header do Card -->
                                    <div class="post-card-header">
                                        <div class="post-type-badge @GetPostTypeClass(post.Type)">
                                            <i class="@GetPostTypeIcon(post.Type)"></i>
                                            @GetPostTypeDisplay(post.Type)
                                        </div>
                                        <div class="post-status-badge @GetPostStatusClass(post.Status)">
                                            @GetPostStatusDisplay(post.Status)
                                        </div>
                                    </div>

                                    <!-- Imagem/Thumbnail -->
                                    @if (!string.IsNullOrEmpty(post.ImageUrl))
                                    {
                                        <div class="post-image">
                                            <img src="@post.ImageUrl" alt="@post.Title" />
                                        </div>
                                    }

                                    <!-- Conte√∫do -->
                                    <div class="post-content">
                                        <h5 class="post-title">@post.Title</h5>

                                        @if (!string.IsNullOrEmpty(post.Summary))
                                        {
                                            <p class="post-summary">@post.Summary</p>
                                        }

                                        @if (!string.IsNullOrEmpty(post.CategoryName))
                                        {
                                            <span class="category-badge" style="background-color: @(categories?.FirstOrDefault(c => c.Id == post.CategoryId)?.Color ?? "#007ACC");">
                                                @post.CategoryName
                                            </span>
                                        }

                                        @if (post.Tags?.Count > 0)
                                        {
                                            <div class="post-tags">
                                                @foreach (var tag in post.Tags.Take(3))
                                                {
                                                    <span class="tag-badge" style="background-color: @tag.Color;">
                                                        #@tag.Name
                                                    </span>
                                                }
                                                @if (post.Tags.Count > 3)
                                                {
                                                    <span class="tag-badge more-tags">+@(post.Tags.Count - 3)</span>
                                                }
                                            </div>
                                        }
                                    </div>

                                    <!-- Meta informa√ß√µes -->
                                    <div class="post-meta">
                                        <div class="author-info">
                                            <div class="author-avatar">
                                                @post.AuthorName.Substring(0, 1).ToUpper()
                                            </div>
                                            <div class="author-details">
                                                <div class="author-name">@post.AuthorName</div>
                                                <div class="post-date">@post.CreatedAt.ToString("dd/MM/yyyy")</div>
                                            </div>
                                        </div>

                                        <div class="post-stats">
                                            <span class="stat-item">
                                                <i class="bi bi-eye"></i>
                                                @post.ViewCount
                                            </span>
                                            <span class="stat-item">
                                                <i class="bi bi-heart"></i>
                                                @post.LikeCount
                                            </span>
                                            <span class="stat-item">
                                                <i class="bi bi-chat"></i>
                                                @post.CommentCount
                                            </span>
                                        </div>
                                    </div>

                                    <!-- A√ß√µes -->
                                    <div class="post-actions">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewPost(post.Id)">
                                            <i class="bi bi-eye"></i>
                                            Visualizar
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditPost(post.Id)">
                                            <i class="bi bi-pencil"></i>
                                            Editar
                                        </button>
                                        @if (post.Versions?.Count > 1)
                                        {
                                            <button class="btn btn-sm btn-outline-info" @onclick="() => ViewVersions(post.Id)">
                                                <i class="bi bi-clock-history"></i>
                                                v@post.Version
                                            </button>
                                        }
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeletePost(post.Id)">
                                            <i class="bi bi-trash"></i>
                                            Excluir
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Pagina√ß√£o -->
                    <div class="pagination-section">
                        <nav aria-label="Navega√ß√£o de p√°ginas">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(posts.Page == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(posts.Page - 1)">
                                        <i class="bi bi-chevron-left"></i>
                                        Anterior
                                    </button>
                                </li>

                                @for (int i = Math.Max(1, posts.Page - 2); i <= Math.Min(posts.TotalPages, posts.Page + 2); i++)
                                {
                                    <li class="page-item @(i == posts.Page ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                    </li>
                                }

                                <li class="page-item @(posts.Page == posts.TotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(posts.Page + 1)">
                                        Pr√≥xima
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </li>
                            </ul>
                        </nav>

                        <div class="text-center mt-2">
                            <small class="text-muted">
                                Mostrando @((posts.Page - 1) * posts.PageSize + 1) a
                                @Math.Min(posts.Page * posts.PageSize, posts.TotalCount)
                                de @posts.TotalCount artigos
                            </small>
                        </div>
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <div class="text-center py-5">
                            <i class="bi bi-book display-1 text-muted"></i>
                            <h4 class="mt-3">Nenhum artigo encontrado</h4>
                            <p class="text-muted">Seja o primeiro a compartilhar conhecimento!</p>
                            <button class="btn btn-primary" @onclick="ShowCreatePostModal">
                                <i class="bi bi-plus-lg"></i>
                                Criar Primeiro Artigo
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private PagedResult<KnowledgePostDto>? posts;
    private List<KnowledgeCategoryDto>? categories;
    private KnowledgePostSearchRequest searchRequest = new();
    private bool isLoadingPosts = true;
    private bool isLoadingCategories = true;
    private bool showCategories = true;
    private Guid? selectedCategoryId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadKnowledgePosts();
        await LoadCategories();
    }

    private async Task LoadKnowledgePosts()
    {
        isLoadingPosts = true;
        StateHasChanged();

        try
        {
            // Se uma categoria est√° selecionada, buscar posts dessa categoria
            if (selectedCategoryId.HasValue)
            {
                posts = await KnowledgeService.GetKnowledgePostsByCategoryAsync(
                    selectedCategoryId.Value,
                    searchRequest.Page,
                    searchRequest.PageSize,
                    searchRequest.SortBy,
                    searchRequest.SortDescending);
            }
            else
            {
                posts = await KnowledgeService.SearchKnowledgePostsAsync(searchRequest);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Erro ao carregar posts:", ex.Message);
        }
        finally
        {
            isLoadingPosts = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategories()
    {
        isLoadingCategories = true;
        StateHasChanged();

        try
        {
            categories = await KnowledgeService.GetCategoriesAsync(includeInactive: false, includeHierarchy: true);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Erro ao carregar categorias:", ex.Message);
        }
        finally
        {
            isLoadingCategories = false;
            StateHasChanged();
        }
    }

    private async Task SelectCategory(Guid? categoryId)
    {
        selectedCategoryId = categoryId;
        searchRequest.CategoryId = categoryId;
        searchRequest.Page = 1; // Reset para primeira p√°gina
        await LoadKnowledgePosts();
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > (posts?.TotalPages ?? 1))
            return;

        searchRequest.Page = page;
        await LoadKnowledgePosts();
    }

    private void ToggleCategoriesView()
    {
        showCategories = !showCategories;
    }

    private void ShowCreatePostModal()
    {
        Navigation.NavigateTo("/knowledge/create");
    }

    private void ShowCreateCategoryModal()
    {
        Navigation.NavigateTo("/knowledge/categories/create");
    }

    private void ViewPost(Guid postId)
    {
        Navigation.NavigateTo($"/knowledge/view/{postId}");
    }

    private void EditPost(Guid postId)
    {
        Navigation.NavigateTo($"/knowledge/edit/{postId}");
    }

    private void ViewVersions(Guid postId)
    {
        Navigation.NavigateTo($"/knowledge/versions/{postId}");
    }

    private async Task DeletePost(Guid postId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este artigo?");

        if (confirmed)
        {
            try
            {
                bool success = await KnowledgeService.DeleteKnowledgePostAsync(postId);

                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Artigo exclu√≠do com sucesso!");
                    await LoadKnowledgePosts();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Erro ao excluir artigo.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Erro: {ex.Message}");
            }
        }
    }

    #region Helper Methods

    private static string GetPostTypeDisplay(PostType type)
    {
        return type switch
        {
            PostType.Article => "Artigo",
            PostType.HowTo => "Como Fazer",
            PostType.Policy => "Pol√≠tica",
            PostType.FAQ => "FAQ",
            PostType.Announcement => "An√∫ncio",
            PostType.News => "Not√≠cia",
            PostType.Post => "Post",
            _ => type.ToString()
        };
    }

    private static string GetPostTypeIcon(PostType type)
    {
        return type switch
        {
            PostType.Article => "bi bi-file-text",
            PostType.HowTo => "bi bi-tools",
            PostType.Policy => "bi bi-shield-check",
            PostType.FAQ => "bi bi-question-circle",
            PostType.Announcement => "bi bi-megaphone",
            PostType.News => "bi bi-newspaper",
            PostType.Post => "bi bi-chat",
            _ => "bi bi-file-text"
        };
    }

    private static string GetPostTypeClass(PostType type)
    {
        return type switch
        {
            PostType.Article => "type-article",
            PostType.HowTo => "type-howto",
            PostType.Policy => "type-policy",
            PostType.FAQ => "type-faq",
            PostType.Announcement => "type-announcement",
            PostType.News => "type-news",
            PostType.Post => "type-post",
            _ => "type-default"
        };
    }

    private static string GetPostStatusDisplay(PostStatus status)
    {
        return status switch
        {
            PostStatus.Draft => "Rascunho",
            PostStatus.PendingApproval => "Pendente",
            PostStatus.Published => "Publicado",
            PostStatus.Archived => "Arquivado",
            PostStatus.Rejected => "Rejeitado",
            _ => status.ToString()
        };
    }

    private static string GetPostStatusClass(PostStatus status)
    {
        return status switch
        {
            PostStatus.Draft => "status-draft",
            PostStatus.PendingApproval => "status-pending",
            PostStatus.Published => "status-published",
            PostStatus.Archived => "status-archived",
            PostStatus.Rejected => "status-rejected",
            _ => "status-default"
        };
    }

    private static string GetPostVisibilityDisplay(PostVisibility visibility)
    {
        return visibility switch
        {
            PostVisibility.Public => "P√∫blico",
            PostVisibility.Company => "Empresa",
            PostVisibility.Department => "Departamento",
            PostVisibility.Team => "Equipe",
            _ => visibility.ToString()
        };
    }

    #endregion
}

<style>
    .knowledge-container {
        padding: 1.5rem;
    }

    .page-title {
        font-size: 2rem;
        font-weight: 600;
        color: #1a365d;
        margin-bottom: 0.5rem;
    }

    .stat-card {
        background: linear-gradient(135deg, var(--bs-primary) 0%, rgba(var(--bs-primary-rgb), 0.8) 100%);
        border-radius: 12px;
        padding: 1.5rem;
        color: white;
        position: relative;
        overflow: hidden;
        height: 120px;
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
        transition: transform 0.2s ease;
    }

    .stat-card:hover {
        transform: translateY(-2px);
    }

    .stat-card.bg-success {
        background: linear-gradient(135deg, var(--bs-success) 0%, rgba(var(--bs-success-rgb), 0.8) 100%);
    }

    .stat-card.bg-info {
        background: linear-gradient(135deg, var(--bs-info) 0%, rgba(var(--bs-info-rgb), 0.8) 100%);
    }

    .stat-card.bg-warning {
        background: linear-gradient(135deg, var(--bs-warning) 0%, rgba(var(--bs-warning-rgb), 0.8) 100%);
        color: #000;
    }

    .stat-icon {
        font-size: 2.5rem;
        opacity: 0.8;
        margin-right: 1rem;
    }

    .stat-content h4 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
    }

    .stat-content p {
        font-size: 0.9rem;
        margin-bottom: 0;
        opacity: 0.9;
    }

    .categories-sidebar {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border: 1px solid #e2e8f0;
        margin-bottom: 2rem;
    }

    .sidebar-header {
        padding: 1.5rem;
        border-bottom: 1px solid #e2e8f0;
        background: #f8fafc;
        border-radius: 12px 12px 0 0;
    }

    .sidebar-header h5 {
        margin: 0;
        font-weight: 600;
        color: #2d3748;
    }

    .categories-tree {
        padding: 1rem;
    }

    .category-item {
        padding: 0.75rem;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        margin-bottom: 0.5rem;
    }

    .category-item:hover {
        background: #f7fafc;
    }

    .category-item.selected {
        background: #e6f3ff;
        border-left: 4px solid #667eea;
    }

    .category-content {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .category-icon {
        font-size: 1.25rem;
        min-width: 1.5rem;
    }

    .category-name {
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.125rem;
    }

    .category-count {
        font-size: 0.8rem;
        color: #718096;
    }

    .subcategories {
        margin-left: 2rem;
        margin-top: 0.5rem;
    }

    .subcategory-item {
        padding: 0.5rem;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        margin-bottom: 0.25rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .subcategory-item:hover {
        background: #f7fafc;
    }

    .subcategory-item.selected {
        background: #e6f3ff;
    }

    .subcategory-name {
        font-weight: 500;
        color: #4a5568;
    }

    .subcategory-count {
        font-size: 0.75rem;
        color: #a0aec0;
    }

    .knowledge-post-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border: 1px solid #e2e8f0;
        transition: all 0.2s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .knowledge-post-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
    }

    .post-card-header {
        padding: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #e2e8f0;
        background: #f8fafc;
    }

    .post-type-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .type-article { background: #e6f3ff; color: #1a365d; }
    .type-howto { background: #f0fff4; color: #1a202c; }
    .type-policy { background: #fef5e7; color: #744210; }
    .type-faq { background: #e9d8fd; color: #553c9a; }
    .type-announcement { background: #fed7d7; color: #9b2c2c; }
    .type-news { background: #bee3f8; color: #2c5282; }
    .type-post { background: #f7fafc; color: #2d3748; }

    .post-status-badge {
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .status-draft { background: #f7fafc; color: #4a5568; }
    .status-pending { background: #fef5e7; color: #744210; }
    .status-published { background: #f0fff4; color: #22543d; }
    .status-archived { background: #e2e8f0; color: #4a5568; }
    .status-rejected { background: #fed7d7; color: #9b2c2c; }

    .post-image {
        height: 150px;
        overflow: hidden;
    }

    .post-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .post-content {
        padding: 1.5rem;
        flex-grow: 1;
    }

    .post-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.75rem;
        line-height: 1.4;
    }

    .post-summary {
        color: #4a5568;
        font-size: 0.9rem;
        line-height: 1.5;
        margin-bottom: 1rem;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .category-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
        color: white;
        margin-bottom: 0.75rem;
    }

    .post-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
        margin-top: 0.5rem;
    }

    .tag-badge {
        padding: 0.125rem 0.5rem;
        border-radius: 12px;
        font-size: 0.7rem;
        font-weight: 500;
        color: white;
    }

    .more-tags {
        background: #a0aec0 !important;
    }

    .post-meta {
        padding: 1rem 1.5rem;
        border-top: 1px solid #e2e8f0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #f8fafc;
    }

    .author-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .author-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .author-name {
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.125rem;
        font-size: 0.85rem;
    }

    .post-date {
        font-size: 0.75rem;
        color: #718096;
    }

    .post-stats {
        display: flex;
        gap: 0.75rem;
    }

    .stat-item {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        font-size: 0.8rem;
        color: #718096;
    }

    .post-actions {
        padding: 1rem 1.5rem;
        border-top: 1px solid #e2e8f0;
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .filters-section .card {
        border: none;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .pagination-section {
        margin-top: 2rem;
    }

    .empty-state {
        background: white;
        border-radius: 12px;
        border: 2px dashed #e2e8f0;
    }

    @@media (max-width: 768px) {
        .knowledge-container {
            padding: 1rem;
        }

        .stat-card {
            height: auto;
            padding: 1rem;
        }

        .post-actions {
            flex-direction: column;
        }

        .post-meta {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        .post-stats {
            align-self: flex-end;
        }
    }
</style>
