@*
 * SynQcore - Corporate Social Network
 *
 * Página de Gestão de Endorsements
 * Interface para validação de conhecimento entre pares corporativos
 *
 * Author: André César Vieira <andrecesarvieira@hotmail.com>
*@

@page "/endorsements"
@using SynQcore.Domain.Entities.Communication
@using SynQcore.BlazorApp.Services
@using SynQcore.BlazorApp.Models
@using Microsoft.AspNetCore.Components.Web
@inject IEndorsementService EndorsementService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<HeadContent>
    <title>Endorsements - SynQcore</title>
</HeadContent>

<div class="endorsements-container">
    <!-- Header com título e estatísticas -->
    <div class="header-section">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="page-title">
                    <i class="bi bi-award-fill text-primary"></i>
                    Endorsements Corporativos
                </h2>
                <p class="text-muted mb-0">Sistema de validação de conhecimento entre pares</p>
            </div>

            <div class="d-flex gap-3">
                <button class="btn btn-outline-primary" @onclick="LoadAnalytics">
                    <i class="bi bi-graph-up"></i>
                    Analytics
                </button>
                <button class="btn btn-primary" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-lg"></i>
                    Novo Endorsement
                </button>
            </div>
        </div>

        <!-- Cards de estatísticas rápidas -->
        @if (stats != null)
        {
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="stat-card bg-primary">
                        <div class="stat-icon">
                            <i class="bi bi-award"></i>
                        </div>
                        <div class="stat-content">
                            <h4>@analytics?.TotalEndorsements.ToString("N0")</h4>
                            <p>Total de Endorsements</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card bg-success">
                        <div class="stat-icon">
                            <i class="bi bi-people"></i>
                        </div>
                        <div class="stat-content">
                            <h4>@analytics?.TotalParticipants.ToString("N0")</h4>
                            <p>Participantes Ativos</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card bg-info">
                        <div class="stat-icon">
                            <i class="bi bi-graph-up-arrow"></i>
                        </div>
                        <div class="stat-content">
                            <h4>@analytics?.GrowthRate.ToString("F1")%</h4>
                            <p>Crescimento</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card bg-warning">
                        <div class="stat-icon">
                            <i class="bi bi-star-fill"></i>
                        </div>
                        <div class="stat-content">
                            <h4>@GetEndorsementTypeIcon(analytics?.MostPopularType ?? EndorsementType.Helpful)</h4>
                            <p>Tipo Mais Popular</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Filtros e busca -->
    <div class="filters-section mb-4">
        <div class="card">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">Tipo de Endorsement</label>
                        <select class="form-select" @bind="searchRequest.Type">
                            <option value="">Todos os tipos</option>
                            @foreach (var type in Enum.GetValues<EndorsementType>())
                            {
                                <option value="@type">@GetEndorsementTypeDisplay(type)</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Visibilidade</label>
                        <select class="form-select" @bind="searchRequest.IsPublic">
                            <option value="">Todos</option>
                            <option value="true">Públicos</option>
                            <option value="false">Privados</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Data Início</label>
                        <input type="date" class="form-control" @bind="searchRequest.EndorsedAfter" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Data Fim</label>
                        <input type="date" class="form-control" @bind="searchRequest.EndorsedBefore" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">&nbsp;</label>
                        <button class="btn btn-primary w-100" @onclick="LoadEndorsements">
                            <i class="bi bi-search"></i>
                            Buscar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Lista de endorsements -->
    <div class="endorsements-list">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Carregando...</span>
                </div>
                <p class="mt-2 text-muted">Carregando endorsements...</p>
            </div>
        }
        else if (endorsements?.Items?.Count > 0)
        {
            <div class="row">
                @foreach (var endorsement in endorsements.Items)
                {
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="endorsement-card">
                            <div class="endorsement-header">
                                <div class="endorsement-type">
                                    <span class="type-icon">@GetEndorsementTypeIcon(endorsement.Type)</span>
                                    <span class="type-name">@GetEndorsementTypeDisplay(endorsement.Type)</span>
                                </div>
                                <div class="endorsement-visibility">
                                    @if (endorsement.IsPublic)
                                    {
                                        <i class="bi bi-globe text-success" title="Público"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-lock text-warning" title="Privado"></i>
                                    }
                                </div>
                            </div>

                            <div class="endorsement-content">
                                @if (!string.IsNullOrEmpty(endorsement.Note))
                                {
                                    <p class="endorsement-note">@endorsement.Note</p>
                                }

                                @if (!string.IsNullOrEmpty(endorsement.Context))
                                {
                                    <span class="context-badge">@endorsement.Context</span>
                                }
                            </div>

                            <div class="endorsement-meta">
                                <div class="endorser-info">
                                    <div class="endorser-avatar">
                                        @endorsement.EndorserName.Substring(0, 1).ToUpper()
                                    </div>
                                    <div class="endorser-details">
                                        <div class="endorser-name">@endorsement.EndorserName</div>
                                        <div class="endorser-department">@endorsement.EndorserDepartment</div>
                                    </div>
                                </div>
                                <div class="endorsement-date">
                                    @endorsement.EndorsedAt.ToString("dd/MM/yyyy HH:mm")
                                </div>
                            </div>

                            @if (!string.IsNullOrEmpty(endorsement.PostTitle))
                            {
                                <div class="endorsed-content">
                                    <i class="bi bi-file-text"></i>
                                    <span>Post: @endorsement.PostTitle</span>
                                </div>
                            }
                            else if (!string.IsNullOrEmpty(endorsement.CommentContent))
                            {
                                <div class="endorsed-content">
                                    <i class="bi bi-chat"></i>
                                    <span>Comentário: @(endorsement.CommentContent.Length > 50 ? endorsement.CommentContent.Substring(0, 50) + "..." : endorsement.CommentContent)</span>
                                </div>
                            }

                            <div class="endorsement-actions">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewDetails(endorsement.Id)">
                                    <i class="bi bi-eye"></i>
                                    Detalhes
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditEndorsement(endorsement.Id)">
                                    <i class="bi bi-pencil"></i>
                                    Editar
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteEndorsement(endorsement.Id)">
                                    <i class="bi bi-trash"></i>
                                    Excluir
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Paginação -->
            <div class="pagination-section">
                <nav aria-label="Navegação de páginas">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(endorsements.Page == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(endorsements.Page - 1)">
                                <i class="bi bi-chevron-left"></i>
                                Anterior
                            </button>
                        </li>

                        @for (int i = Math.Max(1, endorsements.Page - 2); i <= Math.Min(endorsements.TotalPages, endorsements.Page + 2); i++)
                        {
                            <li class="page-item @(i == endorsements.Page ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                            </li>
                        }

                        <li class="page-item @(endorsements.Page == endorsements.TotalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(endorsements.Page + 1)">
                                Próxima
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>

                <div class="text-center mt-2">
                    <small class="text-muted">
                        Mostrando @((endorsements.Page - 1) * endorsements.PageSize + 1) a
                        @Math.Min(endorsements.Page * endorsements.PageSize, endorsements.TotalCount)
                        de @endorsements.TotalCount endorsements
                    </small>
                </div>
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="text-center py-5">
                    <i class="bi bi-award display-1 text-muted"></i>
                    <h4 class="mt-3">Nenhum endorsement encontrado</h4>
                    <p class="text-muted">Seja o primeiro a endossar conteúdo valioso!</p>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="bi bi-plus-lg"></i>
                        Criar Primeiro Endorsement
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private PagedResult<EndorsementDto>? endorsements;
    private EndorsementAnalyticsDto? analytics;
    private EndorsementStatsDto? stats;
    private EndorsementSearchRequest searchRequest = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadEndorsements();
        await LoadAnalytics();
    }

    private async Task LoadEndorsements()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            endorsements = await EndorsementService.SearchEndorsementsAsync(searchRequest);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Erro ao carregar endorsements:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAnalytics()
    {
        try
        {
            analytics = await EndorsementService.GetEndorsementAnalyticsAsync();

            // Carregar estatísticas gerais
            if (endorsements?.Items?.Count > 0)
            {
                var firstPost = endorsements.Items.FirstOrDefault(e => e.PostId.HasValue);
                if (firstPost != null)
                {
                    stats = await EndorsementService.GetEndorsementStatsAsync(firstPost.PostId);
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Erro ao carregar analytics:", ex.Message);
        }
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > (endorsements?.TotalPages ?? 1))
            return;

        searchRequest.Page = page;
        await LoadEndorsements();
    }

    private void ShowCreateModal()
    {
        Navigation.NavigateTo("/endorsements/create");
    }

    private void ViewDetails(Guid endorsementId)
    {
        Navigation.NavigateTo($"/endorsements/details/{endorsementId}");
    }

    private void EditEndorsement(Guid endorsementId)
    {
        Navigation.NavigateTo($"/endorsements/edit/{endorsementId}");
    }

    private async Task DeleteEndorsement(Guid endorsementId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este endorsement?");

        if (confirmed)
        {
            try
            {
                bool success = await EndorsementService.DeleteEndorsementAsync(endorsementId, "Excluído pelo usuário");

                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Endorsement excluído com sucesso!");
                    await LoadEndorsements();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Erro ao excluir endorsement.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Erro: {ex.Message}");
            }
        }
    }

    private static string GetEndorsementTypeDisplay(EndorsementType type)
    {
        return type switch
        {
            EndorsementType.Helpful => "Útil",
            EndorsementType.Insightful => "Perspicaz",
            EndorsementType.Accurate => "Preciso",
            EndorsementType.Innovative => "Inovador",
            EndorsementType.Comprehensive => "Abrangente",
            EndorsementType.WellResearched => "Bem Pesquisado",
            EndorsementType.Actionable => "Acionável",
            EndorsementType.Strategic => "Estratégico",
            _ => type.ToString()
        };
    }

    private static string GetEndorsementTypeIcon(EndorsementType type)
    {
        return type switch
        {
            EndorsementType.Helpful => "👍",
            EndorsementType.Insightful => "💡",
            EndorsementType.Accurate => "🎯",
            EndorsementType.Innovative => "✨",
            EndorsementType.Comprehensive => "📊",
            EndorsementType.WellResearched => "🔍",
            EndorsementType.Actionable => "⚙️",
            EndorsementType.Strategic => "�",
            _ => "👍"
        };
    }
}

<style>
    .endorsements-container {
        padding: 1.5rem;
    }

    .page-title {
        font-size: 2rem;
        font-weight: 600;
        color: #1a365d;
        margin-bottom: 0.5rem;
    }

    .stat-card {
        background: linear-gradient(135deg, var(--bs-primary) 0%, rgba(var(--bs-primary-rgb), 0.8) 100%);
        border-radius: 12px;
        padding: 1.5rem;
        color: white;
        position: relative;
        overflow: hidden;
        height: 120px;
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
        transition: transform 0.2s ease;
    }

    .stat-card:hover {
        transform: translateY(-2px);
    }

    .stat-card.bg-success {
        background: linear-gradient(135deg, var(--bs-success) 0%, rgba(var(--bs-success-rgb), 0.8) 100%);
    }

    .stat-card.bg-info {
        background: linear-gradient(135deg, var(--bs-info) 0%, rgba(var(--bs-info-rgb), 0.8) 100%);
    }

    .stat-card.bg-warning {
        background: linear-gradient(135deg, var(--bs-warning) 0%, rgba(var(--bs-warning-rgb), 0.8) 100%);
        color: #000;
    }

    .stat-icon {
        font-size: 2.5rem;
        opacity: 0.8;
        margin-right: 1rem;
    }

    .stat-content h4 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
    }

    .stat-content p {
        font-size: 0.9rem;
        margin-bottom: 0;
        opacity: 0.9;
    }

    .endorsement-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border: 1px solid #e2e8f0;
        transition: all 0.2s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .endorsement-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
    }

    .endorsement-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .endorsement-type {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .type-icon {
        font-size: 1.5rem;
    }

    .type-name {
        font-weight: 600;
        color: #2d3748;
    }

    .endorsement-content {
        flex-grow: 1;
        margin-bottom: 1rem;
    }

    .endorsement-note {
        background: #f7fafc;
        padding: 0.75rem;
        border-radius: 8px;
        font-style: italic;
        color: #4a5568;
        margin-bottom: 0.5rem;
    }

    .context-badge {
        background: #e2e8f0;
        color: #2d3748;
        padding: 0.25rem 0.5rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .endorsement-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e2e8f0;
    }

    .endorser-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .endorser-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .endorser-name {
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.25rem;
    }

    .endorser-department {
        font-size: 0.8rem;
        color: #718096;
    }

    .endorsement-date {
        font-size: 0.8rem;
        color: #718096;
    }

    .endorsed-content {
        background: #edf2f7;
        padding: 0.75rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        color: #4a5568;
    }

    .endorsement-actions {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .pagination-section {
        margin-top: 2rem;
    }

    .filters-section .card {
        border: none;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .empty-state {
        background: white;
        border-radius: 12px;
        border: 2px dashed #e2e8f0;
    }

    @@media (max-width: 768px) {
        .endorsements-container {
            padding: 1rem;
        }

        .stat-card {
            height: auto;
            padding: 1rem;
        }

        .endorsement-actions {
            flex-direction: column;
        }

        .endorsement-meta {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }
    }
</style>
