@namespace SynQcore.BlazorApp.Components.Social
@using Microsoft.AspNetCore.Components
@using SynQcore.BlazorApp.Services
@using SynQcore.BlazorApp.Services.StateManagement
@inject IPostService PostService
@inject StateManager StateManager
@inject IJSRuntime JS

<article class="simple-post-card" data-post-id="@Post.Id">
    <div class="post-header">
        <img src="@Post.AuthorAvatar" alt="@Post.AuthorName" class="author-avatar" />
        <div class="author-info">
            <a href="/perfil/@GetUserIdFromName(Post.AuthorName)" class="author-name">@Post.AuthorName</a>
            <div class="author-role">@Post.AuthorRole</div>
            <div class="post-time">@GetRelativeTime(Post.CreatedAt)</div>
        </div>

        <div class="post-menu">
            <button class="menu-btn" @onclick="ToggleMenu">
                <i class="fas fa-ellipsis-h"></i>
            </button>

            @if (showMenu)
            {
                <div class="post-menu-dropdown">
                    @if (IsCurrentUserPost())
                    {
                        <button class="menu-item edit-item" @onclick="EditPost">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        <button class="menu-item delete-item" @onclick="DeletePost">
                            <i class="fas fa-trash"></i> Excluir
                        </button>
                        <div class="menu-divider"></div>
                    }
                    <button class="menu-item" @onclick="BookmarkPost">
                        <i class="@(Post.IsBookmarked ? "fas fa-bookmark" : "far fa-bookmark")"></i>
                        @(Post.IsBookmarked ? "Remover dos salvos" : "Salvar")
                    </button>
                    <button class="menu-item" @onclick="CopyLink">
                        <i class="fas fa-link"></i> Copiar link
                    </button>
                    <button class="menu-item report-item" @onclick="ReportPost">
                        <i class="fas fa-flag"></i> Denunciar
                    </button>
                </div>
            }
        </div>
    </div>

    <div class="post-content">
        @((MarkupString)FormatContent(Post.Content))
    </div>

    @if (Post.Tags?.Length > 0)
    {
        <div class="post-tags">
            @foreach (var tag in Post.Tags)
            {
                <span class="tag">#@tag</span>
            }
        </div>
    }

    <div class="post-actions">
        <PostReactions PostId="Post.Id" 
                      TotalLikes="Post.LikeCount" 
                      CurrentReaction="Post.ReactionType"
                      ShowSimpleMode="false"
                      OnReactionChanged="OnReactionChanged" />
        <button class="action-btn" @onclick="ToggleComments">
            <i class="far fa-comment"></i> 
            <span>@(Post.CommentCount > 0 ? Post.CommentCount.ToString() : "Comentar")</span>
        </button>
        <button class="action-btn" @onclick="HandleShare">
            <i class="far fa-share-square"></i> 
            <span>@(Post.ShareCount > 0 ? Post.ShareCount.ToString() : "Compartilhar")</span>
        </button>
    </div>

    @if (showComments && Post.Comments?.Count > 0)
    {
        <div class="comments-section">
            @foreach (var comment in Post.Comments.Take(3))
            {
                <div class="comment">
                    <img src="@comment.AuthorAvatar" alt="@comment.AuthorName" class="comment-avatar" />
                    <div class="comment-content">
                        <strong>@comment.AuthorName</strong> @comment.Content
                    </div>
                </div>
            }
        </div>
    }
</article>

<EditPostModal @ref="editPostModal" 
               PostId="Post.Id"
               OnPostUpdated="OnPostUpdated" 
               OnClosed="() => Task.CompletedTask" />

@code {

    private bool showComments = false;

    private async Task OnReactionChanged(PostReactions.ReactionChangedArgs args)
    {
        // Atualizar modelo local
        Post.LikeCount = args.TotalLikes;
        Post.IsLiked = !string.IsNullOrEmpty(args.NewReaction);
        Post.ReactionType = args.NewReaction;
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleComments()
    {
        showComments = !showComments;

        if (showComments && (Post.Comments == null || !Post.Comments.Any()))
        {
            // Carrega comentários da API
            Post.Comments = await PostService.GetPostCommentsAsync(Post.Id);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleShare()
    {
        // Chamar callback se disponível
        if (OnShare.HasDelegate)
        {
            await OnShare.InvokeAsync();
        }
        else
        {
            // Fallback - incrementar contador localmente
            Post.ShareCount++;
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var diff = DateTime.Now - dateTime;
        if (diff.TotalDays >= 1) return $"{(int)diff.TotalDays}d";
        if (diff.TotalHours >= 1) return $"{(int)diff.TotalHours}h";
        return $"{(int)diff.TotalMinutes}m";
    }

    private string GetUserIdFromName(string authorName)
    {
        // Por enquanto, simples conversão do nome para ID
        // Futuramente vir da API
        return authorName.ToLower().Replace(" ", "-");
    }

    private string FormatContent(string content)
    {
        // Formato simples para hashtags e links
        content = System.Text.RegularExpressions.Regex.Replace(content,
        @"#(\w+)",
        "<span class=\"hashtag\">#$1</span>");

        return content;
    }

    // Novos métodos para gerenciamento de posts
    private bool showMenu = false;
    private EditPostModal? editPostModal;

    private bool IsCurrentUserPost()
    {
        var currentUser = StateManager.User.CurrentUser;
        if (currentUser == null) return false;
        
        // Comparar pelo nome do autor (futuramente usar ID)
        return Post.AuthorName.Equals(currentUser.Nome, StringComparison.OrdinalIgnoreCase);
    }

    private void ToggleMenu()
    {
        showMenu = !showMenu;
        StateHasChanged();
    }

    private async Task EditPost()
    {
        showMenu = false;
        
        if (OnEdit.HasDelegate)
        {
            await OnEdit.InvokeAsync(Post);
        }
        else if (editPostModal != null)
        {
            await editPostModal.ShowModal(Post);
        }
        
        StateHasChanged();
    }

    private async Task DeletePost()
    {
        showMenu = false;
        
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este post?");
        if (!confirmed) return;

        if (OnDelete.HasDelegate)
        {
            await OnDelete.InvokeAsync(Post);
        }
        else
        {
            // Fallback para a implementação original
            var success = await PostService.DeletePostAsync(Post.Id);
            if (success)
            {
                await JS.InvokeVoidAsync("showNotification", "Post excluído com sucesso!", "success");
                // Notificar componente pai para remover o post da lista
                if (OnPostDeleted.HasDelegate)
                {
                    await OnPostDeleted.InvokeAsync(Post.Id);
                }
            }
            else
            {
                await JS.InvokeVoidAsync("showNotification", "Erro ao excluir o post", "error");
            }
        }
    }

    private async Task BookmarkPost()
    {
        showMenu = false;
        var success = await PostService.BookmarkPostAsync(Post.Id);
        if (success)
        {
            Post.IsBookmarked = !Post.IsBookmarked;
            var message = Post.IsBookmarked ? "Post salvo nos favoritos!" : "Post removido dos favoritos!";
            await JS.InvokeVoidAsync("showNotification", message, "success");
            StateHasChanged();
        }
    }

    private async Task CopyLink()
    {
        showMenu = false;
        await JS.InvokeVoidAsync("copyToClipboard", $"/feed/{Post.Id}");
        await JS.InvokeVoidAsync("showNotification", "Link copiado para a área de transferência!", "success");
    }

    private async Task ReportPost()
    {
        showMenu = false;
        await JS.InvokeVoidAsync("showNotification", "Denúncia enviada. Obrigado pelo feedback!", "info");
    }

    private Task OnPostUpdated(PostModel updatedPost)
    {
        // Atualizar os dados do post
        Post.Content = updatedPost.Content;
        Post.Tags = updatedPost.Tags;
        Post.IsPublic = updatedPost.IsPublic;
        Post.Visibility = updatedPost.Visibility;
        StateHasChanged();
        return Task.CompletedTask;
    }

    // Parâmetros do componente
    [Parameter] public PostModel Post { get; set; } = new();
    [Parameter] public object? CurrentUser { get; set; }
    [Parameter] public EventCallback<PostModel> OnEdit { get; set; }
    [Parameter] public EventCallback<PostModel> OnDelete { get; set; }
    [Parameter] public EventCallback<string> OnTagClick { get; set; }
    [Parameter] public EventCallback<Guid> OnPostDeleted { get; set; } // Mantido para compatibilidade
    [Parameter] public EventCallback OnLike { get; set; }
    [Parameter] public EventCallback OnShare { get; set; }

    public class PostModel
    {
        public Guid Id { get; set; }
        public string AuthorName { get; set; } = "";
        public string AuthorRole { get; set; } = "";
        public string AuthorAvatar { get; set; } = "";
        public string Content { get; set; } = "";
        public string Title { get; set; } = "";
        public string? ImageUrl { get; set; }
        public DateTime CreatedAt { get; set; }
        public int LikeCount { get; set; }
        public int CommentCount { get; set; }
        public int ShareCount { get; set; }
        public bool IsLiked { get; set; }
        public string? ReactionType { get; set; }
        public bool IsSaved { get; set; }
        public bool IsOfficial { get; set; }
        public bool IsPinned { get; set; }
        public bool IsBookmarked { get; set; }
        public bool IsPublic { get; set; } = true;
        public string Visibility { get; set; } = "Company";
        public string[] Tags { get; set; } = Array.Empty<string>();
        public List<CommentModel>? Comments { get; set; }
    }

    public class CommentModel
    {
        public Guid Id { get; set; }
        public string AuthorName { get; set; } = "";
        public string AuthorAvatar { get; set; } = "";
        public string Content { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public int LikeCount { get; set; }
        public bool IsLiked { get; set; }
    }
}
