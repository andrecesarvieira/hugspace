@namespace SynQcore.BlazorApp.Components.Social
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS

<div class="modal-overlay" @onclick="CloseModal">
    <div class="modal-container" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h2>Criar Nova Postagem</h2>
            <button class="close-btn" @onclick="CloseModal">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div class="modal-body">
            <div class="user-info">
                <img src="/images/default-avatar.png" alt="Seu perfil" class="user-avatar" />
                <div class="user-details">
                    <div class="user-name">Admin</div>
                    <div class="privacy-selector">
                        <select @bind="postPrivacy" class="privacy-select">
                            <option value="public">üåç P√∫blico</option>
                            <option value="company">üè¢ Apenas empresa</option>
                            <option value="department">üë• Apenas meu departamento</option>
                            <option value="followers">üë§ Apenas seguidores</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="content-input-area">
                <textarea class="content-textarea"
                          placeholder="No que voc√™ est√° pensando?"
                          @bind="postContent"
                          @oninput="OnContentInput"
                          @onkeydown="HandleKeyDown"
                          rows="4"></textarea>

                <div class="character-count">
                    <span class="@(postContent.Length > maxCharacters ? "over-limit" : "")">
                        @postContent.Length / @maxCharacters
                    </span>
                </div>
            </div>

            @if (showMediaUpload)
            {
                <div class="media-upload-area">
                    <div class="upload-zone @(isDragging ? "dragging" : "")"
                         @ondragover="HandleDragOver"
                         @ondragenter="HandleDragEnter"
                         @ondragleave="HandleDragLeave"
                         @ondrop="HandleDrop">

                        @if (uploadedImages.Any())
                        {
                            <div class="uploaded-images">
                                @foreach (var image in uploadedImages)
                                {
                                    <div class="uploaded-image">
                                        <img src="@image.Url" alt="Uploaded" />
                                        <button class="remove-image" @onclick="() => RemoveImage(image.Id)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="upload-placeholder">
                                <i class="fas fa-cloud-upload-alt fa-2x"></i>
                                <p>Arraste imagens aqui ou clique para selecionar</p>
                                <input type="file"
                                       class="file-input"
                                       accept="image/*"
                                       multiple
                                       @onchange="HandleFileSelect" />
                            </div>
                        }
                    </div>
                </div>
            }

            @if (showPollCreator)
            {
                <div class="poll-creator">
                    <h4>Criar Enquete</h4>
                    <div class="poll-options">
                        @for (int i = 0; i < pollOptions.Count; i++)
                        {
                            var index = i; // Capture for closure
                            <div class="poll-option-input">
                                <input type="text"
                                       placeholder="@($"Op√ß√£o {index + 1}")"
                                       @bind="pollOptions[index]"
                                       class="option-input" />
                                @if (pollOptions.Count > 2)
                                {
                                    <button class="remove-option" @onclick="() => RemovePollOption(index)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                            </div>
                        }
                    </div>

                    @if (pollOptions.Count < 6)
                    {
                        <button class="add-option-btn" @onclick="AddPollOption">
                            <i class="fas fa-plus"></i> Adicionar op√ß√£o
                        </button>
                    }

                    <div class="poll-settings">
                        <label>
                            <input type="checkbox" @bind="allowMultipleVotes" />
                            Permitir m√∫ltiplas escolhas
                        </label>
                        <div class="poll-duration">
                            <label>Dura√ß√£o:</label>
                            <select @bind="pollDuration">
                                <option value="1">1 dia</option>
                                <option value="3">3 dias</option>
                                <option value="7">1 semana</option>
                                <option value="30">1 m√™s</option>
                            </select>
                        </div>
                    </div>
                </div>
            }

            @if (showEventCreator)
            {
                <div class="event-creator">
                    <h4>Criar Evento</h4>
                    <div class="event-form">
                        <input type="text"
                               placeholder="Nome do evento"
                               @bind="eventTitle"
                               class="event-input" />

                        <div class="datetime-inputs">
                            <div class="datetime-group">
                                <label>Data e hora de in√≠cio:</label>
                                <input type="datetime-local" @bind="eventStartDate" class="datetime-input" />
                            </div>
                            <div class="datetime-group">
                                <label>Data e hora de fim:</label>
                                <input type="datetime-local" @bind="eventEndDate" class="datetime-input" />
                            </div>
                        </div>

                        <input type="text"
                               placeholder="Local (opcional)"
                               @bind="eventLocation"
                               class="event-input" />

                        <textarea placeholder="Descri√ß√£o do evento..."
                                  @bind="eventDescription"
                                  class="event-description"
                                  rows="3"></textarea>
                    </div>
                </div>
            }

            <div class="hashtags-section">
                <div class="hashtags-input">
                    <input type="text"
                           placeholder="Adicionar hashtags (separadas por espa√ßo)"
                           @bind="hashtagsInput"
                           @onkeypress="HandleHashtagKeyPress"
                           class="hashtag-input" />
                </div>

                @if (hashtags.Any())
                {
                    <div class="hashtags-display">
                        @foreach (var tag in hashtags)
                        {
                            <span class="hashtag">
                                #@tag
                                <button class="remove-hashtag" @onclick="() => RemoveHashtag(tag)">√ó</button>
                            </span>
                        }
                    </div>
                }
            </div>
        </div>

        <div class="modal-footer">
            <div class="post-options">
                <button class="option-btn @(showMediaUpload ? "active" : "")"
                        @onclick="ToggleMediaUpload"
                        title="Adicionar imagens">
                    <i class="fas fa-image"></i>
                </button>

                <button class="option-btn @(showPollCreator ? "active" : "")"
                        @onclick="TogglePollCreator"
                        title="Criar enquete">
                    <i class="fas fa-poll"></i>
                </button>

                <button class="option-btn @(showEventCreator ? "active" : "")"
                        @onclick="ToggleEventCreator"
                        title="Criar evento">
                    <i class="fas fa-calendar"></i>
                </button>

                <button class="option-btn"
                        @onclick="AddMention"
                        title="Mencionar algu√©m">
                    <i class="fas fa-at"></i>
                </button>

                <button class="option-btn"
                        @onclick="AddLocation"
                        title="Adicionar localiza√ß√£o">
                    <i class="fas fa-map-marker-alt"></i>
                </button>
            </div>

            <div class="action-buttons">
                <button class="cancel-btn" @onclick="CloseModal">
                    Cancelar
                </button>
                <button class="publish-btn"
                        @onclick="PublishPost"
                        disabled="@(!CanPublish)">
                    @if (isPublishing)
                    {
                        <i class="fas fa-spinner fa-spin"></i>
                        <span>Publicando...</span>
                    }
                    else
                    {
                        <span>Publicar</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<PostModel> OnPostCreated { get; set; }

    // Post content
    private string postContent = "";
    private string postPrivacy = "public";
    private readonly int maxCharacters = 2000;
    private List<string> hashtags = new();
    private string hashtagsInput = "";

    // Media upload
    private bool showMediaUpload = false;
    private bool isDragging = false;
    private List<ImageUpload> uploadedImages = new();

    // Poll creation
    private bool showPollCreator = false;
    private List<string> pollOptions = new() { "", "" };
    private bool allowMultipleVotes = false;
    private int pollDuration = 7;

    // Event creation
    private bool showEventCreator = false;
    private string eventTitle = "";
    private DateTime eventStartDate = DateTime.Now.AddDays(1);
    private DateTime eventEndDate = DateTime.Now.AddDays(1).AddHours(1);
    private string eventLocation = "";
    private string eventDescription = "";

    // State
    private bool isPublishing = false;

    private bool CanPublish =>
        !string.IsNullOrWhiteSpace(postContent) &&
        postContent.Length <= maxCharacters &&
        !isPublishing;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("focusElement", ".content-textarea");
        }
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private async Task PublishPost()
    {
        if (!CanPublish) return;

        isPublishing = true;
        StateHasChanged();

        try
        {
            await Task.Delay(1000); // Simulate API call

            var newPost = new PostModel
            {
                Id = Guid.NewGuid(),
                AuthorName = "Admin", // TODO: Get from auth context
                AuthorRole = "Administrador",
                AuthorAvatar = "/images/default-avatar.png",
                Content = postContent.Trim(),
                CreatedAt = DateTime.Now,
                LikeCount = 0,
                CommentCount = 0,
                ShareCount = 0,
                IsLiked = false,
                IsSaved = false,
                Tags = hashtags.ToArray(),
                Comments = new List<CommentModel>()
            };

            await OnPostCreated.InvokeAsync(newPost);
            await JS.InvokeVoidAsync("showNotification", "Postagem publicada com sucesso!", "success");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("showNotification", $"Erro ao publicar: {ex.Message}", "error");
        }
        finally
        {
            isPublishing = false;
            StateHasChanged();
        }
    }

    private void OnContentInput(ChangeEventArgs e)
    {
        postContent = e.Value?.ToString() ?? "";
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && e.CtrlKey && CanPublish)
        {
            await PublishPost();
        }
    }

    private void ToggleMediaUpload()
    {
        showMediaUpload = !showMediaUpload;
        if (showMediaUpload)
        {
            showPollCreator = false;
            showEventCreator = false;
        }
    }

    private void TogglePollCreator()
    {
        showPollCreator = !showPollCreator;
        if (showPollCreator)
        {
            showMediaUpload = false;
            showEventCreator = false;
        }
    }

    private void ToggleEventCreator()
    {
        showEventCreator = !showEventCreator;
        if (showEventCreator)
        {
            showMediaUpload = false;
            showPollCreator = false;
        }
    }

    // Media upload handlers
    private void HandleDragOver(DragEventArgs e) => e.DataTransfer.DropEffect = "copy";
    private void HandleDragEnter(DragEventArgs e) => isDragging = true;
    private void HandleDragLeave(DragEventArgs e) => isDragging = false;

    private async Task HandleDrop(DragEventArgs e)
    {
        isDragging = false;
        // TODO: Handle file drop
        await JS.InvokeVoidAsync("console.log", "Files dropped");
    }

    private async Task HandleFileSelect(ChangeEventArgs e)
    {
        // TODO: Handle file selection
        await JS.InvokeVoidAsync("console.log", "Files selected");
    }

    private void RemoveImage(Guid imageId)
    {
        uploadedImages.RemoveAll(img => img.Id == imageId);
    }

    // Poll handlers
    private void AddPollOption()
    {
        if (pollOptions.Count < 6)
        {
            pollOptions.Add("");
        }
    }

    private void RemovePollOption(int index)
    {
        if (pollOptions.Count > 2)
        {
            pollOptions.RemoveAt(index);
        }
    }

    // Hashtag handlers
    private void HandleHashtagKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == " ")
        {
            AddHashtagsFromInput();
        }
    }

    private void AddHashtagsFromInput()
    {
        if (string.IsNullOrWhiteSpace(hashtagsInput)) return;

        var newTags = hashtagsInput
            .Split(' ', StringSplitOptions.RemoveEmptyEntries)
            .Select(tag => tag.Trim('#', ' ').ToLower())
            .Where(tag => !string.IsNullOrEmpty(tag) && !hashtags.Contains(tag))
            .Take(10 - hashtags.Count); // Limit to 10 hashtags total

        hashtags.AddRange(newTags);
        hashtagsInput = "";
    }

    private void RemoveHashtag(string tag)
    {
        hashtags.Remove(tag);
    }

    private void AddMention()
    {
        // TODO: Open mention picker
    }

    private void AddLocation()
    {
        // TODO: Open location picker
    }

    // Helper classes
    public class ImageUpload
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public string Url { get; set; } = "";
        public string FileName { get; set; } = "";
        public long Size { get; set; }
    }

    public class PostModel
    {
        public Guid Id { get; set; }
        public string AuthorName { get; set; } = "";
        public string AuthorRole { get; set; } = "";
        public string AuthorAvatar { get; set; } = "";
        public string Content { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public int LikeCount { get; set; }
        public int CommentCount { get; set; }
        public int ShareCount { get; set; }
        public bool IsLiked { get; set; }
        public bool IsSaved { get; set; }
        public string[] Tags { get; set; } = Array.Empty<string>();
        public List<CommentModel>? Comments { get; set; }
    }

    public class CommentModel
    {
        public Guid Id { get; set; }
        public string AuthorName { get; set; } = "";
        public string AuthorAvatar { get; set; } = "";
        public string Content { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public int LikeCount { get; set; }
        public bool IsLiked { get; set; }
    }
}

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(4px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        padding: 1rem;
    }

    .modal-container {
        background: white;
        border-radius: 1rem;
        max-width: 600px;
        width: 100%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        animation: modalSlideIn 0.3s ease-out;
    }

    @@keyframes modalSlideIn {
        from {
            opacity: 0;
            transform: translateY(-20px) scale(0.95);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem 1.5rem 0 1.5rem;
        border-bottom: 1px solid #e2e8f0;
    }

    .modal-header h2 {
        margin: 0;
        color: #2d3748;
        font-size: 1.2rem;
        font-weight: 600;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 1.2rem;
        color: #a0aec0;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: all 0.2s;
    }

    .close-btn:hover {
        background: #f7fafc;
        color: #4a5568;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .user-info {
        display: flex;
        gap: 0.75rem;
        margin-bottom: 1rem;
    }

    .user-avatar {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        object-fit: cover;
    }

    .user-details {
        flex: 1;
    }

    .user-name {
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 0.25rem;
    }

    .privacy-selector {
        position: relative;
    }

    .privacy-select {
        background: #f7fafc;
        border: 1px solid #e2e8f0;
        border-radius: 1rem;
        padding: 0.25rem 0.75rem;
        font-size: 0.85rem;
        color: #4a5568;
        cursor: pointer;
    }

    .content-input-area {
        position: relative;
        margin-bottom: 1rem;
    }

    .content-textarea {
        width: 100%;
        border: none;
        resize: none;
        font-size: 1.1rem;
        font-family: inherit;
        line-height: 1.6;
        color: #2d3748;
        background: transparent;
        padding: 1rem 0;
        min-height: 120px;
    }

    .content-textarea:focus {
        outline: none;
    }

    .content-textarea::placeholder {
        color: #a0aec0;
    }

    .character-count {
        position: absolute;
        bottom: 0.5rem;
        right: 0;
        font-size: 0.8rem;
        color: #a0aec0;
    }

    .character-count .over-limit {
        color: #e53e3e;
        font-weight: 600;
    }

    .media-upload-area {
        margin-bottom: 1rem;
        border: 2px dashed #e2e8f0;
        border-radius: 0.75rem;
        background: #f7fafc;
        transition: all 0.3s;
    }

    .media-upload-area.dragging {
        border-color: #5a67d8;
        background: rgba(90, 103, 216, 0.05);
    }

    .upload-zone {
        padding: 1.5rem;
        text-align: center;
        position: relative;
    }

    .upload-placeholder {
        color: #718096;
    }

    .upload-placeholder i {
        color: #a0aec0;
        margin-bottom: 0.5rem;
    }

    .upload-placeholder p {
        margin: 0.5rem 0;
    }

    .file-input {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        opacity: 0;
        cursor: pointer;
    }

    .uploaded-images {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 0.5rem;
    }

    .uploaded-image {
        position: relative;
        aspect-ratio: 1;
        border-radius: 0.5rem;
        overflow: hidden;
    }

    .uploaded-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .remove-image {
        position: absolute;
        top: 0.25rem;
        right: 0.25rem;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        cursor: pointer;
        font-size: 0.8rem;
    }

    .poll-creator, .event-creator {
        margin-bottom: 1rem;
        padding: 1rem;
        background: #f7fafc;
        border-radius: 0.75rem;
        border: 1px solid #e2e8f0;
    }

    .poll-creator h4, .event-creator h4 {
        margin: 0 0 1rem 0;
        color: #2d3748;
        font-size: 1rem;
    }

    .poll-options {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .poll-option-input {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .option-input {
        flex: 1;
        padding: 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        font-size: 0.9rem;
    }

    .remove-option {
        background: #e53e3e;
        color: white;
        border: none;
        border-radius: 50%;
        width: 28px;
        height: 28px;
        cursor: pointer;
        font-size: 0.8rem;
    }

    .add-option-btn {
        background: none;
        border: 1px dashed #a0aec0;
        border-radius: 0.5rem;
        padding: 0.75rem;
        color: #5a67d8;
        cursor: pointer;
        transition: all 0.2s;
        margin-bottom: 1rem;
    }

    .add-option-btn:hover {
        border-color: #5a67d8;
        background: rgba(90, 103, 216, 0.05);
    }

    .poll-settings {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
    }

    .poll-settings label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #4a5568;
        font-size: 0.9rem;
    }

    .poll-duration {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #4a5568;
        font-size: 0.9rem;
    }

    .event-form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .event-input, .event-description {
        padding: 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        font-size: 0.9rem;
        font-family: inherit;
    }

    .datetime-inputs {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    .datetime-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .datetime-group label {
        color: #4a5568;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .datetime-input {
        padding: 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        font-size: 0.9rem;
    }

    .hashtags-section {
        margin-bottom: 1rem;
    }

    .hashtag-input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
    }

    .hashtags-display {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .hashtag {
        background: linear-gradient(135deg, #5a67d8, #667eea);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.8rem;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .remove-hashtag {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        font-size: 1rem;
        line-height: 1;
    }

    .modal-footer {
        padding: 1rem 1.5rem 1.5rem;
        border-top: 1px solid #e2e8f0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .post-options {
        display: flex;
        gap: 0.5rem;
    }

    .option-btn {
        background: none;
        border: 1px solid #e2e8f0;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #718096;
        cursor: pointer;
        transition: all 0.2s;
    }

    .option-btn:hover, .option-btn.active {
        border-color: #5a67d8;
        color: #5a67d8;
        background: rgba(90, 103, 216, 0.05);
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
    }

    .cancel-btn, .publish-btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 0.5rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .cancel-btn {
        background: #f7fafc;
        color: #4a5568;
        border: 1px solid #e2e8f0;
    }

    .cancel-btn:hover {
        background: #edf2f7;
    }

    .publish-btn {
        background: linear-gradient(135deg, #5a67d8, #667eea);
        color: white;
    }

    .publish-btn:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(90, 103, 216, 0.3);
    }

    .publish-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }

    /* Mobile responsiveness */
    @@media (max-width: 768px) {
        .modal-container {
            margin: 0.5rem;
            max-height: 95vh;
        }

        .modal-header, .modal-body, .modal-footer {
            padding: 1rem;
        }

        .datetime-inputs {
            grid-template-columns: 1fr;
        }

        .action-buttons {
            flex-direction: column;
            width: 100%;
        }

        .cancel-btn, .publish-btn {
            width: 100%;
            justify-content: center;
        }
    }
</style>
