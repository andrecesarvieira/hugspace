@namespace SynQcore.BlazorApp.Components.Social
@using Microsoft.AspNetCore.Components
@using SynQcore.BlazorApp.Services
@inject IPostService PostService
@inject IJSRuntime JS

    <div class="post-reactions" 
         style="display: flex !important; 
                align-items: center !important; 
                gap: 0.5rem !important;">
    @if (ShowSimpleMode)
    {
        <!-- Modo simples - apenas like estilo LinkedIn -->
        <button class="reaction-btn @(CurrentReaction == "Like" ? "active active-like" : "")" 
                style="background: @(CurrentReaction == "Like" ? "linear-gradient(135deg, #e53e3e 0%, #c53030 100%)" : "transparent") !important; 
                       border: @(CurrentReaction == "Like" ? "none" : "1px solid var(--slate-200)") !important; 
                       color: @(CurrentReaction == "Like" ? "white" : "var(--slate-600)") !important; 
                       padding: 0.5rem 0.75rem !important; 
                       border-radius: 8px !important; 
                       font-family: var(--font-family) !important; 
                       font-weight: 500 !important; 
                       font-size: 0.875rem !important; 
                       transition: all 0.2s ease !important; 
                       cursor: pointer !important; 
                       display: flex !important; 
                       align-items: center !important; 
                       gap: 0.5rem !important;"
                @onclick="HandleLikeClick" 
                disabled="@isReacting">
            <i class="@(CurrentReaction == "Like" ? "fas fa-heart" : "far fa-heart")" 
               style="font-size: 0.9rem !important;"></i> 
            <span class="like-count" 
                  style="font-family: var(--font-family) !important; 
                         font-weight: 500 !important;"
                  @onclick="ShowLikesModal" @onclick:stopPropagation="true">
                @if (TotalLikes > 0)
                {
                    @TotalLikes
                }
                else
                {
                    <span>Curtir</span>
                }
            </span>
        </button>
    }
    else
    {
        <!-- Modo avanÃ§ado estilo LinkedIn -->
        <div class="reactions-container" style="position: relative !important;">
            <div class="primary-reaction">
                <button class="reaction-btn @GetActiveClass() @(isReacting ? "loading" : "")" 
                        style="background: @GetReactionBackground() !important; 
                               border: @(HasReaction ? "none" : "1px solid var(--slate-200)") !important; 
                               color: @(HasReaction ? "white" : "var(--slate-600)") !important; 
                               padding: 0.5rem 0.75rem !important; 
                               border-radius: 8px !important; 
                               font-family: var(--font-family) !important; 
                               font-weight: 500 !important; 
                               font-size: 0.875rem !important; 
                               transition: all 0.2s ease !important; 
                               cursor: pointer !important; 
                               display: flex !important; 
                               align-items: center !important; 
                               gap: 0.5rem !important;"
                        @onclick="HandlePrimaryReaction" 
                        disabled="@isReacting"
                        @onmouseenter="() => showReactionPicker = true"
                        @onmouseleave="() => DelayHideReactionPicker()">
                    <i class="@GetCurrentReactionIcon()" 
                       style="font-size: 0.9rem !important;"></i> 
                    <span class="like-count" 
                          style="font-family: var(--font-family) !important; 
                                 font-weight: 500 !important;"
                          @onclick="ShowLikesModal" @onclick:stopPropagation="true">
                        @if (TotalLikes > 0)
                        {
                            @TotalLikes
                        }
                        else
                        {
                            <span>@GetReactionText()</span>
                        }
                    </span>
                </button>
                
                @if (showReactionPicker)
                {
                    <div class="reaction-picker" 
                         style="position: absolute !important; 
                                bottom: 100% !important; 
                                left: 0 !important; 
                                background: white !important; 
                                border-radius: 12px !important; 
                                box-shadow: 0 8px 32px rgba(0,0,0,0.12) !important; 
                                padding: 0.75rem !important; 
                                margin-bottom: 0.5rem !important; 
                                border: 1px solid var(--slate-200) !important; 
                                z-index: 1000 !important; 
                                min-width: 200px !important; 
                                display: flex !important; 
                                flex-direction: column !important; 
                                gap: 0.5rem !important;"
                         @onmouseenter="() => cancelHideTimer = true"
                         @onmouseleave="() => HideReactionPicker()">
                        @foreach (var reaction in AvailableReactions)
                        {
                            <button class="reaction-option @(CurrentReaction == reaction.Type ? "selected" : "")" 
                                    style="background: @(CurrentReaction == reaction.Type ? GetReactionBackgroundByType(reaction.Type) : "transparent") !important; 
                                           border: @(CurrentReaction == reaction.Type ? "none" : "1px solid var(--slate-100)") !important; 
                                           color: @(CurrentReaction == reaction.Type ? "white" : "var(--slate-700)") !important; 
                                           padding: 0.5rem 0.75rem !important; 
                                           border-radius: 8px !important; 
                                           font-family: var(--font-family) !important; 
                                           font-weight: 500 !important; 
                                           font-size: 0.875rem !important; 
                                           cursor: pointer !important; 
                                           display: flex !important; 
                                           align-items: center !important; 
                                           gap: 0.5rem !important; 
                                           transition: all 0.2s ease !important; 
                                           width: 100% !important;"
                                    @onclick="() => HandleReaction(reaction.Type)"
                                    title="@reaction.Label">
                                <i class="@reaction.Icon" style="font-size: 0.9rem !important;"></i>
                                <span class="reaction-label" 
                                      style="font-family: var(--font-family) !important; 
                                             font-weight: 500 !important;">
                                    @reaction.Label
                                </span>
                            </button>
                        }
                        
                        @if (HasReaction)
                        {
                            <div class="reaction-divider" 
                                 style="height: 1px !important; 
                                        background: var(--slate-200) !important; 
                                        margin: 0.25rem 0 !important;"></div>
                            <button class="reaction-remove" 
                                    style="background: transparent !important; 
                                           border: 1px solid var(--red-200) !important; 
                                           color: var(--red-600) !important; 
                                           padding: 0.5rem 0.75rem !important; 
                                           border-radius: 8px !important; 
                                           font-family: var(--font-family) !important; 
                                           font-weight: 500 !important; 
                                           font-size: 0.875rem !important; 
                                           cursor: pointer !important; 
                                           display: flex !important; 
                                           align-items: center !important; 
                                           gap: 0.5rem !important; 
                                           transition: all 0.2s ease !important; 
                                           width: 100% !important;"
                                    @onclick="() => HandleReaction(null)">
                                <i class="fas fa-times" style="font-size: 0.9rem !important;"></i>
                                <span style="font-family: var(--font-family) !important; 
                                             font-weight: 500 !important;">Remover</span>
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
    }
    
    <PostLikesModal PostId="PostId" 
                    IsVisible="showLikesModal" 
                    OnClose="() => { showLikesModal = false; StateHasChanged(); }" />
</div>

@code {
    [Parameter] public Guid PostId { get; set; }
    [Parameter] public int TotalLikes { get; set; }
    [Parameter] public string? CurrentReaction { get; set; }
    [Parameter] public bool ShowSimpleMode { get; set; } = false;
    [Parameter] public EventCallback<ReactionChangedArgs> OnReactionChanged { get; set; }

    private bool isReacting = false;
    private bool showReactionPicker = false;
    private bool showLikesModal = false;
    private bool cancelHideTimer = false;
    private Timer? hideTimer;

    private bool HasReaction => !string.IsNullOrEmpty(CurrentReaction);

    private readonly List<ReactionType> AvailableReactions = new()
    {
        new("Like", "fas fa-heart", "Curtir", "#e53e3e"),
        new("Helpful", "fas fa-thumbs-up", "Ãtil", "#38a169"),
        new("Insightful", "fas fa-lightbulb", "Perspicaz", "#d69e2e"),
        new("Celebrate", "fas fa-star", "Celebrar", "#805ad5")
    };

    private async Task HandlePrimaryReaction()
    {
        Console.WriteLine($"[PostReactions] HandlePrimaryReaction - HasReaction: {HasReaction}, Current: {CurrentReaction}");
        
        if (HasReaction)
        {
            await HandleReaction(null); // Remove reaÃ§Ã£o atual
        }
        else
        {
            await HandleReaction("Like"); // Adiciona like padrÃ£o
        }
    }

    private async Task HandleLikeClick()
    {
        Console.WriteLine($"[PostReactions] HandleLikeClick - Current: {CurrentReaction}");
        
        if (CurrentReaction == "Like")
        {
            await HandleReaction(null);
        }
        else
        {
            await HandleReaction("Like");
        }
    }

    private async Task HandleReaction(string? reactionType)
    {
        if (isReacting) return;

        isReacting = true;
        showReactionPicker = false;

        try
        {
            bool success;
            int newTotal = TotalLikes;

            if (reactionType == null)
            {
                // Remover reaÃ§Ã£o atual
                success = await PostService.UnlikePostAsync(PostId);
                if (success)
                {
                    newTotal = Math.Max(0, TotalLikes - 1);
                    CurrentReaction = null;
                }
            }
            else
            {
                // Adicionar/alterar reaÃ§Ã£o - passar o tipo de reaÃ§Ã£o
                success = await PostService.LikePostAsync(PostId, reactionType);
                if (success)
                {
                    // Se jÃ¡ tinha uma reaÃ§Ã£o, o total nÃ£o muda
                    // Se nÃ£o tinha reaÃ§Ã£o, incrementa
                    if (!HasReaction)
                        newTotal = TotalLikes + 1;
                    
                    CurrentReaction = reactionType;
                }
            }

            if (success)
            {
                TotalLikes = newTotal;
                
                if (OnReactionChanged.HasDelegate)
                {
                    await OnReactionChanged.InvokeAsync(new ReactionChangedArgs
                    {
                        PostId = PostId,
                        NewReaction = CurrentReaction,
                        TotalLikes = TotalLikes
                    });
                }

                await InvokeAsync(StateHasChanged);
            }
            else
            {
                await JS.InvokeVoidAsync("showNotification", "Erro ao processar reaÃ§Ã£o", "error");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("showNotification", "Erro inesperado ao processar reaÃ§Ã£o", "error");
            Console.WriteLine($"Erro ao processar reaÃ§Ã£o: {ex.Message}");
        }
        finally
        {
            isReacting = false;
        }
    }

    private string GetCurrentReactionIcon()
    {
        if (string.IsNullOrEmpty(CurrentReaction))
            return "far fa-heart";

        var reaction = AvailableReactions.FirstOrDefault(r => r.Type == CurrentReaction);
        return reaction?.Icon ?? "far fa-heart";
    }

    private string GetActiveClass()
    {
        if (!HasReaction) return "";

        return CurrentReaction?.ToLower() switch
        {
            "like" => "active active-like",
            "helpful" => "active active-helpful",
            "insightful" => "active active-insightful",
            "celebrate" => "active active-celebrate",
            _ => "active"
        };
    }

    private string GetReactionText()
    {
        if (!HasReaction) return "Curtir";

        return CurrentReaction switch
        {
            "Like" => "Curtir",
            "Helpful" => "Ãtil",
            "Insightful" => "Perspicaz",
            "Celebrate" => "Celebrar",
            _ => "Curtir"
        };
    }

    private string GetReactionBackground()
    {
        if (!HasReaction) return "transparent";

        return CurrentReaction switch
        {
            "Like" => "linear-gradient(135deg, #e53e3e 0%, #c53030 100%)",
            "Helpful" => "linear-gradient(135deg, #38a169 0%, #2f855a 100%)",
            "Insightful" => "linear-gradient(135deg, #d69e2e 0%, #b7791f 100%)",
            "Celebrate" => "linear-gradient(135deg, #805ad5 0%, #6b46c1 100%)",
            _ => "transparent"
        };
    }

    private string GetReactionBackgroundByType(string type)
    {
        return type switch
        {
            "Like" => "linear-gradient(135deg, #e53e3e 0%, #c53030 100%)",
            "Helpful" => "linear-gradient(135deg, #38a169 0%, #2f855a 100%)",
            "Insightful" => "linear-gradient(135deg, #d69e2e 0%, #b7791f 100%)",
            "Celebrate" => "linear-gradient(135deg, #805ad5 0%, #6b46c1 100%)",
            _ => "transparent"
        };
    }

    private void DelayHideReactionPicker()
    {
        cancelHideTimer = false;
        hideTimer?.Dispose();
        hideTimer = new Timer(_ =>
        {
            if (!cancelHideTimer)
            {
                InvokeAsync(() =>
                {
                    showReactionPicker = false;
                    StateHasChanged();
                });
            }
        }, null, 500, Timeout.Infinite);
    }

    private void HideReactionPicker()
    {
        cancelHideTimer = false;
        showReactionPicker = false;
        StateHasChanged();
    }

    private async Task ShowLikesModal()
    {
        showLikesModal = true;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        hideTimer?.Dispose();
    }

    public class ReactionType
    {
        public string Type { get; }
        public string Icon { get; }
        public string Label { get; }
        public string Color { get; }

        public ReactionType(string type, string icon, string label, string color)
        {
            Type = type;
            Icon = icon;
            Label = label;
            Color = color;
        }
    }

    public class ReactionChangedArgs
    {
        public Guid PostId { get; set; }
        public string? NewReaction { get; set; }
        public int TotalLikes { get; set; }
    }
}