#!/usr/bin/env python3
"""
Testes de Threads de Discuss√£o - SynQcore API

Este script testa todos os endpoints de threads de discuss√£o:
- GET /api/discussion-threads
- POST /api/discussion-threads
- GET /api/discussion-threads/{id}
- PUT /api/discussion-threads/{id}
- DELETE /api/discussion-threads/{id}
- POST /api/discussion-threads/{id}/replies
- GET /api/discussion-threads/{id}/replies
- POST /api/discussion-threads/{id}/like
- POST /api/discussion-threads/{id}/follow
- GET /api/discussion-threads/trending

Execu√ß√£o: python test_discussion_threads.py
"""

import sys
import os
import time
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from utils.api_test_utils import APITestClient, wait_between_tests, create_sample_data

def test_discussion_threads_endpoints(client: APITestClient = None):
    """Testa todos os endpoints de threads de discuss√£o"""

    if not client:
        client = APITestClient()
        if not client.authenticate():
            client.log_error("Falha na autentica√ß√£o. Teste abortado.")
            return client

    client.log_info("üí¨ Iniciando testes de threads de discuss√£o")

    # Dados de exemplo
    timestamp = int(time.time())

    # 1. Teste de listagem de threads
    client.log_info("1Ô∏è‚É£  Testando listagem de threads")
    result = client.make_request('GET', '/api/discussion-threads')
    client.print_test_result(result)
    wait_between_tests()

    # 2. Teste de cria√ß√£o de thread
    client.log_info("2Ô∏è‚É£  Testando cria√ß√£o de thread")
    thread_data = {
        "title": f"Thread de Discuss√£o {timestamp}",
        "content": "Esta √© uma thread de discuss√£o para teste. Vamos discutir t√≥picos importantes da empresa.\n\n**Pontos principais:**\n- Ponto 1\n- Ponto 2\n- Ponto 3",
        "tags": ["discussao", "teste", "corporativo"],
        "categoryId": None,  # Ser√° definido se categoria existir
        "isPublic": True,
        "allowReplies": True,
        "isPinned": False
    }

    result = client.make_request('POST', '/api/discussion-threads', data=thread_data)
    client.print_test_result(result)

    # Armazenar ID da thread criada
    created_thread_id = None
    if result.success and result.response_data:
        created_thread_id = result.response_data.get('id')
        client.log_success(f"Thread criada com ID: {created_thread_id}")

    wait_between_tests()

    # 3. Teste de obten√ß√£o de thread por ID
    if created_thread_id:
        client.log_info("3Ô∏è‚É£  Testando obten√ß√£o por ID")
        result = client.make_request('GET', f'/api/discussion-threads/{created_thread_id}')
        client.print_test_result(result)
        wait_between_tests()

    # 4. Teste de cria√ß√£o de resposta
    if created_thread_id:
        client.log_info("4Ô∏è‚É£  Testando cria√ß√£o de resposta")
        reply_data = {
            "content": "Esta √© uma resposta de teste √† thread de discuss√£o. Concordo com os pontos levantados.",
            "isInternal": True
        }
        result = client.make_request('POST', f'/api/discussion-threads/{created_thread_id}/replies', data=reply_data)
        client.print_test_result(result)

        # Armazenar ID da resposta criada
        created_reply_id = None
        if result.success and result.response_data:
            created_reply_id = result.response_data.get('id')

        wait_between_tests()

    # 5. Teste de obten√ß√£o de respostas
    if created_thread_id:
        client.log_info("5Ô∏è‚É£  Testando obten√ß√£o de respostas")
        result = client.make_request('GET', f'/api/discussion-threads/{created_thread_id}/replies')
        client.print_test_result(result)
        wait_between_tests()

    # 6. Teste de curtir thread
    if created_thread_id:
        client.log_info("6Ô∏è‚É£  Testando curtir thread")
        result = client.make_request('POST', f'/api/discussion-threads/{created_thread_id}/like')
        client.print_test_result(result)
        wait_between_tests()

    # 7. Teste de seguir thread
    if created_thread_id:
        client.log_info("7Ô∏è‚É£  Testando seguir thread")
        result = client.make_request('POST', f'/api/discussion-threads/{created_thread_id}/follow')
        client.print_test_result(result)
        wait_between_tests()

    # 8. Teste de threads em trending
    client.log_info("8Ô∏è‚É£  Testando threads em trending")
    result = client.make_request('GET', '/api/discussion-threads/trending')
    client.print_test_result(result)
    wait_between_tests()

    # 9. Teste de atualiza√ß√£o de thread
    if created_thread_id:
        client.log_info("9Ô∏è‚É£  Testando atualiza√ß√£o de thread")
        update_data = {
            "title": f"Thread Atualizada {timestamp}",
            "content": "Conte√∫do atualizado da thread de discuss√£o com novas informa√ß√µes.",
            "tags": ["discussao", "teste", "atualizado"],
            "isPublic": True,
            "allowReplies": True,
            "isPinned": True  # Fixando a thread
        }
        result = client.make_request('PUT', f'/api/discussion-threads/{created_thread_id}', data=update_data)
        client.print_test_result(result)
        wait_between_tests()

    # 10. Teste de cria√ß√£o de m√∫ltiplas respostas
    if created_thread_id:
        client.log_info("üîü Testando m√∫ltiplas respostas")
        replies = [
            {"content": "Primeira resposta adicional", "isInternal": True},
            {"content": "Segunda resposta adicional", "isInternal": False},
            {"content": "Terceira resposta adicional", "isInternal": True}
        ]

        for i, reply_data in enumerate(replies):
            client.log_info(f"üîü.{i+1} Criando resposta {i+1}")
            result = client.make_request('POST', f'/api/discussion-threads/{created_thread_id}/replies', data=reply_data)
            client.print_test_result(result)
            wait_between_tests()

    # 11. Teste de listagem com filtros
    client.log_info("1Ô∏è‚É£1Ô∏è‚É£ Testando listagem com filtros")
    result = client.make_request('GET', '/api/discussion-threads', params={'tags': 'teste', 'isPublic': True})
    client.print_test_result(result)
    wait_between_tests()

    # 12. Teste de listagem com pagina√ß√£o
    client.log_info("1Ô∏è‚É£2Ô∏è‚É£ Testando listagem com pagina√ß√£o")
    result = client.make_request('GET', '/api/discussion-threads', params={'page': 1, 'pageSize': 5})
    client.print_test_result(result)
    wait_between_tests()

    # 13. Teste de busca por t√≠tulo
    client.log_info("1Ô∏è‚É£3Ô∏è‚É£ Testando busca por t√≠tulo")
    result = client.make_request('GET', '/api/discussion-threads', params={'searchTerm': 'teste'})
    client.print_test_result(result)
    wait_between_tests()

    # 14. Teste de threads fixadas
    client.log_info("1Ô∏è‚É£4Ô∏è‚É£ Testando threads fixadas")
    result = client.make_request('GET', '/api/discussion-threads', params={'isPinned': True})
    client.print_test_result(result)
    wait_between_tests()

    # 15. Teste de curtir novamente (descurtir)
    if created_thread_id:
        client.log_info("1Ô∏è‚É£5Ô∏è‚É£ Testando descurtir thread")
        result = client.make_request('POST', f'/api/discussion-threads/{created_thread_id}/like')
        client.print_test_result(result)
        wait_between_tests()

    # 16. Teste de parar de seguir thread
    if created_thread_id:
        client.log_info("1Ô∏è‚É£6Ô∏è‚É£ Testando parar de seguir thread")
        result = client.make_request('POST', f'/api/discussion-threads/{created_thread_id}/follow')
        client.print_test_result(result)
        wait_between_tests()

    # 17. Teste de cria√ß√£o com dados inv√°lidos
    client.log_info("1Ô∏è‚É£7Ô∏è‚É£ Testando cria√ß√£o com dados inv√°lidos")
    invalid_data = {
        "title": "",  # T√≠tulo vazio
        "content": "",  # Conte√∫do vazio
        "tags": [],  # Sem tags
        "isPublic": True,
        "allowReplies": True
    }
    result = client.make_request('POST', '/api/discussion-threads', data=invalid_data)
    client.print_test_result(result)
    wait_between_tests()

    # 18. Teste de obten√ß√£o com ID inv√°lido
    client.log_info("1Ô∏è‚É£8Ô∏è‚É£ Testando obten√ß√£o com ID inv√°lido")
    result = client.make_request('GET', '/api/discussion-threads/00000000-0000-0000-0000-000000000000')
    client.print_test_result(result)
    wait_between_tests()

    # 19. Teste de exclus√£o de thread
    if created_thread_id:
        client.log_info("1Ô∏è‚É£9Ô∏è‚É£ Testando exclus√£o de thread")
        result = client.make_request('DELETE', f'/api/discussion-threads/{created_thread_id}')
        client.print_test_result(result)
        wait_between_tests()

        # Verificar se foi exclu√≠da
        client.log_info("2Ô∏è‚É£0Ô∏è‚É£ Verificando se thread foi exclu√≠da")
        result = client.make_request('GET', f'/api/discussion-threads/{created_thread_id}')
        client.print_test_result(result)
        if not result.success:
            client.log_success("Thread foi exclu√≠da com sucesso")

    return client, created_thread_id

def main():
    """Fun√ß√£o principal de execu√ß√£o dos testes"""
    print("üöÄ SynQcore API - Testes de Threads de Discuss√£o")
    print("=" * 50)

    try:
        client, created_thread_id = test_discussion_threads_endpoints()

        # Gerar relat√≥rio final
        client.print_summary_report()

        # Salvar relat√≥rio detalhado
        report_file = client.save_detailed_report("discussion_threads_test_report.json")

        client.log_success("Testes de threads de discuss√£o conclu√≠dos!")

        return client

    except KeyboardInterrupt:
        print(f"\n{APITestClient().log_warning('Testes interrompidos pelo usu√°rio')}")
    except Exception as e:
        print(f"\n{APITestClient().log_error(f'Erro durante os testes: {str(e)}')}")
        raise

if __name__ == "__main__":
    main()
