#!/usr/bin/env python3
"""
Testes de Administra√ß√£o - SynQcore API

Este script testa todos os endpoints administrativos:
- GET /api/admin/users
- POST /api/admin/users
- GET /api/admin/roles

Execu√ß√£o: python test_admin.py
"""

import sys
import os
import time
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from utils.api_test_utils import APITestClient, wait_between_tests

def test_admin_endpoints(client: APITestClient = None):
    """Testa todos os endpoints administrativos"""

    if not client:
        client = APITestClient()
        if not client.authenticate():
            client.log_error("Falha na autentica√ß√£o. Teste abortado.")
            return client

    client.log_info("üëë Iniciando testes administrativos")

    # 1. Teste de listagem de pap√©is dispon√≠veis
    client.log_info("1Ô∏è‚É£  Testando listagem de pap√©is (roles)")
    result = client.make_request('GET', '/api/admin/roles')
    client.print_test_result(result)
    wait_between_tests()

    # 2. Teste de listagem de usu√°rios (com pagina√ß√£o)
    client.log_info("2Ô∏è‚É£  Testando listagem de usu√°rios")
    result = client.make_request('GET', '/api/admin/users', params={'page': 1, 'pageSize': 10})
    client.print_test_result(result)
    wait_between_tests()

    # 3. Teste de busca de usu√°rios por nome
    client.log_info("3Ô∏è‚É£  Testando busca de usu√°rios por nome")
    result = client.make_request('GET', '/api/admin/users', params={'searchTerm': 'admin'})
    client.print_test_result(result)
    wait_between_tests()

    # 4. Teste de cria√ß√£o de novo usu√°rio administrativo
    client.log_info("4Ô∏è‚É£  Testando cria√ß√£o de novo usu√°rio")
    timestamp = int(time.time())
    new_user_data = {
        "email": f"novo.usuario.{timestamp}@synqcore.com",
        "password": "NovaSenh@123!",
        "firstName": "Novo",
        "lastName": "Usu√°rio",
        "roles": ["Employee"]  # Papel b√°sico
    }
    result = client.make_request('POST', '/api/admin/users', data=new_user_data)
    client.print_test_result(result)

    # Armazenar ID do usu√°rio criado para testes futuros
    created_user_id = None
    if result.success and result.response_data:
        created_user_id = result.response_data.get('id')
        client.log_success(f"Usu√°rio criado com ID: {created_user_id}")

    wait_between_tests()

    # 5. Teste de cria√ß√£o de usu√°rio com papel de Manager
    client.log_info("5Ô∏è‚É£  Testando cria√ß√£o de usu√°rio Manager")
    manager_data = {
        "email": f"manager.{timestamp}@synqcore.com",
        "password": "ManagerSenh@123!",
        "firstName": "Gestor",
        "lastName": "Teste",
        "roles": ["Manager", "Employee"]
    }
    result = client.make_request('POST', '/api/admin/users', data=manager_data)
    client.print_test_result(result)
    wait_between_tests()

    # 6. Teste de cria√ß√£o de usu√°rio com dados inv√°lidos
    client.log_info("6Ô∏è‚É£  Testando cria√ß√£o com dados inv√°lidos")
    invalid_user_data = {
        "email": "email-invalido",  # Email inv√°lido
        "password": "123",  # Senha muito simples
        "firstName": "",  # Nome vazio
        "lastName": "",  # Sobrenome vazio
        "roles": ["RoleInexistente"]  # Papel que n√£o existe
    }
    result = client.make_request('POST', '/api/admin/users', data=invalid_user_data)
    client.print_test_result(result)
    wait_between_tests()

    # 7. Teste de cria√ß√£o de usu√°rio com email duplicado
    client.log_info("7Ô∏è‚É£  Testando cria√ß√£o com email duplicado")
    duplicate_email_data = {
        "email": "admin@synqcore.com",  # Email que j√° existe
        "password": "OutraSenh@123!",
        "firstName": "Admin",
        "lastName": "Duplicado",
        "roles": ["Employee"]
    }
    result = client.make_request('POST', '/api/admin/users', data=duplicate_email_data)
    client.print_test_result(result)
    wait_between_tests()

    # 8. Teste de listagem com filtros avan√ßados
    client.log_info("8Ô∏è‚É£  Testando listagem com filtros avan√ßados")
    result = client.make_request('GET', '/api/admin/users', params={
        'page': 1,
        'pageSize': 5,
        'searchTerm': 'teste',
        'sortBy': 'email',
        'sortOrder': 'asc'
    })
    client.print_test_result(result)
    wait_between_tests()

    # 9. Teste de acesso negado (remover temporariamente permiss√µes de admin)
    client.log_info("9Ô∏è‚É£  Testando acesso com usu√°rio n√£o-admin")
    # Este teste simula um cen√°rio onde um usu√°rio n√£o-admin tenta acessar endpoints admin
    # Em um ambiente real, seria necess√°rio autenticar com um usu√°rio diferente
    client.log_info("   (Simula√ß√£o: em produ√ß√£o, este endpoint deveria retornar 403 Forbidden)")
    wait_between_tests()

    return client, created_user_id

def main():
    """Fun√ß√£o principal de execu√ß√£o dos testes"""
    print("üöÄ SynQcore API - Testes Administrativos")
    print("=" * 50)

    try:
        client, created_user_id = test_admin_endpoints()

        # Gerar relat√≥rio final
        client.print_summary_report()

        # Salvar relat√≥rio detalhado
        report_file = client.save_detailed_report("admin_test_report.json")

        client.log_success("Testes administrativos conclu√≠dos!")

        if created_user_id:
            client.log_info(f"Usu√°rio de teste criado com ID: {created_user_id}")
            client.log_info("Este usu√°rio pode ser usado para testes adicionais")

        return client

    except KeyboardInterrupt:
        print(f"\n{APITestClient().log_warning('Testes interrompidos pelo usu√°rio')}")
    except Exception as e:
        print(f"\n{APITestClient().log_error(f'Erro durante os testes: {str(e)}')}")
        raise

if __name__ == "__main__":
    main()
