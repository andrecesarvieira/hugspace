#!/usr/bin/env python3
"""
Testes de Funcion√°rios - SynQcore API

Este script testa todos os endpoints de funcion√°rios:
- GET /api/employees
- POST /api/employees
- GET /api/employees/{id}
- PUT /api/employees/{id}
- DELETE /api/employees/{id}
- GET /api/employees/hierarchy

Execu√ß√£o: python test_employees.py
"""

import sys
import os
import time
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from utils.api_test_utils import APITestClient, wait_between_tests, create_sample_data

def test_employee_endpoints(client: APITestClient = None):
    """Testa todos os endpoints de funcion√°rios"""

    if not client:
        client = APITestClient()
        if not client.authenticate():
            client.log_error("Falha na autentica√ß√£o. Teste abortado.")
            return client

    client.log_info("üë• Iniciando testes de funcion√°rios")

    # Dados de exemplo
    sample_data = create_sample_data()

    # 1. Teste de listagem de funcion√°rios
    client.log_info("1Ô∏è‚É£  Testando listagem de funcion√°rios")
    result = client.make_request('GET', '/api/employees')
    client.print_test_result(result)
    wait_between_tests()

    # 2. Teste de listagem com pagina√ß√£o
    client.log_info("2Ô∏è‚É£  Testando listagem com pagina√ß√£o")
    result = client.make_request('GET', '/api/employees', params={'page': 1, 'pageSize': 5})
    client.print_test_result(result)
    wait_between_tests()

    # 3. Teste de busca por nome
    client.log_info("3Ô∏è‚É£  Testando busca por nome")
    result = client.make_request('GET', '/api/employees', params={'searchTerm': 'admin'})
    client.print_test_result(result)
    wait_between_tests()

    # 4. Teste de cria√ß√£o de funcion√°rio
    client.log_info("4Ô∏è‚É£  Testando cria√ß√£o de funcion√°rio")
    timestamp = int(time.time())
    employee_data = sample_data["employee"].copy()
    employee_data["email"] = f"funcionario.{timestamp}@synqcore.com"

    result = client.make_request('POST', '/api/employees', data=employee_data)
    client.print_test_result(result)

    # Armazenar ID do funcion√°rio criado
    created_employee_id = None
    if result.success and result.response_data:
        created_employee_id = result.response_data.get('id')
        client.log_success(f"Funcion√°rio criado com ID: {created_employee_id}")

    wait_between_tests()

    # 5. Teste de obten√ß√£o de funcion√°rio por ID
    if created_employee_id:
        client.log_info("5Ô∏è‚É£  Testando obten√ß√£o por ID")
        result = client.make_request('GET', f'/api/employees/{created_employee_id}')
        client.print_test_result(result)
        wait_between_tests()

    # 6. Teste de atualiza√ß√£o de funcion√°rio
    if created_employee_id:
        client.log_info("6Ô∏è‚É£  Testando atualiza√ß√£o de funcion√°rio")
        update_data = {
            "firstName": "Jo√£o Carlos",
            "lastName": "Silva Santos",
            "positionTitle": "Desenvolvedor Pleno",
            "skills": "Python, .NET, React, Docker"
        }
        result = client.make_request('PUT', f'/api/employees/{created_employee_id}', data=update_data)
        client.print_test_result(result)
        wait_between_tests()

    # 7. Teste de hierarquia organizacional
    client.log_info("7Ô∏è‚É£  Testando hierarquia organizacional")
    result = client.make_request('GET', '/api/employees/hierarchy')
    client.print_test_result(result)
    wait_between_tests()

    # 8. Teste de busca avan√ßada
    client.log_info("8Ô∏è‚É£  Testando busca avan√ßada")
    result = client.make_request('GET', '/api/employees', params={
        'searchTerm': 'desenvolvedor',
        'sortBy': 'firstName',
        'sortOrder': 'asc',
        'page': 1,
        'pageSize': 10
    })
    client.print_test_result(result)
    wait_between_tests()

    # 9. Teste de cria√ß√£o com dados inv√°lidos
    client.log_info("9Ô∏è‚É£  Testando cria√ß√£o com dados inv√°lidos")
    invalid_data = {
        "firstName": "",  # Nome vazio
        "lastName": "",   # Sobrenome vazio
        "email": "email-invalido",  # Email inv√°lido
        "phoneNumber": "123"  # Telefone muito curto
    }
    result = client.make_request('POST', '/api/employees', data=invalid_data)
    client.print_test_result(result)
    wait_between_tests()

    # 10. Teste de obten√ß√£o com ID inv√°lido
    client.log_info("üîü Testando obten√ß√£o com ID inv√°lido")
    result = client.make_request('GET', '/api/employees/00000000-0000-0000-0000-000000000000')
    client.print_test_result(result)
    wait_between_tests()

    # 11. Teste de exclus√£o (soft delete)
    if created_employee_id:
        client.log_info("1Ô∏è‚É£1Ô∏è‚É£ Testando exclus√£o de funcion√°rio")
        result = client.make_request('DELETE', f'/api/employees/{created_employee_id}')
        client.print_test_result(result)
        wait_between_tests()

        # Verificar se foi exclu√≠do (soft delete)
        client.log_info("1Ô∏è‚É£2Ô∏è‚É£ Verificando se funcion√°rio foi exclu√≠do")
        result = client.make_request('GET', f'/api/employees/{created_employee_id}')
        client.print_test_result(result)
        if not result.success:
            client.log_success("Funcion√°rio foi exclu√≠do com sucesso (soft delete)")

    return client, created_employee_id

def main():
    """Fun√ß√£o principal de execu√ß√£o dos testes"""
    print("üöÄ SynQcore API - Testes de Funcion√°rios")
    print("=" * 50)

    try:
        client, created_employee_id = test_employee_endpoints()

        # Gerar relat√≥rio final
        client.print_summary_report()

        # Salvar relat√≥rio detalhado
        report_file = client.save_detailed_report("employees_test_report.json")

        client.log_success("Testes de funcion√°rios conclu√≠dos!")

        return client

    except KeyboardInterrupt:
        print(f"\n{APITestClient().log_warning('Testes interrompidos pelo usu√°rio')}")
    except Exception as e:
        print(f"\n{APITestClient().log_error(f'Erro durante os testes: {str(e)}')}")
        raise

if __name__ == "__main__":
    main()
